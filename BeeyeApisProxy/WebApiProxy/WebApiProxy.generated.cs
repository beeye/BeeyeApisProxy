//------------------------------------------------------------------------------
//<auto-generated>
//  This file is auto-generated by WebApiProxy
//  Project site: http://github.com/faniereynders/webapiproxy
//  
//  Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using WebApi.Proxies.Models;

#region Proxies
namespace WebApi.Proxies
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string MyWebApiProxyBaseAddress = "https://betabeeyev2.azurewebsites.net/";
	}
}
#endregion

#region Models
namespace WebApi.Proxies.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}

	
	/// <summary>
	/// 
	/// </summary>
	public partial class Activate2FARequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Secret { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TestCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Password { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActiveBeeyeWebHook
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AuthKey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TargetUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSystem { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String InternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityBilling
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual BillingType BillingType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DefaultActs { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityCustomFields
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldDefaultValue> DefaultCustomFieldsValues { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityDateRule
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> FixedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateComparisonType ComparisonType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OffsetDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OffsetWeeks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OffsetMonths { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IgnoreWeekEnds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid ComparedActivityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CustomFieldIdWithFor { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityDatesRules
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityDateRule StartDateRule { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityDateRule ProjectedEndDateRule { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityDuration
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Decimal> Duration { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityExclusion
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ExclusionCondition Condition { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ExclusionType Type { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityExclusions
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ActivityExclusion> Exclusions { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityLine
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid ID { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Ressource_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Company_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CompanyName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ActionDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActionGroup { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TargetRessource_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TargetRessourceName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityRecurrenceRule
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RepeatEveryDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RepeatEveryWeeks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RepeatEveryMonths { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IgnoreWeekEnds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityDateRule EndDateDateRule { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityScenario
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Order { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid ActivityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityUsersFilters UsersFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityBilling BillingRules { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityDatesRules DatesRules { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityRecurrenceRule RecurrenceRules { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityToDos ToDos { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityExclusions Exclusions { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityCustomFields CustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityDuration Duration { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityTextDescription TextDescription { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<JToken> Filters { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityTextDescription
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityToDo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ToDoText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFinished { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> FinishedAtDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityToDos
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ActivityToDo> ToDos { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityUsersFilters
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<JToken> BeeyeFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid ActivityLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectionType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AddonDetails
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Price { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double FullPrice { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApiActivity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AverageCosting { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AverageSelling { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> ActivityFamilyId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityFamilyExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ActivityScenario> Scenarios { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ActivityUsersFilters> UsersFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CompanyId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApiActivityFamily
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityFamilyName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CompanyId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ApiActivity> Activities { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityCustomFields CustomFieldsValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAutoPlanned { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApiClient
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String AddressCity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AddressCountry { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AddressLine1 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AddressLine2 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AddressPostalCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AddressState { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientLogo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientWebSite { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactEmail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactPhone { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalReference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String VATNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CompanyId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Boolean> IsDeleted { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApiImport
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateCreated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateUpdated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ImportFileId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImportFileUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImportFileName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImportConfiguration { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ImportStatus Status { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Report { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RequesterName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual EmployeJS__ Requester { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApiProject
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> Milisime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ApiClient Client { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CategoryName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CategoryId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ApiRessource Responsible { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityFamilyExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RemoveClient { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ApiprojectRessource> UsersToAddOrUpdate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ApiRessource> UsersToRemove { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApiprojectRessource
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ApiRessource User { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ApiProject Project { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BaseLine { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> HourRate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApiRessource
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Email { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Role_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RoleName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Direction_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Title_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TitleName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RemoveStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RemoveEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Boolean> IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Culture { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Boolean> CanViewTeam { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Boolean> CanViewCompany { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceHourRate> CostRates { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApiTask
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityBilling BillingInfos { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityDuration Duration { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ApiProject Project { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApproConfig
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsEnabled { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ApproConfigInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Enabled { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ApproConfig Config { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AssignMultiples
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> RessourcesIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ProjectsIds { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AswerQuestion
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SendCommentAswer> CommentList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class BaseBeeyeTrigger
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Guid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual NotificationType NotificationType { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class BaseDashboardComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class BaseFilter
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual FilterType DataFilterType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsQuerrybale { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class BaseRapport
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectsList> GroupsOfProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsHeadLoad { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class BeeyeWebHook
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String InternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class BillRateHistory
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceBillRate> toUpdate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceBillRate> toDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CapacityGraph
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CatId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CategoryName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Period { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CapacityGraphComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Grouping { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UseReals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UseAvailability { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodeSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UnitSpliting { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePercentages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowTable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CapacityGraphComponentResults
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CapacityGraph> Graphs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> PeriodeNames { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ChargeBeeAddon
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameWithPrice { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Currency { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken MetaData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Client
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactEmail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactPhone { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressLine1 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressLine2 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressState { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressCountry { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressCity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressPostalCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientLogo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientWebSite { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalReference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String VATNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeDeleted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDeleted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldValue> CustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Company_Id { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ClientBilingInfos
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ClientId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual InvoiceDetails InvoiceDetails { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SubscriptionDetails> ActiveSubscriptions { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<AddonDetails> ActiveAddons { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Invoiced> Invoices { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasCard { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String MaskedCard { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NextInvoiceText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<DiscountDetails> Discounts { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ColumnInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AgregateType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String MandatoryImportGroup { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListField> PossibleValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TranslationLine Translation { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ColumnInfoForExport
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ExportType ExportType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AgregateType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String MandatoryImportGroup { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListField> PossibleValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TranslationLine Translation { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CompagnyGeneralParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double WorkHoursPerWeek { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RemainsToBeDone { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DefaultOccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DefaultRoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DefaultWorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CompagnyLogo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MaxWorkHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OrderPostesByDisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean BlockEnterTimeOnProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean PreFill { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ApplicationPage DefaultPage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CountryCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RegionCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ZipCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ConcatenatedFormula { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ProjectSurveyEnable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SurveyCanChange { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IgnoreDataLoadingWarning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String BaseUnit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowLatePlannings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectSheetPlanningStep { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CompagnyInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanningWorkSpace> workSpaces { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SpendingType> spendingTypes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Taxe> taxes { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CompanyJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PrincipalApiKey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CurrentFinancialYear { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Responsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Logo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UsersCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DirectionsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ConnexionsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DashBoardCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSelfServe { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ComparisonGraphComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ComparisonGraphSortingTypes Sorting { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ComparisonGraphReturnType
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlannedHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOther { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConfigRessourcesModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Position { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Team { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String HighView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Role { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NumProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDeleted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Conflict
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Ressource_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Overcapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Planned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsConflict { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Title { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbConfli { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IEnumerable<Int32> Projects { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConflictParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ResosurceIds { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConflictsDayPlanning
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OverCapacityPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Total { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictType> Conflicts { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Block { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CannotAddPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Conflict Conflict { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictsPlanning> Plannings { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConflictsManagmentEntity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String EntityName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictsDayPlanning> Days { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictsPlanning> LatePlannings { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConflictsPlanning
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRessourcePlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Client { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectedTaskEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFinished { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanFinish { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean NotFinishOldPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanUnlock { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DefaultOrderDisplay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAutoPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TaskPlanningWorkSpace WorkSpaces { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsLocked { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> LockedBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasComments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFinish { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> WorkSpaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LockedByNames { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double OldAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime OldStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime OldEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAutoPlanning { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CreateCompanyJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RespPrenom { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RespNom { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResptMail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RespOccupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactMail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Direction { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TempsSemaine { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimeSheetEvery { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DefaultRoleName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CountryCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PostalCode { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CreditCardInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String CardHolderName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CardNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CardExpirationMonth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CardExpirationYear { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CardValidation { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldCategory
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldJs> customfields { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldDefaultValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldType CustomFieldType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ListValue { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldJs
	{
		#region Constants
		/// <summary>
		/// 
		/// </summary>
		public const Int16 AgregationSum = 1;
		/// <summary>
		/// 
		/// </summary>
		public const Int16 AgregationAverage = 2;
		/// <summary>
		/// 
		/// </summary>
		public const Int16 AgregationMinimum = 3;
		/// <summary>
		/// 
		/// </summary>
		public const Int16 AgregationMaximum = 4;
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVisible { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsUniqueCustom { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsReadOnly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Expression { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> MinValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> MaxValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsedForTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsedForRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsedForClient { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldValue Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldTypeUsedFor OldUsedInObject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldPossibleValue> PossibleValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UsedInProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldType FieldType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Category { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Category_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ValueStr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AggregationType { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldJsMinimal
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldType FieldType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Category { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Category_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ValueStr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AggregationType { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldPermissionJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanRead { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanWrite { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CategoryId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CategoryName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldPossibleValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CustomFieldName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime LastChanged { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Project_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Task_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Ressource_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Resource_ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TargetResource_ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ListValue_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Client_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Client_ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DataShareTargetsHolder
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItem> Roles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItem> Postes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItem> Directions { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItem> Users { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DatesRangeFilteredRequest<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String JSONFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual T RequestObject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DatesRangeFilteredRequestPagination<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual PaginationData PaginationData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String JSONFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual T RequestObject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DatesRangeRequest<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual T RequestObject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DatesRangeRequestBase
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DatesRangeRequestProjectsDueDate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> Ids { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ActivityDateRule> TypeData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsClientUpdate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DelegationJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 IdBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 IdTo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameTo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OccupationBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OccupationTo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PhotoBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PhotoTo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DirectionEmployeesStats
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Responsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceStats> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DirectionJS__
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual EmployeJS__ Responsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> SelectedMonths { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DirectionModelOrgChart
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResponsibleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResponsibleName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<DirectionModelOrgChart> SubDirections { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<EmployeJS__> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DiscountDetails
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsPercentage { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class EmployeeTaskHours
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Hours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ComparatifPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CellNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLanguageId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPass { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class EmployeJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CellNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLanguageId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPass { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class EmployeJS__
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CellNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLanguageId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPass { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class EmployeJSWithCustomFields
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldValue> CustomFieldValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CellNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLanguageId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPass { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Enable2FAResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Secret { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String QRCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ExcelDemoTemplate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ExclusionCondition
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] Value { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Expense
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime SpendingDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskProjectedEnd { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> TaskActivityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Taxe> TaxesSelected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Taxes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SpendingType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SpendingTypeExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SpendingTypeText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceImage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeDeleted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TimeSheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasFiles { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ExportConfig
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExportName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ExportSheetConfig> Sheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsCompanyTemplate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OwnerId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsShared { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ExportConfigRun
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ExportConfig Export { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TestAjout { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ExportSheetConfig
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ExportType Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String JsonFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ColumnInfoForExport> Columns { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FastPlaningGetProject
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OnlyProjectThatCanAddTasks { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Fee
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskProjectedEnd { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> TaskActivityId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FinancialInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectJS Project { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BilledAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MontantGagne { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PayedAmounts { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double VendantPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Expenses { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRHCostPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginDollar { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRHCostBaseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double VendantBaseline { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FondDeFinancementJSBD
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FondName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalReference { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FormApiParm
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CompId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StrinGuid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Email { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean NewGUID { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameSender { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ValueJson { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FormJs
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Company_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Required { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceStats> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FormJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Required { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Company_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectCloseDateRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceStats> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FormRedundantJson
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FormIndex { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FormNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Reference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Format { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbPage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Lang { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FinalFile { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean FinalFileDyn { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PdfHRRequired { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DateThisVersion { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DateNewVersion { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DateVersion { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Other { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NoLaserForm { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NumberGroup { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RequiredFileType { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FormReturn
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<FormJs> FormList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual FormValueJson formValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 State { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowRejectValid { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FormValueJson
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean DateFlex { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<FormRedundantJson> FormsRedundantList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FormValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RequestCreate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RequestCreateQty { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RequestModif { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RequestModifQty { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RequestFileExist { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RequestFileExistQty { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Email { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Institut { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Public { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] CompConcer { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Place { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 InvisibleAnchors { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SignGerePar { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Datepublic { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Phone { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Fonction { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Phone2 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Courriel2 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 BusinessSector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CostCenter { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SpecificProjectnumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameOfProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SecondApplicant { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirsValidDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FinalFilesDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImplementationDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OtherDetails { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameIT { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class FormValueReturn
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String InterneNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ValueJson { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SeekerName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DateFirstSave { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DateValidRej { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String link { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime FirstSave { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ValidationRejectDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Type { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GeneralParams_Return
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual CompagnyGeneralParams Parametres { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<MonthInfo> Months { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<UserForFacturation> Users { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetPlanningLineRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<IntervalHelper> Periods { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual UnitsMode UnitsMode { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetPlanningParams
	{
		#region Constants
		/// <summary>
		/// 
		/// </summary>
		public const Int32 TimeModeDay = 1;
		/// <summary>
		/// 
		/// </summary>
		public const Int32 TimeModeWeek = 2;
		/// <summary>
		/// 
		/// </summary>
		public const Int32 TimeModeMonth = 3;
		/// <summary>
		/// 
		/// </summary>
		public const Int32 PlanByProject = 1;
		/// <summary>
		/// 
		/// </summary>
		public const Int32 PlanByRessource = 2;
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimeMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual UnitsMode UnitsMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PlanningGrouping { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ItemId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Agregate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FieldToGroup { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SavePreferences { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePagination { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SortingOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReducePlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String GroupingField { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean LoadOnlyOne { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReadOnly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SimpleProject> Projects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowEmptyLines { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetRessourcesRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReturnNotAssignedEmployees { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> PreselectedUser { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetTimesheetFromProjectRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TakeEmptyTasks { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetTimesheetRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsReadOnly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TakeEmptyProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean BlockEnterTimeOnProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TakeEmptyTasks { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GraphCapacityByOccupation
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimeType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean GetReel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean GetHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePercentages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GraphCapacityByOccupationValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<InfoDashBoardSend> GroupedData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> Intervals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GraphInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CreateNew { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 View { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<BaseDashboardComponent> Components { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GtGpConfig
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsEnabled { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean WasUploaded { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime LastUpload { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastUploadBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OracleCfId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> LastPeriodStart { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> LastPeriodEnd { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<UploadedFilesGtGp> Files { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSap { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GtGpImportError
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 LineNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeOfError { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OracleCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Action { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFileValid { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GtGpImportResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<GtGpImportError> Errors { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class InfoDashBoardSend
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String PosteName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PosteId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbRessources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> AllTotal { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class IntegrationConfigurationBasic
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IntegrationType IntegrationType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class IntegrationConfigurationSellsy
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String AccessToken { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AccessTokenSecret { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ConsumerToken { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ConsumerSecret { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IntegrationType IntegrationType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class IntervalHelper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkDays { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Invoiced
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> InvoicedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AmountHT { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AmountTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AmountTaxes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Paid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Status { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StatusColor { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class InvoiceDetails
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String CompanyName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Address { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Apartment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Contact { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Zip { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String City { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Email { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Country { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String State { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class JContainer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken First { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Last { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Count { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JContainer Parent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Root { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JTokenType Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Next { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Previous { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Path { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Item { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class JToken
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual JTokenEqualityComparer EqualityComparer { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JContainer Parent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Root { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JTokenType Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Next { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Previous { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Path { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Item { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken First { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual JToken Last { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class JTokenEqualityComparer
	{
		#region Constants
		#endregion

		#region Properties
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class KpiSingleNumberCustomFields
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodeSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ListId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Agregation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class KpiSingleNumberCustomFieldsValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TotalProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LangDefinition
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String EnglishName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LocalName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ListField
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Order { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TranslationLine Translation { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ListItem
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ListItemInt
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LoginParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserPassword { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Remember { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String User2FA { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LuccaConfig
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsEnabled { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LuccaKey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomField { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> LuccaCategories { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean NotifyIfTimesheetIsValidated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NotificationEmails { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LuccaBaseUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LuccaApiKey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AutoFinishPlaningCards { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CategoriesToIgnore { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LuccaError
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ErrorMessage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Request { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAm { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> DateAbsence { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Original { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImportId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OriginalRequestId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LuccaImportParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] UserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SignalRId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MandatoryFields
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ClientIsMandatory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldJs> CustomFieldList { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MinimalEmployeCreation
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Email { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TitleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ContractStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ContractEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalReference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BillingRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> CostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludeFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MinimalEmployeeData
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MonthInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class NewDirections
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ParsedUserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ParsedDirectionIds { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class NewPositions
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ParsedUserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ParsedPositionIds { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class NewRoles
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ParsedUserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ParsedRoleIds { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class NotSubmitedTimesheetsResponse
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbNotSubmit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbTimeSheetDone { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbTimeSheetSubmit { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class OccupationJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OccupationName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TaxReturns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class OccupationJSWithRessources
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceStats> Ressources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OccupationName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TaxReturns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class OptUser
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Email { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PasswordHash { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Password { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 BeeyeCreatedId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class OrgNeed
	{
		#region Constants
		/// <summary>
		/// 
		/// </summary>
		public const Byte NeedsTimesheets = 1;
		/// <summary>
		/// 
		/// </summary>
		public const Byte NeedsPlanning = 2;
		/// <summary>
		/// 
		/// </summary>
		public const Byte NeedsReporting = 3;
		/// <summary>
		/// 
		/// </summary>
		public const Byte NeedsIntegrations = 4;
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PaginationData
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Page { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PerPage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFromRequest { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual PaginationEntity PaginateBy { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PeriodValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean PrOk { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TOk { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EmOk { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanBulkParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PlanParams> PlanParams { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlannificationMonthly
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Ammount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsWeek { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime FirstDay { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Planning
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsTotals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePercantages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ChildsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalTotalPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Poste { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTodo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Projected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Direction { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Category { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SecondCategory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTaskPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PlanningEntity> Childs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> Totals { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningEntity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HoursDaily { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ValueWithDates> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsTotals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePercantages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ChildsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalTotalPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Poste { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTodo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Projected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Direction { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Category { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SecondCategory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTaskPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PlanningEntity> Childs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> Totals { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningResponse
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 MaxResults { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ColumnsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PlanningTimeUnit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SimplifiedPlanningEntity> Plannings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MaxAvalibilityHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<IntervalHelper> Periods { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Planning> Planings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual GetPlanningParams Config { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> Totals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UsersCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 MaxLines { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<IntervalHelper> Intervals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Truncated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean MaxLinesReached { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 LoadedLines { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningTimeLine
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 pId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 tId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 rId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Start { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual PlanningMode Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ResosurceIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AutoAdjustDates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ChangeTask { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean BlockModif { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProfileUser
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual RessourceStats ResourceInfo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] SelectedDelegations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid[] NotificationNotToDelete { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<DelegationJS> AllDelegations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean DelegationIsModify { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjecMonthlyPlanned
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PlannificationMonthly> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HoursWeekly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectContainer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasProjectHoursPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectData
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> Fields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TranslationLine Translation { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectDynamicNameField
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItemInt> ListValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldType CustomFieldType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ListValue { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectFastPlanningResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectShortDescr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealTimeSum { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlanificationSum { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskFastPlanningResult> Tasks { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectGraphMax
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double GraphMax { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double GraphMaxCumulated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double GraphMaxDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double GraphMaxDayCumulated { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectJS Project { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTypeJS> ProjectTypes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<FondDeFinancementJSBD> Fonds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AllPlanif { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AllReel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalBaseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectedProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RAF { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectCloseDateRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ProjectCloseDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectObjective> ProjectObjective { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldValue> CustomFieldsValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTask> ProjetTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjecMonthlyPlanned projecMonthlyPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectTypeJS PrimaryProjectType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTypeJS> AddedProjectTypes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual EmployeJS__ ProjectResponsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HaveSurveyAnswer { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IEnumerable<RessourceStats> ProjectRessources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<DirectionEmployeesStats> ProjectRessourcesDirections { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectDescription { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TemplateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FondDeFinancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectSheetPlanningStep { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientExternalReference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectPrevu { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ConcatenatedFormula { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OriginalName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> Millesime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectGagne { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RessourcesNeedsSurvey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PlanMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<UploadedFile> Files { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectState State { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlannedWithExcl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRealWithExcl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRHCost { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTaskPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CreatedBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String WorkPlace { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> CreatedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> ActivityFamilyId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Advancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRealShown { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlannedShown { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRaF { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalProjected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalUsedAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HoursWeekly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectJSMainStats
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectTypeJS PrimaryProjectType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FondDeFinancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> Millesime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectGagne { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectPrevu { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReelsExclude { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> AllReals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ProjectIsClose { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ProjectCloseDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectCloseDateRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> Projected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalPlanifsExclude { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> AllPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReelsDollars { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalPlanifDollars { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalPlannedDollarsNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalTaskPlannedDollarsFutur { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalTaskPlannedFutur { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReelDollarsPast { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReelPast { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> RaFProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReelsDollarsNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalRhCostNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BurnRateReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BurnRatePlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectState CurrentState { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentStateCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CurrentStateColor { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginMoney { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginMoneyTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginPercentageTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateComment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> Avancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRhCost { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRhCostPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldJsMinimal> CustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalExpenses { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalExpensesNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalAllExpensesNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String MainCategory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SecondCategory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Responsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Invoice { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double InvoiceTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Paid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PaidTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double StillToPlanTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BudgetedHRCosts { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BudgetedHRRevenue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalExpensesHT { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalExpensesHTNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal Fees { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Landing { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double LandingTime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal ProjectDuration { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResponsableId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double InvoiceHT { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double InvoiceHTTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double DifferenceDollar { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double DifferenceTime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectDurationDollar { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectMiniInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CompaniesId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CompaniesName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual RessourceStats CompaniesManager { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectObjective
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal GoalValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal ReachedValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ObjectiveCompleted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ObjectiveDueDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectQuickCreate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedClient { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> Millesime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> ActivityFamilyId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldValue> CustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HoursWeekly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSearchResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectShortDescr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectsList
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> Footer { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectData> Projects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TranslationLine Translation { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectState
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SatetCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime CreatedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ModifiedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AddedBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSuccess
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double OverallRating { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbRessourceSurveyDone { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanChangeSurvey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbRessourceNeedSurvey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Rating> Ratings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Question> Questions { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSuccessComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Ascending { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSuccessPieComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSuccessReturn
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double OverallRating { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSurveyQuestion
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CompagnieId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Question { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Weighting { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> SectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ICollection<ProjectSurveyQuestionAnswer> ProjectSurveyQuestionAnswers { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectSurveyQuestionSection ProjectSurveyQuestionSection { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSurveyQuestionAnswer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Question_ID { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Ressources_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Projects_ID { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Answer { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectSurveyQuestion ProjectSurveyQuestion { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSurveyQuestionSection
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Company_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Required { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ICollection<ProjectSurveyQuestion> ProjectSurveyQuestion { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTask
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String currentStateColor { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HaveComment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String WorkPlace { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DefaultWorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndPrevutDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndtDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 currentStateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String currentStateText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AssignedRessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AssignedRessourceImg { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AssignedRessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double reelsTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double vendRHTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double vendRHDates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double costRHTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double costRHDates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double reelsSumForDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String IsSubscribedText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double planSumForDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double planSumTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTask> Childs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlanSumForDateRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ReelsSumForDateRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> FondDeFinancement_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BudgetDollar { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Client { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ClientId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> ActivityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityBillingJson { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityBilling ActivityBillingRules { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldJs> CustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastComments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskComment> Comments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IEnumerable<EmployeeTaskHours> Ressources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubscribed { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal DefaultDuration { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ProjectIsAvailable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RecurrenceJson { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityRecurrenceRule RecurrenceRules { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UsersFiltersJson { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityUsersFilters UsersFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ToDoListJson { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ActivityToDo> ToDoList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AverageCosting { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AverageSelling { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTaskMinimal
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ProjectsIdList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEnterTime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentStateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DefaultWorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> DueDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> ActivityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentTaksId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskTargetedEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjecName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTemplate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CompanyId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UserId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OriginalProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CategoryId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FondId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DaysLength { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TasksCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskTemplate> Tasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldJsMinimal> CustomFields { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTemplateParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsPrivate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTypeJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectTypeId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectTypeName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ProjectSurveyEnable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubscribed { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTypeStats
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> CustomFieldsFooter { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectJSMainStats> Projects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectTypeId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectTypeName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ProjectSurveyEnable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubscribed { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectWithTasks
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean isSelected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ClientId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTask> Tasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubscribed { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TimeReal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TimePlanned { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Question
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RateHistory
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceHourRate> toUpdate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceHourRate> toDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Rating
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RatioGraphComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual RatioGraphGroupingTypes Grouping { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UseReals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RatioGraphReturnType
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String GroupName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Hours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOther { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RealtimeEntry
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HourCost { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RecommendationRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CategoryId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ClientId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RecurentPlanParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual RecurrenceType RecurrentType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DayOfWeek RecurrentDayOfTheWeek { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ResosurceIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAmountTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAmountPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CopyFrom { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean BlockModification { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ReplaceRessource
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ReplaceRessourceProject> ressoProject { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ReplaceRessourceProject
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ReplanProjectsRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ProjectsIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime NewProjectsStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RecreateTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CopyCustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual PlanningSelection PlanType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SignalRId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CloseOriginalProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Renew { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldValue> CustomFieldOverrides { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasks
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateDebut { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateFin { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateFinprevue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 State { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CascadeState { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasksBillingRules
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ActivityBilling BillingRules { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasksDeadline
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> Deadline { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasksDefaultDuration
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal DefaultDuration { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasksDescription
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasksFilter
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectionType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<JToken> BeeyeFilters { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasksInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskDescription { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NewResp { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal DefaultDuration { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual RequesTasksFilter filter { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> Deadline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NewCurrentStateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ActivityToDo> Todo { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasksInfosUpdate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual RequesTasksInfo data { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> TasksId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasksTodo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ActivityToDo> Todo { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestConflicts
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect View { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OnlyWithPlannings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowByResource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IncludeOnlyOverCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean PrecalculateConflicts { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IncludeDetails { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestDeclareDone
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 resourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 taskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean changeTimeSheet { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestPlanningTasks
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect View { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TimeMode TimeMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReadOnly { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestProjectManaged
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UserId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowClosedProject { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestProjectManagedForUser
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Mode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ForUserOnly { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestProjectResources
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ByDirec { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestSelectedBulkAction
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Ids { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ListItemInt[] ValueChange { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestSelectedProjects
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Ids { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] SelectedNameForm { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OpenProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CloseProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectJSMainStats newData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> ActivityFamilyId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestSelectedTasks
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Ids { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NewCurrentStateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NewRessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateDebut { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateFinprevue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime RealEnd { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateFin { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestTimesheetsSummaries
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] UserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OnlySubmitedOrValidated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ValidatedAfter { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ResourceBulkUpdate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> UserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TeamId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> PositionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> CostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> MinHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> MaxHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> ViewSelected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldValue> CustomFieldValues { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ResourceContainer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineToDo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Projected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageURL { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ResourceWithListModification
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<OccupationJS> OccupationsList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RoleJS> RolesList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CompaniesId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CompaniesName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual EmployeJS__ CompaniesManager { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CellNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLanguageId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPass { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ResponseContainer<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual T Item { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ErrorMessage { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceBillRate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UserId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceGeneralInformations
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<UploadedFile> Files { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AnyPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlannifCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ReelCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Password { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPassConfirm { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHourRH { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Effort { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RaFProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectedProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NumeroNAS { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double StillToPlanTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectsNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SkillJs> Competences { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TimeBank { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TauxCoutant { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double[] SparkLineData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TimeBankTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CellNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLanguageId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPass { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceHourRate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UserId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceParam
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TakeDeleted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePlanView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TakeTotalPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourcesForNewProject
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<OccupationJSWithRessources> Occupations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<OccupationJSWithRessources> AdditionalUsers { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasAditionalRessources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceStats
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AnyPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlannifCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ReelCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Password { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPassConfirm { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHourRH { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Effort { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RaFProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectedProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NumeroNAS { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double StillToPlanTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectsNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SkillJs> Competences { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TimeBank { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TauxCoutant { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double[] SparkLineData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TimeBankTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CellNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLanguageId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPass { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceUpdate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UserId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserFirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String EditedMail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> Taux { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TauxLoaded { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TauxFromOccupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalReference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> RealMaxWorkDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> MaxWorkDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TauxHoraireCoutant { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] DashboardAccses { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Boolean> ExcludeFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndContratDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RemovedEndContractDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RoleJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String RoleName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanManageHourRates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanManageHourBillRates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanManageHourCostRates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanManageRoles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanConfigureCompany { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanManageOrganigramme { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanAccsesMyAccount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasATimeShit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanValidateTimeSheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasScenarios { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTaxReturns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanCreateTaskOnFamilyProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanViewRapports { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditRapports { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanAccesConnectivity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanAccessProjectSuccess { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditBudget { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NumberOfUsers { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual PlanificationLevel PlanificationLevel { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SearchCriteriaRapports
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime From { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime To { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SortType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedFondId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedCategorie { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 BeeyeFilter { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Columns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ColOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAsc { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowTaskEnd { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HeadLoad { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> UserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ForEntry { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SmartView { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SearchProjectReturn
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectMiniInfo> Projects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 MaxLines { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SearchResourceReturn
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 MaxLines { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ResourceWithListModification> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SendCommentAswer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PostedBy { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SettingResource
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<OccupationJS> titles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SkillJs> skills { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SkillLevelJs> skillsLevel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RoleJS> roles { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ShareDashboardParam
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String GuidId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Dashboard { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Graphs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual SharedWithData SharedWith { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ExpDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FromDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ToDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DashboardId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SharedDashboard
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SharedByUserId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SharedByUserName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SharedWithCompanyId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] SharedWithRolesIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] SharedWithPostesIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] SharedWithDirectonsIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] SharedWithUsersIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SharedName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ExpirationInDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime SharedDateUTC { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DashboardHtml { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String GraphsData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DashboardType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FromDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ToDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Culture { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SharedWithData
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Roles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Postes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Directions { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Users { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ShareInfos
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ShareName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SharedBy { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SharePlanningHelper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual PlanType TypePlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 IdPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Roles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Postes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Directions { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Users { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ShareName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ShareExpirationDays { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ShareRapportHelper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ReportType TypeRapport { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 IdRapport { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Roles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Postes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Directions { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Users { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ShareName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ShareExpirationDays { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SignUpInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Email { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Password { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProfilePicture { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProfilePictureName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OrgType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] OrgNeeds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OrgName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual OptUser[] OptUsers { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String lang { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TemplateFileName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CaptchaResponse { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StackTrace { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AgreementAccepted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FavProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CountryCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SignalRId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UseTemplate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SendEmails { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDemo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double SetupFee { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] AvaliblePlans { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> FirstBilledDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] Addons { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Devise { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsImport { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DefautDirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalIdComp { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SimpleProject
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HoursWeekly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SimpleProjectWithDates
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HoursWeekly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SimplifiedPlanningEntity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual EntityType EntityType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 EntityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String EntityName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AD1 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AD2 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Avalibility { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectedTime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RemainingToPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Budget { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasChilds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SimplifiedPlanningEntity> Childs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PeriodValue> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalHoursPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProjectLine { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SkillJs
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Level { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 LevelManager { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LevelManagerName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SkillLevelJs
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SkillsAndSkillLevelsJs
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SkillJs> Skills { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SkillLevelJs> Levels { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SpendingType
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SubmitFormReturn
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowRejectValid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid NewGuid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SubscriptionDetails
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Price { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TimeUnit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Curency { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ActualUsers { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> NextBilling { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double FullPrice { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NextDueDateText { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SurveyQuestion
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Question { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Weighting { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SurveySection
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Required { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SurveyQuestion> QuestionList { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SurveyState
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SurveyEnable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanSurvey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Alone { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskComment
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PostedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime PostedDateReal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PostedBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskContainer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskFastPlanningResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskStateName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskResponsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealTimeSum { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlanificationSum { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> ActivityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskDueDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskFiltre
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskIntervalHelper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkDays { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanning
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TaskPlanningWorkSpace WorkSpaces { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsLocked { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> LockedBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasComments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFinish { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> WorkSpaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LockedByNames { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double OldAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime OldStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime OldEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanUnlock { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAutoPlanning { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanningComment
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskPlanningId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateAdded { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> DateEdited { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> ValuePlanification { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> DatePlanification { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceNameHistory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String WorkPlaceHistory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSystem { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEdit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Object Optionel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OldRessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> OldDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanningResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> Items { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskContainer> Tasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ResourceContainer> Resources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskIntervalHelper> Intervals { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanningsToSave
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> ToDelete { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> ToUpdateValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> ToChangeDatesAndValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> ToAdd { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanningWorkSpace
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameEnglish { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameFrench { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual WorkspaceIcons Icon { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean NotifyManager { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean NotifyProjectManager { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDefault { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskState
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Order { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ForTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskStateWithTask
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual TaskState State { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTask> ListTask { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskTemplate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AssignedRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldJsMinimal> CustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OriginalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> OriginalParentId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Taxe
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSelected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanDelete { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeByCustomFieldReturnType
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FieldName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RatioGraphReturnType> Items { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimehseetBaseLine
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbActs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityExternalId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetCommentParam
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetDay
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Day { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReadOnly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> NbActs { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetEntity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> ActivityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActivityExternalid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TimeSheetDay> ProjectDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TimeSheetEntity> Tasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealAdvancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlanningAdvancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasInfo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanAddTask { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ForTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Planned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> DueDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ProjectCloseDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String State { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateColor { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RemainingDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 InclusionLevel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimesheetGeneralComment
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CommentText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime PostedtDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEdit { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetReduced
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceImage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentTimeBank { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasGeneralComment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PrevTimeBank { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubmited { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsValidated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditComments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime SubmitDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ValidationDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Expense> Spendings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TimeSheetEntity> Projects { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetRessourceDetail
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceStats> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimesheetsValidationUsersRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect SelectedView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PageMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedUser { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Index { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationGroupText
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TranslationText> Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PageName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationLine
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Page { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Key { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsControl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Object[] FormatParams { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationsData
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String PageName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Dictionary<String, TranslationsPage> AvalibleTranslations { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationsPage
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String LangIso2char { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Dictionary<String, String> Translations { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationText
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TriggerWraper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FriendlyDescription { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FriendlyTypeName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Guid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual BaseBeeyeTrigger Trigger { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TypeProjectDynamic
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTypeJS> ProjectType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> ConcatenatedFormulaList { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateResultMultiErrorSuccess
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> ErrorMessage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> SuccessMessage { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateResultMultiMessages
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ErrorMessage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] OtherMessage { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateResultWithData<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual T Data { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateResultWithGui
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid NewGuid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateResultWithId
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 NewId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] OptionalIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateTiersParam
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 userId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String tierId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UploadedFile
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ServerId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal Size { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UploadBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CalculatedSzie { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UploadedFilesGtGp
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Year { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UserForFacturation
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasAcces { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UserInfo
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsManager { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OccupationText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime LastLogin { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HourRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsTauxFronOccupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NumeroNas { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MaxDayWork { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> RealMaxWorkDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HourRateCoutant { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> DashboardAccses { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludeFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndContract { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PhotoLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtualReadOnly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CellNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLanguageId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NewPass { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVirtual { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UserNotificationsList
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SubmitTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RejectTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ValidateTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean EditedPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CommentsTimesheets { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UserPreferencesPlanningParam
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PlanningId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Normal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Conflict { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowByResource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedPlannigView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedTimeMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedUnit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResultByPage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ChangeDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<BaseFilter> Filters { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UserPreferencesRepportsParam
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Category_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Fond_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Beeye_Filter { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Grouping { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Collumns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RapportId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ChangeDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Columns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SortExpression { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSortAscending { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OptionSelected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OrderDisplay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect SelectedView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ReportType RapportType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<BaseFilter> Filters { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UserPreferencesTasksParam
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDefault { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFavorite { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ChangeDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ShareBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ShareById { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ShareId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OrderDisplay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TasksViews TaskView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TableOrderBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual GroupByOptions GroupBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDefaultPage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<BaseFilter> Filters { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UserPreferencesTimesheetsParam
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DefaultTimesheetView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<BaseFilter> Filters { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UsersListRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect View { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OnlyActif { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PlanIdToShow { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ValueWithDates
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TotalWorkDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBePlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double[] AllProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double[] HighValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] ProjectHighValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ProjectHighValueId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TaskValue { get; set; }
		#endregion
	}	

	
	/// <summary>
	/// 
	/// </summary>
	public enum ApplicationPage
	{

		/// <summary>
		/// 
		/// </summary>
		Dashboard = 0,

		/// <summary>
		/// 
		/// </summary>
		Conflict = 1,

		/// <summary>
		/// 
		/// </summary>
		Timesheets = 2,

		/// <summary>
		/// 
		/// </summary>
		Validation = 3,

		/// <summary>
		/// 
		/// </summary>
		Projects = 4,

		/// <summary>
		/// 
		/// </summary>
		ChargePlan = 5,

		/// <summary>
		/// 
		/// </summary>
		Hub = 6,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum BillingType
	{

		/// <summary>
		/// 
		/// </summary>
		NotBillable = 0,

		/// <summary>
		/// 
		/// </summary>
		FixedValue = 1,

		/// <summary>
		/// 
		/// </summary>
		ByAct = 2,

		/// <summary>
		/// 
		/// </summary>
		ByHour = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ComparisonGraphSortingTypes
	{

		/// <summary>
		/// 
		/// </summary>
		Real = 1,

		/// <summary>
		/// 
		/// </summary>
		Planned = 2,

		/// <summary>
		/// 
		/// </summary>
		Both = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ConflictType
	{

		/// <summary>
		/// 
		/// </summary>
		NoConflicts = 1,

		/// <summary>
		/// 
		/// </summary>
		OverCapacity = 2,

		/// <summary>
		/// 
		/// </summary>
		NotEnded = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum CustomFieldType
	{

		/// <summary>
		/// 
		/// </summary>
		StringField = 1,

		/// <summary>
		/// 
		/// </summary>
		NumberField = 2,

		/// <summary>
		/// 
		/// </summary>
		ListField = 3,

		/// <summary>
		/// 
		/// </summary>
		DateField = 4,

		/// <summary>
		/// 
		/// </summary>
		RessourceField = 5,

		/// <summary>
		/// 
		/// </summary>
		CalculationField = 6,

		/// <summary>
		/// 
		/// </summary>
		Color = 200,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum CustomFieldTypeUsedFor
	{

		/// <summary>
		/// 
		/// </summary>
		Project = 1,

		/// <summary>
		/// 
		/// </summary>
		Task = 2,

		/// <summary>
		/// 
		/// </summary>
		Resource = 3,

		/// <summary>
		/// 
		/// </summary>
		Client = 4,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum DateComparisonType
	{

		/// <summary>
		/// 
		/// </summary>
		None = 0,

		/// <summary>
		/// 
		/// </summary>
		CustomField = 1,

		/// <summary>
		/// 
		/// </summary>
		ProjectStart = 2,

		/// <summary>
		/// 
		/// </summary>
		ProjectEnd = 3,

		/// <summary>
		/// 
		/// </summary>
		ActivityStart = 4,

		/// <summary>
		/// 
		/// </summary>
		ActivityEnd = 5,

		/// <summary>
		/// 
		/// </summary>
		Millesime = 6,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum EntityType
	{

		/// <summary>
		/// 
		/// </summary>
		Project = 0,

		/// <summary>
		/// 
		/// </summary>
		Task = 1,

		/// <summary>
		/// 
		/// </summary>
		Ressource = 2,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ExclusionType
	{

		/// <summary>
		/// 
		/// </summary>
		CustomField = 0,

		/// <summary>
		/// 
		/// </summary>
		ProjectType = 1,

		/// <summary>
		/// 
		/// </summary>
		Client = 2,

		/// <summary>
		/// 
		/// </summary>
		CustomFieldClient = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ExportType
	{

		/// <summary>
		/// 
		/// </summary>
		Project = 0,

		/// <summary>
		/// 
		/// </summary>
		Resource = 1,

		/// <summary>
		/// 
		/// </summary>
		Task = 2,

		/// <summary>
		/// 
		/// </summary>
		Client = 3,

		/// <summary>
		/// 
		/// </summary>
		Expenses = 4,

		/// <summary>
		/// 
		/// </summary>
		Invoiced = 5,

		/// <summary>
		/// 
		/// </summary>
		Time = 6,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum FilterType
	{

		/// <summary>
		/// 
		/// </summary>
		Ressources = 1,

		/// <summary>
		/// 
		/// </summary>
		Projects = 2,

		/// <summary>
		/// 
		/// </summary>
		Tasks = 3,

		/// <summary>
		/// 
		/// </summary>
		Clients = 4,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum GroupByOptions
	{

		/// <summary>
		/// 
		/// </summary>
		Resource = 0,

		/// <summary>
		/// 
		/// </summary>
		State = 1,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ImportStatus
	{

		/// <summary>
		/// 
		/// </summary>
		Creating = 0,

		/// <summary>
		/// 
		/// </summary>
		Pending = 1,

		/// <summary>
		/// 
		/// </summary>
		Processing = 2,

		/// <summary>
		/// 
		/// </summary>
		Completed = 3,

		/// <summary>
		/// 
		/// </summary>
		CompletedWithError = 4,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum IntegrationType
	{

		/// <summary>
		/// 
		/// </summary>
		Sellsy = 0,

		/// <summary>
		/// 
		/// </summary>
		Sage = 1,

		/// <summary>
		/// 
		/// </summary>
		Jovaco = 2,

		/// <summary>
		/// 
		/// </summary>
		BeeyeExcel = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum JTokenType
	{

		/// <summary>
		/// 
		/// </summary>
		None = 0,

		/// <summary>
		/// 
		/// </summary>
		Object = 1,

		/// <summary>
		/// 
		/// </summary>
		Array = 2,

		/// <summary>
		/// 
		/// </summary>
		Constructor = 3,

		/// <summary>
		/// 
		/// </summary>
		Property = 4,

		/// <summary>
		/// 
		/// </summary>
		Comment = 5,

		/// <summary>
		/// 
		/// </summary>
		Integer = 6,

		/// <summary>
		/// 
		/// </summary>
		Float = 7,

		/// <summary>
		/// 
		/// </summary>
		String = 8,

		/// <summary>
		/// 
		/// </summary>
		Boolean = 9,

		/// <summary>
		/// 
		/// </summary>
		Null = 10,

		/// <summary>
		/// 
		/// </summary>
		Undefined = 11,

		/// <summary>
		/// 
		/// </summary>
		Date = 12,

		/// <summary>
		/// 
		/// </summary>
		Raw = 13,

		/// <summary>
		/// 
		/// </summary>
		Bytes = 14,

		/// <summary>
		/// 
		/// </summary>
		Guid = 15,

		/// <summary>
		/// 
		/// </summary>
		Uri = 16,

		/// <summary>
		/// 
		/// </summary>
		TimeSpan = 17,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum NotificationType
	{

		/// <summary>
		/// 
		/// </summary>
		None = 0,

		/// <summary>
		/// 
		/// </summary>
		TrrigeredEvent = 1,

		/// <summary>
		/// 
		/// </summary>
		TriggeredTime = 2,

		/// <summary>
		/// 
		/// </summary>
		EmailEvent = 3,

		/// <summary>
		/// 
		/// </summary>
		LuccaEvent = 4,

		/// <summary>
		/// 
		/// </summary>
		SageEvent = 5,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ObjectType
	{

		/// <summary>
		/// 
		/// </summary>
		Client = 0,

		/// <summary>
		/// 
		/// </summary>
		Resource = 1,

		/// <summary>
		/// 
		/// </summary>
		Task = 2,

		/// <summary>
		/// 
		/// </summary>
		Mission = 3,

		/// <summary>
		/// 
		/// </summary>
		Plan = 4,

		/// <summary>
		/// 
		/// </summary>
		Real = 5,

		/// <summary>
		/// 
		/// </summary>
		Nomenclature = 6,

		/// <summary>
		/// 
		/// </summary>
		Invoice = 7,

		/// <summary>
		/// 
		/// </summary>
		Fee = 8,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum PaginationEntity
	{

		/// <summary>
		/// 
		/// </summary>
		Project = 0,

		/// <summary>
		/// 
		/// </summary>
		Ressource = 1,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum PlanificationLevel
	{

		/// <summary>
		/// 
		/// </summary>
		None = 0,

		/// <summary>
		/// 
		/// </summary>
		ReadOnly = 1,

		/// <summary>
		/// 
		/// </summary>
		SmallModifications = 2,

		/// <summary>
		/// 
		/// </summary>
		Complete = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum PlanningMode
	{

		/// <summary>
		/// 
		/// </summary>
		HoursPerDay = 1,

		/// <summary>
		/// 
		/// </summary>
		HoursTotal = 2,

		/// <summary>
		/// 
		/// </summary>
		PlanByAvalibility = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum PlanningSelection
	{

		/// <summary>
		/// 
		/// </summary>
		None = 1,

		/// <summary>
		/// 
		/// </summary>
		UseReals = 2,

		/// <summary>
		/// 
		/// </summary>
		UsePlanned = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum PlanType
	{

		/// <summary>
		/// 
		/// </summary>
		CombinedPlanning = 1,

		/// <summary>
		/// 
		/// </summary>
		ConflictPlanning = 2,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum RatioGraphGroupingTypes
	{

		/// <summary>
		/// 
		/// </summary>
		MainCategory = 1,

		/// <summary>
		/// 
		/// </summary>
		SecondaryCategory = 2,

		/// <summary>
		/// 
		/// </summary>
		Employee = 3,

		/// <summary>
		/// 
		/// </summary>
		CustomField = 4,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum RecurrenceType
	{

		/// <summary>
		/// 
		/// </summary>
		None = 0,

		/// <summary>
		/// 
		/// </summary>
		Weekly = 1,

		/// <summary>
		/// 
		/// </summary>
		BiWeekly = 2,

		/// <summary>
		/// 
		/// </summary>
		MonthlyFixedDay = 3,

		/// <summary>
		/// 
		/// </summary>
		Quarterly = 4,

		/// <summary>
		/// 
		/// </summary>
		Biannualy = 5,

		/// <summary>
		/// 
		/// </summary>
		AllDaysForPeriod = 6,

		/// <summary>
		/// 
		/// </summary>
		Fusion = 7,

		/// <summary>
		/// 
		/// </summary>
		ChangeTask = 8,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ReportType
	{

		/// <summary>
		/// 
		/// </summary>
		Projects = 1,

		/// <summary>
		/// 
		/// </summary>
		Ressources = 2,

		/// <summary>
		/// 
		/// </summary>
		Tasks = 3,

		/// <summary>
		/// 
		/// </summary>
		Survey = 4,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum TasksViews
	{

		/// <summary>
		/// 
		/// </summary>
		List = 0,

		/// <summary>
		/// 
		/// </summary>
		Kanban = 1,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum TimeMode
	{

		/// <summary>
		/// 
		/// </summary>
		Day = 1,

		/// <summary>
		/// 
		/// </summary>
		Week = 2,

		/// <summary>
		/// 
		/// </summary>
		Month = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum UnitsMode
	{

		/// <summary>
		/// 
		/// </summary>
		Hours = 1,

		/// <summary>
		/// 
		/// </summary>
		Percentages = 2,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ViewSelect
	{

		/// <summary>
		/// 
		/// </summary>
		Me = 1,

		/// <summary>
		/// 
		/// </summary>
		Team = 2,

		/// <summary>
		/// 
		/// </summary>
		Company = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum WorkspaceIcons
	{

		/// <summary>
		/// 
		/// </summary>
		Building = 1,

		/// <summary>
		/// 
		/// </summary>
		Home = 2,

		/// <summary>
		/// 
		/// </summary>
		User = 3,

		/// <summary>
		/// 
		/// </summary>
		Wifi = 4,

		/// <summary>
		/// 
		/// </summary>
		Cloud = 5,

		/// <summary>
		/// 
		/// </summary>
		Laptop = 6,

		/// <summary>
		/// 
		/// </summary>
		ChalkboardTeacher = 7,

		/// <summary>
		/// 
		/// </summary>
		Plane = 8,

		/// <summary>
		/// 
		/// </summary>
		Hospital = 9,

		/// <summary>
		/// 
		/// </summary>
		Bus = 10,

		/// <summary>
		/// 
		/// </summary>
		Car = 11,

		/// <summary>
		/// 
		/// </summary>
		Bed = 12,

		/// <summary>
		/// 
		/// </summary>
		Basketball = 13,

		/// <summary>
		/// 
		/// </summary>
		Star = 14,
		
	}
	
}
#endregion

#region Interfaces
namespace WebApi.Proxies.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	
	public partial interface IActivitiesClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateMultipleActivitiesAsync(List<ApiActivity> activities);

		/// <returns></returns>
		UpdateResultWithId AddOrUpdateMultipleActivities(List<ApiActivity> activities);


		/// <returns></returns>
		Task<HttpResponseMessage> GetListAsync();

		/// <returns></returns>
		List<ApiActivity> GetList();

		/// <param name="activityId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetOneAsync(Guid activityId);

		/// <param name="activityId"></param>
		/// <returns></returns>
		ApiActivity GetOne(Guid activityId);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateActivityAsync(ApiActivity activity);

		/// <returns></returns>
		UpdateResultWithId AddOrUpdateActivity(ApiActivity activity);

		/// <param name="activityId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteActivityAsync(Guid activityId);

		/// <param name="activityId"></param>
		/// <returns></returns>
		UpdateResult DeleteActivity(Guid activityId);
				
	}
	
	public partial interface IActivityFamiliesClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetListAsync();

		/// <returns></returns>
		List<ApiActivityFamily> GetList();


		/// <returns></returns>
		Task<HttpResponseMessage> GetListWithActivitiesAsync();

		/// <returns></returns>
		List<ApiActivityFamily> GetListWithActivities();

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetListWithActivitiesByProjectidAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		List<ApiActivityFamily> GetListWithActivitiesByProjectid(Int32 projectId);

		/// <param name="familyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetListWithActivitiesByfamilyIdAsync(Guid familyId);

		/// <param name="familyId"></param>
		/// <returns></returns>
		ApiActivityFamily GetListWithActivitiesByfamilyId(Guid familyId);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrEditFamiliesAsync(List<ApiActivityFamily> apiActivityFamilies);

		/// <returns></returns>
		UpdateResultWithId AddOrEditFamilies(List<ApiActivityFamily> apiActivityFamilies);

		/// <param name="activityFamilyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetListByActivityfamilyidAsync(Guid activityFamilyId);

		/// <param name="activityFamilyId"></param>
		/// <returns></returns>
		ApiActivityFamily GetListByActivityfamilyid(Guid activityFamilyId);


		/// <returns></returns>
		Task<HttpResponseMessage> AddFamilyAsync(ApiActivityFamily apiActivityFamily);

		/// <returns></returns>
		UpdateResultWithId AddFamily(ApiActivityFamily apiActivityFamily);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateActivityFamilyAsync(Guid id,ApiActivityFamily apiActivityFamily);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult UpdateActivityFamily(Guid id,ApiActivityFamily apiActivityFamily);

		/// <param name="familyGuid"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteActivityFamilyAsync(Guid familyGuid);

		/// <param name="familyGuid"></param>
		/// <returns></returns>
		UpdateResult DeleteActivityFamily(Guid familyGuid);

		/// <param name="familyGuid"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateActivityOrderAsync(Guid familyGuid,List<Guid> orders);

		/// <param name="familyGuid"></param>
		/// <returns></returns>
		UpdateResult UpdateActivityOrder(Guid familyGuid,List<Guid> orders);
				
	}
	
	public partial interface IActivityScenariosClient : IClientBase
	{	

		/// <param name="activityId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ListAsync(Guid activityId);

		/// <param name="activityId"></param>
		/// <returns></returns>
		List<ActivityScenario> List(Guid activityId);

		/// <param name="activityId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> InsertAsync(Guid activityId,ActivityScenario activityScenario);

		/// <param name="activityId"></param>
		/// <returns></returns>
		ActivityScenario Insert(Guid activityId,ActivityScenario activityScenario);

		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateAsync(Guid activityId,Guid activityScenarioId,ActivityScenario activityScenario);

		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>
		/// <returns></returns>
		ActivityScenario Update(Guid activityId,Guid activityScenarioId,ActivityScenario activityScenario);

		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteAsync(Guid activityId,Guid activityScenarioId);

		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>
		/// <returns></returns>
		ActivityScenario Delete(Guid activityId,Guid activityScenarioId);
				
	}
	
	public partial interface IApiRawDataClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllPlanningsAsync(DatesRangeRequest<Object> data);

		/// <returns></returns>
		List<PlanningTimeLine> GetAllPlannings(DatesRangeRequest<Object> data);
				
	}
	
	public partial interface IBeeyeAIClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> SuggestTop5RessourcesAsync(DatesRangeFilteredRequestPagination<RecommendationRequest> request);

		/// <returns></returns>
		List<EmployeJS__> SuggestTop5Ressources(DatesRangeFilteredRequestPagination<RecommendationRequest> request);
				
	}
	
	public partial interface IBillingClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleAddonsAsync();

		/// <returns></returns>
		List<ChargeBeeAddon> GetAvalibleAddons();


		/// <returns></returns>
		Task<HttpResponseMessage> ChangeAddressAsync(InvoiceDetails adresssInfo);

		/// <returns></returns>
		UpdateResult ChangeAddress(InvoiceDetails adresssInfo);


		/// <returns></returns>
		Task<HttpResponseMessage> AddAddonAsync(ChargeBeeAddon addon);

		/// <returns></returns>
		UpdateResult AddAddon(ChargeBeeAddon addon);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateUsersForBillingAsync(List<Int32> users);

		/// <returns></returns>
		UpdateResult UpdateUsersForBilling(List<Int32> users);


		/// <returns></returns>
		Task<HttpResponseMessage> GetUsersWithBillingAcessAsync();

		/// <returns></returns>
		List<EmployeJS__> GetUsersWithBillingAcess();


		/// <returns></returns>
		Task<HttpResponseMessage> RemoveAddonAsync(ChargeBeeAddon addon);

		/// <returns></returns>
		UpdateResult RemoveAddon(ChargeBeeAddon addon);


		/// <returns></returns>
		Task<HttpResponseMessage> GetBillingInfosAsync();

		/// <returns></returns>
		ClientBilingInfos GetBillingInfos();


		/// <returns></returns>
		Task<HttpResponseMessage> AddCreditCardAsync(CreditCardInfo card);

		/// <returns></returns>
		UpdateResult AddCreditCard(CreditCardInfo card);


		/// <returns></returns>
		Task<HttpResponseMessage> GetLastInvoicesAsync();

		/// <returns></returns>
		List<Invoiced> GetLastInvoices();
				
	}
	
	public partial interface IClientsManagmentClient : IClientBase
	{	

		/// <param name="clientId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UploadClientDocumentAsync(Int32 clientId);

		/// <param name="clientId"></param>
		/// <returns></returns>
		UpdateResultWithId UploadClientDocument(Int32 clientId);

		/// <param name="clientId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetDocumentsForClientAsync(Int32 clientId);

		/// <param name="clientId"></param>
		/// <returns></returns>
		List<UploadedFile> GetDocumentsForClient(Int32 clientId);

		/// <param name="clientId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ReactivateClientAsync(Int32 clientId);

		/// <param name="clientId"></param>
		/// <returns></returns>
		UpdateResult ReactivateClient(Int32 clientId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetClientsListFilterAsync(DatesRangeFilteredRequest<Boolean> data);

		/// <returns></returns>
		List<Client> GetClientsListFilter(DatesRangeFilteredRequest<Boolean> data);

		/// <param name="takeDeleted">Display archived clients</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetClientsListAsync(Boolean takeDeleted);

		/// <param name="takeDeleted">Display archived clients</param>
		/// <returns></returns>
		List<Client> GetClientsList(Boolean takeDeleted);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetClientByIdAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		Client GetClientById(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateClientAsync(Client value);

		/// <returns></returns>
		UpdateResultWithId CreateClient(Client value);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateListClientAsync(RequestSelectedBulkAction data);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess UpdateListClient(RequestSelectedBulkAction data);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateClientAsync(Int32 id,Client value);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult UpdateClient(Int32 id,Client value);


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteMultipleClientsAsync(Int32[] ids);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess DeleteMultipleClients(Int32[] ids);


		/// <returns></returns>
		Task<HttpResponseMessage> ArchiveMultipleClientsAsync(Int32[] ids);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess ArchiveMultipleClients(Int32[] ids);


		/// <returns></returns>
		Task<HttpResponseMessage> ReactivateMultipleClientsAsync(Int32[] ids);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess ReactivateMultipleClients(Int32[] ids);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ArchiveClientAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult ArchiveClient(Int32 id);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteClientAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult DeleteClient(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> InsertOrUpdateOldAsync(List<ApiClient> clients);

		/// <returns></returns>
		UpdateResultWithId InsertOrUpdateOld(List<ApiClient> clients);


		/// <returns></returns>
		Task<HttpResponseMessage> InsertOrUpdateAsync(List<ApiClient> clients);

		/// <returns></returns>
		List<ResponseContainer<ApiClient>> InsertOrUpdate(List<ApiClient> clients);

		/// <param name="clientId"></param>
		/// <param name="getAllCustomField"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsForClientAsync(Int32 clientId,Boolean getAllCustomField);

		/// <param name="clientId"></param>
		/// <param name="getAllCustomField"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetCustomFieldsForClient(Int32 clientId,Boolean getAllCustomField);
				
	}
	
	public partial interface ICompanyClient : IClientBase
	{	

		/// <param name="companyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> LoginAsCompanyAsync(Int32 companyId);

		/// <param name="companyId"></param>
		/// <returns></returns>
		UpdateResult LoginAsCompany(Int32 companyId);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveUserAsync(EmployeJS__ resource);

		/// <returns></returns>
		UpdateResult SaveUser(EmployeJS__ resource);

		/// <param name="UserId">new reposable id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> ChangeCompagnyRespAsync(Int32 UserId);

		/// <param name="UserId">new reposable id</param>
		/// <returns></returns>
		UpdateResult ChangeCompagnyResp(Int32 UserId);

		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchAllRessourcesAsync(String search,Int32 page);

		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>
		/// <returns></returns>
		SearchResourceReturn SearchAllRessources(String search,Int32 page);

		/// <param name="compId">compagnie id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetApproConfigAsync(Int32 compId);

		/// <param name="compId">compagnie id</param>
		/// <returns></returns>
		ApproConfigInfo GetApproConfig(Int32 compId);

		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchAllProjectsAsync(String search,Int32 page);

		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>
		/// <returns></returns>
		SearchProjectReturn SearchAllProjects(String search,Int32 page);

		/// <param name="compId"></param>
		/// <param name="isEnabled"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveApproConfigAsync(Int32 compId,Boolean isEnabled);

		/// <param name="compId"></param>
		/// <param name="isEnabled"></param>
		/// <returns></returns>
		UpdateResult SaveApproConfig(Int32 compId,Boolean isEnabled);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveCompagnyInfoAsync(CompagnyInfo compagnyInfo);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess SaveCompagnyInfo(CompagnyInfo compagnyInfo);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveGeneralParametresAsync(CompagnyGeneralParams toSave);

		/// <returns></returns>
		UpdateResult SaveGeneralParametres(CompagnyGeneralParams toSave);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveFormAsync(FormJS newData);

		/// <returns></returns>
		UpdateResultWithId SaveForm(FormJS newData);


		/// <returns></returns>
		Task<HttpResponseMessage> GetFormsAsync();

		/// <returns></returns>
		List<FormJS> GetForms();


		/// <returns></returns>
		Task<HttpResponseMessage> GetGeneralParametresAsync();

		/// <returns></returns>
		GeneralParams_Return GetGeneralParametres();


		/// <returns></returns>
		Task<HttpResponseMessage> GetNameFormulaAsync();

		/// <returns></returns>
		String GetNameFormula();


		/// <returns></returns>
		Task<HttpResponseMessage> GetCompaniesListAsync();

		/// <returns></returns>
		List<CompanyJS> GetCompaniesList();

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> LoginAsUserAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult LoginAsUser(Int32 id);

		/// <param name="compid"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllUsersAsync(Int32 compid);

		/// <param name="compid"></param>
		/// <returns></returns>
		List<EmployeJS__> GetAllUsers(Int32 compid);

		/// <param name="companyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCompanyAsync(Int32 companyId);

		/// <param name="companyId"></param>
		/// <returns></returns>
		UpdateResult DeleteCompany(Int32 companyId);


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCompanyYourCompanyAsync();

		/// <returns></returns>
		UpdateResult DeleteCompanyYourCompany();

		/// <param name="companyId">Id of the company</param>
		/// <param name="companyExternalId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCompanyAsync(Nullable<Int32> companyId,String companyExternalId);

		/// <param name="companyId">Id of the company</param>
		/// <param name="companyExternalId"></param>
		/// <returns></returns>
		CompanyJS GetCompany(Nullable<Int32> companyId,String companyExternalId);


		/// <returns></returns>
		Task<HttpResponseMessage> ListAsync();

		/// <returns></returns>
		List<CompanyJS> List();


		/// <returns></returns>
		Task<HttpResponseMessage> CreateAsync(CreateCompanyJS companyToCreate);

		/// <returns></returns>
		UpdateResultWithId Create(CreateCompanyJS companyToCreate);
				
	}
	
	public partial interface IConfigTaskClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsAsync(DatesRangeFilteredRequest<Boolean> args);

		/// <returns></returns>
		List<ProjectFastPlanningResult> GetProjects(DatesRangeFilteredRequest<Boolean> args);
				
	}
	
	public partial interface IConflictsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> testAsync();

		/// <returns></returns>
		UpdateResult test();


		/// <returns></returns>
		Task<HttpResponseMessage> ReassingAsync(PlanParams Params);

		/// <returns></returns>
		UpdateResult Reassing(PlanParams Params);


		/// <returns></returns>
		Task<HttpResponseMessage> SavePlanniAsync(PlanParams Params);

		/// <returns></returns>
		UpdateResult SavePlanni(PlanParams Params);


		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictAsync(DatesRangeFilteredRequest<ConflictParams> param);

		/// <returns></returns>
		List<Conflict> GetConflict(DatesRangeFilteredRequest<ConflictParams> param);
				
	}
	
	public partial interface ICustomFieldsClient : IClientBase
	{	

		/// <param name="takeCalculated">Include calculated fields in the result</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetEmployeeCustomFieldsAsync(Boolean takeCalculated);

		/// <param name="takeCalculated">Include calculated fields in the result</param>
		/// <returns></returns>
		List<CustomFieldJs> GetEmployeeCustomFields(Boolean takeCalculated);


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectCustomFieldsAsync();

		/// <returns></returns>
		List<CustomFieldJs> GetProjectCustomFields();

		/// <param name="valueId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteClientCustomFieldValueAsync(Int32 valueId);

		/// <param name="valueId"></param>
		/// <returns></returns>
		UpdateResult DeleteClientCustomFieldValue(Int32 valueId);

		/// <param name="cfId">custom field value id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCustomFieldValueAsync(Int32 cfId,CustomFieldValue value);

		/// <param name="cfId">custom field value id</param>
		/// <returns></returns>
		UpdateResult DeleteCustomFieldValue(Int32 cfId,CustomFieldValue value);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateCustomFieldCategoriesAsync(Int32[] ids);

		/// <returns></returns>
		UpdateResult UpdateCustomFieldCategories(Int32[] ids);

		/// <param name="cfId">custom field value id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteRessourceCustomFieldValueAsync(Int32 cfId,CustomFieldValue value);

		/// <param name="cfId">custom field value id</param>
		/// <returns></returns>
		UpdateResult DeleteRessourceCustomFieldValue(Int32 cfId,CustomFieldValue value);

		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllCustomFieldsAsync(Boolean takeHidden,Boolean takeCalculHard);

		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetAllCustomFields(Boolean takeHidden,Boolean takeCalculHard);

		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getVisibleReadAccess"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllCustomFieldsByCategorieAsync(Boolean takeHidden,Boolean takeCalculHard,Boolean getVisibleReadAccess);

		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getVisibleReadAccess"></param>
		/// <returns></returns>
		List<CustomFieldCategory> GetAllCustomFieldsByCategorie(Boolean takeHidden,Boolean takeCalculHard,Boolean getVisibleReadAccess);

		/// <param name="customFieldId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckUniqueValueAsync(Int32 customFieldId,CustomFieldValue value);

		/// <param name="customFieldId"></param>
		/// <returns></returns>
		UpdateResult CheckUniqueValue(Int32 customFieldId,CustomFieldValue value);

		/// <param name="customFieldId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateCustomFieldValueAsync(Int32 customFieldId,CustomFieldValue value);

		/// <param name="customFieldId"></param>
		/// <returns></returns>
		UpdateResultWithId UpdateCustomFieldValue(Int32 customFieldId,CustomFieldValue value);

		/// <param name="customFieldName"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateCustomFieldValueByNameAsync(String customFieldName,CustomFieldValue value);

		/// <param name="customFieldName"></param>
		/// <returns></returns>
		UpdateResultWithId UpdateCustomFieldValueByName(String customFieldName,CustomFieldValue value);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateCustomFieldValueShortAsync(CustomFieldValue value);

		/// <returns></returns>
		UpdateResultWithId UpdateCustomFieldValueShort(CustomFieldValue value);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateCustomFieldValueBatchAsync(List<CustomFieldValue> Values);

		/// <returns></returns>
		List<UpdateResultWithId> UpdateCustomFieldValueBatch(List<CustomFieldValue> Values);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateCategoryAsync(CustomFieldCategory customFieldCategory);

		/// <returns></returns>
		UpdateResultWithId CreateOrUpdateCategory(CustomFieldCategory customFieldCategory);

		/// <param name="fieldId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteClientCustomFieldAsync(Int32 fieldId);

		/// <param name="fieldId"></param>
		/// <returns></returns>
		UpdateResult DeleteClientCustomField(Int32 fieldId);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateCustomFieldAsync(CustomFieldJs customField);

		/// <returns></returns>
		UpdateResultWithId CreateOrUpdateCustomField(CustomFieldJs customField);

		/// <param name="category"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCustomFieldCategoryAsync(Int32 category);

		/// <param name="category"></param>
		/// <returns></returns>
		UpdateResult DeleteCustomFieldCategory(Int32 category);

		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCustomFieldAsync(Int32 fieldId,Boolean isRessourceCustom);

		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>
		/// <returns></returns>
		UpdateResult DeleteCustomField(Int32 fieldId,Boolean isRessourceCustom);
				
	}
	
	public partial interface IDataSharingClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleShareTargetsAsync();

		/// <returns></returns>
		DataShareTargetsHolder GetAvalibleShareTargets();

		/// <param name="reportType">The report type (projects, ressources, tasks)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSharedReportsAsync(ReportType reportType);

		/// <param name="reportType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		List<ShareInfos> GetSharedReports(ReportType reportType);

		/// <param name="planType">The report type (projects, ressources, tasks)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSharedPlansAsync(PlanType planType);

		/// <param name="planType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		List<ShareInfos> GetSharedPlans(PlanType planType);


		/// <returns></returns>
		Task<HttpResponseMessage> ShareReportAsync(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare);

		/// <returns></returns>
		UpdateResult ShareReport(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare);


		/// <returns></returns>
		Task<HttpResponseMessage> SharePlanningAsync(DatesRangeFilteredRequest<SharePlanningHelper> dataToShare);

		/// <returns></returns>
		UpdateResult SharePlanning(DatesRangeFilteredRequest<SharePlanningHelper> dataToShare);

		/// <param name="reportType"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ImportReportsAsync(ReportType reportType,Guid[] toImport);

		/// <param name="reportType"></param>
		/// <returns></returns>
		UpdateResultWithId ImportReports(ReportType reportType,Guid[] toImport);

		/// <param name="planType"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ImportPlansAsync(PlanType planType,Guid[] toImport);

		/// <param name="planType"></param>
		/// <returns></returns>
		UpdateResultWithId ImportPlans(PlanType planType,Guid[] toImport);
				
	}
	
	public partial interface IDirectionsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetDirectionsOrgChartAsync();

		/// <returns></returns>
		DirectionModelOrgChart GetDirectionsOrgChart();


		/// <returns></returns>
		Task<HttpResponseMessage> GetDirectionsListForUserAsync();

		/// <returns></returns>
		List<DirectionJS__> GetDirectionsListForUser();


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllDirectionsAsync();

		/// <returns></returns>
		List<DirectionJS__> GetAllDirections();

		/// <param name="dirid">Id of parent direction</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSubDirectionsAsync(Int32 dirid);

		/// <param name="dirid">Id of parent direction</param>
		/// <returns></returns>
		List<DirectionJS__> GetSubDirections(Int32 dirid);

		/// <param name="dirId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateDirectionAsync(Int32 dirId,DirectionModelOrgChart direction);

		/// <param name="dirId"></param>
		/// <returns></returns>
		UpdateResult UpdateDirection(Int32 dirId,DirectionModelOrgChart direction);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateDirectionAsync(DirectionJS__ direction);

		/// <returns></returns>
		UpdateResultWithId CreateDirection(DirectionJS__ direction);

		/// <param name="dirId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteDirectionAsync(Int32 dirId);

		/// <param name="dirId"></param>
		/// <returns></returns>
		UpdateResult DeleteDirection(Int32 dirId);

		/// <param name="name"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckIfDirectionExistsAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		Boolean CheckIfDirectionExists(String name);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossibleResponsablesAsync();

		/// <returns></returns>
		List<EmployeJS__> GetPossibleResponsables();
				
	}
	
	public partial interface IEmployesClient : IClientBase
	{	

		/// <param name="projectid"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCombinedRessourcesByTaskAsync(Int32 projectid);

		/// <param name="projectid"></param>
		/// <returns></returns>
		Dictionary<Int32, List<EmployeJS__>> GetCombinedRessourcesByTask(Int32 projectid);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllRessourcesFilteredAsync(DatesRangeFilteredRequestPagination<RessourceParam> request);

		/// <returns></returns>
		List<EmployeJS__> GetAllRessourcesFiltered(DatesRangeFilteredRequestPagination<RessourceParam> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetRessourcesListAsync(DatesRangeFilteredRequest<UsersListRequest> request);

		/// <returns></returns>
		List<ConfigRessourcesModel> GetRessourcesList(DatesRangeFilteredRequest<UsersListRequest> request);

		/// <param name="takeOnlyActif">Only take not deleted employees</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllRessourcesAsync(Boolean takeOnlyActif);

		/// <param name="takeOnlyActif">Only take not deleted employees</param>
		/// <returns></returns>
		List<EmployeJS__> GetAllRessources(Boolean takeOnlyActif);

		/// <param name="takeOnlyActif"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllRessourcesWithCustomFieldsAsync(Boolean takeOnlyActif);

		/// <param name="takeOnlyActif"></param>
		/// <returns></returns>
		List<EmployeJSWithCustomFields> GetAllRessourcesWithCustomFields(Boolean takeOnlyActif);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateEmployeAsync(MinimalEmployeCreation employe);

		/// <returns></returns>
		UpdateResultWithId CreateEmploye(MinimalEmployeCreation employe);


		/// <returns></returns>
		Task<HttpResponseMessage> GetLastActivityForUserAsync(DatesRangeRequest<Int32> data);

		/// <returns></returns>
		List<ActivityLine> GetLastActivityForUser(DatesRangeRequest<Int32> data);

		/// <param name="userId">User id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetHourRateHistoryAsync(Int32 userId);

		/// <param name="userId">User id</param>
		/// <returns></returns>
		List<RessourceHourRate> GetHourRateHistory(Int32 userId);

		/// <param name="userId">User id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetBillRateHistoryAsync(Int32 userId);

		/// <param name="userId">User id</param>
		/// <returns></returns>
		List<RessourceBillRate> GetBillRateHistory(Int32 userId);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateBillRateHistoryAsync(BillRateHistory rateHistory);

		/// <returns></returns>
		UpdateResult UpdateBillRateHistory(BillRateHistory rateHistory);

		/// <param name="userId">User id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateRateHistoryAsync(Int32 userId,RateHistory rateHistory);

		/// <param name="userId">User id</param>
		/// <returns></returns>
		UpdateResult UpdateRateHistory(Int32 userId,RateHistory rateHistory);

		/// <param name="userId">User id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateEmployeCostRateAsync(Int32 userId,Double rate);

		/// <param name="userId">User id</param>
		/// <returns></returns>
		UpdateResult UpdateEmployeCostRate(Int32 userId,Double rate);

		/// <param name="userId"></param>
		/// <param name="rate"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateEmployeCostRateFromDateAsync(Int32 userId,Double rate,DateTime localDate);

		/// <param name="userId"></param>
		/// <param name="rate"></param>
		/// <returns></returns>
		UpdateResult UpdateEmployeCostRateFromDate(Int32 userId,Double rate,DateTime localDate);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateEmployeBillRateAsync(Int32 userId,Double rate);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult UpdateEmployeBillRate(Int32 userId,Double rate);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateEmployeEndDateAsync(Int32 userId,DateTime date);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult UpdateEmployeEndDate(Int32 userId,DateTime date);

		/// <param name="employeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ArchiveEmployeeAsync(Int32 employeId);

		/// <param name="employeId"></param>
		/// <returns></returns>
		UpdateResult ArchiveEmployee(Int32 employeId);

		/// <param name="employeId">Ressource ID</param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckAvailabilityProblemAsync(Int32 employeId,ReplaceRessource param);

		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		List<Int32> CheckAvailabilityProblem(Int32 employeId,ReplaceRessource param);

		/// <param name="employeId">Ressource ID</param>

		/// <returns></returns>
		Task<HttpResponseMessage> ReplaceRessourceAsync(Int32 employeId,ReplaceRessource param);

		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		UpdateResult ReplaceRessource(Int32 employeId,ReplaceRessource param);

		/// <param name="employeId">Ressource ID</param>

		/// <returns></returns>
		Task<HttpResponseMessage> MoveEmployeeToDirectionAsync(Int32 employeId,Int32 newDirectionId);

		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		UpdateResult MoveEmployeeToDirection(Int32 employeId,Int32 newDirectionId);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTiersIdAsync(Int32 userId,EmployeJS__ toUpdate);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult UpdateTiersId(Int32 userId,EmployeJS__ toUpdate);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetUserInfoAsync(Int32 userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		UserInfo GetUserInfo(Int32 userId);


		/// <returns></returns>
		Task<HttpResponseMessage> RessourceLevelAsync();

		/// <returns></returns>
		List<Int32> RessourceLevel();

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetUsergeneralInfoAsync(Int32 userId,DatesRangeRequest<Boolean> updateTiersParam);

		/// <param name="userId"></param>
		/// <returns></returns>
		RessourceGeneralInformations GetUsergeneralInfo(Int32 userId,DatesRangeRequest<Boolean> updateTiersParam);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTiersIdByUpdatetiersparamAsync(UpdateTiersParam updateTiersParam);

		/// <returns></returns>
		UpdateResult UpdateTiersIdByUpdatetiersparam(UpdateTiersParam updateTiersParam);

		/// <param name="email"></param>
		/// <param name="message"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ReferFriendAsync(String email,String message);

		/// <param name="email"></param>
		/// <param name="message"></param>
		/// <returns></returns>
		UpdateResult ReferFriend(String email,String message);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSkillsAndLevelsAsync(Int32 userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		SkillsAndSkillLevelsJs GetSkillsAndLevels(Int32 userId);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddSkillToResourceAsync(Int32 userId,SkillJs skill);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult AddSkillToResource(Int32 userId,SkillJs skill);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateEmployeStartDateAsync(Int32 userId,DateTime date);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult UpdateEmployeStartDate(Int32 userId,DateTime date);
				
	}
	
	public partial interface IExpensesClient : IClientBase
	{	

		/// <param name="expenseId">Id of the expense</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetExpenseInfoAsync(Int32 expenseId);

		/// <param name="expenseId">Id of the expense</param>
		/// <returns></returns>
		Expense GetExpenseInfo(Int32 expenseId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleProjectsForDatesAsync(DatesRangeRequest<Object> data);

		/// <returns></returns>
		List<SimpleProject> GetAvalibleProjectsForDates(DatesRangeRequest<Object> data);

		/// <param name="expenseId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTaxesAsync(Int32 expenseId);

		/// <param name="expenseId"></param>
		/// <returns></returns>
		List<Taxe> GetTaxes(Int32 expenseId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetExpensesTypesAsync();

		/// <returns></returns>
		List<SpendingType> GetExpensesTypes();


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateTaxeAsync(Taxe t);

		/// <returns></returns>
		UpdateResultWithId AddOrUpdateTaxe(Taxe t);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateExpenseTypeAsync(SpendingType t);

		/// <returns></returns>
		UpdateResultWithId AddOrUpdateExpenseType(SpendingType t);

		/// <param name="taxeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTaxeAsync(Int32 taxeId);

		/// <param name="taxeId"></param>
		/// <returns></returns>
		UpdateResultWithId DeleteTaxe(Int32 taxeId);

		/// <param name="expenseTypeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteExpenseTypeAsync(Int32 expenseTypeId);

		/// <param name="expenseTypeId"></param>
		/// <returns></returns>
		UpdateResultWithId DeleteExpenseType(Int32 expenseTypeId);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrEditProjectExpenseAsync(Expense expense);

		/// <returns></returns>
		UpdateResultWithId AddOrEditProjectExpense(Expense expense);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateListExpenseAsync(RequestSelectedBulkAction data);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess UpdateListExpense(RequestSelectedBulkAction data);

		/// <param name="expenseId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddFilesToExpenseAsync(Int32 expenseId);

		/// <param name="expenseId"></param>
		/// <returns></returns>
		UpdateResultWithId AddFilesToExpense(Int32 expenseId);

		/// <param name="expenseId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetFilesListForExpenseAsync(Int32 expenseId);

		/// <param name="expenseId"></param>
		/// <returns></returns>
		List<UploadedFile> GetFilesListForExpense(Int32 expenseId);

		/// <param name="expenseId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteExpenseAsync(Int32 expenseId);

		/// <param name="expenseId"></param>
		/// <returns></returns>
		UpdateResult DeleteExpense(Int32 expenseId);
				
	}
	
	public partial interface IExportsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllAvailableFieldsAsync();

		/// <returns></returns>
		List<ColumnInfoForExport> GetAllAvailableFields();


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvailableExportsAsync();

		/// <returns></returns>
		List<ExportConfig> GetAvailableExports();


		/// <returns></returns>
		Task<HttpResponseMessage> RunExportPostAsync(ExportConfigRun template);

		/// <returns></returns>
		UpdateResult RunExportPost(ExportConfigRun template);

		/// <param name="exportId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteExportAsync(String exportId);

		/// <param name="exportId"></param>
		/// <returns></returns>
		HttpResponseMessage DeleteExport(String exportId);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveExportAsync(ExportConfig request);

		/// <returns></returns>
		String SaveExport(ExportConfig request);
				
	}
	
	public partial interface IFastPlanningClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsAsync(DatesRangeRequest<FastPlaningGetProject> param);

		/// <returns></returns>
		List<SimpleProjectWithDates> GetProjects(DatesRangeRequest<FastPlaningGetProject> param);


		/// <returns></returns>
		Task<HttpResponseMessage> GetRessourcesAsync(DatesRangeRequest<GetRessourcesRequest> args);

		/// <returns></returns>
		RessourcesForNewProject GetRessources(DatesRangeRequest<GetRessourcesRequest> args);


		/// <returns></returns>
		Task<HttpResponseMessage> CheckIfPlanifAsync(PlanParams Params);

		/// <returns></returns>
		UpdateResult CheckIfPlanif(PlanParams Params);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveAllPlanningRessourcesAsync(PlanBulkParams param);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess SaveAllPlanningRessources(PlanBulkParams param);

		/// <param name="fromImport"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SavePlanningRessourcesAsync(Nullable<Boolean> fromImport,PlanParams Params);

		/// <param name="fromImport"></param>
		/// <returns></returns>
		UpdateResult SavePlanningRessources(Nullable<Boolean> fromImport,PlanParams Params);
				
	}
	
	public partial interface IFeesClient : IClientBase
	{	

		/// <param name="projectId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ListAsync(Int32 projectId,Nullable<Int32> taskId);

		/// <param name="projectId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		List<Fee> List(Int32 projectId,Nullable<Int32> taskId);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddAsyncAsync(Int32 projectId,Fee fee);

		/// <param name="projectId"></param>
		/// <returns></returns>
		Fee AddAsync(Int32 projectId,Fee fee);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateAsyncAsync(Int32 projectId,Fee fee);

		/// <param name="projectId"></param>
		/// <returns></returns>
		Fee UpdateAsync(Int32 projectId,Fee fee);

		/// <param name="projectExternalId">External id of the project</param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateExternalAsyncAsync(String projectExternalId,Fee fee);

		/// <param name="projectExternalId">External id of the project</param>
		/// <returns></returns>
		Fee AddOrUpdateExternalAsync(String projectExternalId,Fee fee);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateBatchOldAsync(List<Fee> fees);

		/// <returns></returns>
		List<Fee> AddOrUpdateBatchOld(List<Fee> fees);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateBatchAsync(List<Fee> fees);

		/// <returns></returns>
		List<ResponseContainer<Fee>> AddOrUpdateBatch(List<Fee> fees);

		/// <param name="projectId"></param>
		/// <param name="feeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteAsyncAsync(Int32 projectId,Guid feeId);

		/// <param name="projectId"></param>
		/// <param name="feeId"></param>
		/// <returns></returns>
		void DeleteAsync(Int32 projectId,Guid feeId);
				
	}
	
	public partial interface IFormClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> UploadDocumentAsync();

		/// <returns></returns>
		UpdateResultWithId UploadDocument();


		/// <returns></returns>
		Task<HttpResponseMessage> UploadDocumentQtyAsync();

		/// <returns></returns>
		UpdateResultWithId UploadDocumentQty();

		/// <param name="fileToRemove"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RemoveDocumentAsync(Int32 fileToRemove);

		/// <param name="fileToRemove"></param>
		/// <returns></returns>
		UpdateResult RemoveDocument(Int32 fileToRemove);


		/// <returns></returns>
		Task<HttpResponseMessage> GetFormValuesAsync();

		/// <returns></returns>
		List<FormValueReturn> GetFormValues();

		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetFormsByCompIdAsync(Int32 compId,String strinGuid);

		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>
		/// <returns></returns>
		FormReturn GetFormsByCompId(Int32 compId,String strinGuid);


		/// <returns></returns>
		Task<HttpResponseMessage> ValidFormValueAsync(FormApiParm param);

		/// <returns></returns>
		UpdateResultWithId ValidFormValue(FormApiParm param);


		/// <returns></returns>
		Task<HttpResponseMessage> RejectFormValueAsync(FormApiParm param);

		/// <returns></returns>
		UpdateResultWithGui RejectFormValue(FormApiParm param);

		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RemoveFormValueAsync(Int32 compId,String strinGuid);

		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>
		/// <returns></returns>
		UpdateResult RemoveFormValue(Int32 compId,String strinGuid);


		/// <returns></returns>
		Task<HttpResponseMessage> SendNotifSubmitAsync(FormApiParm param);

		/// <returns></returns>
		UpdateResultWithGui SendNotifSubmit(FormApiParm param);


		/// <returns></returns>
		Task<HttpResponseMessage> SubmitFormValueAsync(FormApiParm param);

		/// <returns></returns>
		SubmitFormReturn SubmitFormValue(FormApiParm param);


		/// <returns></returns>
		Task<HttpResponseMessage> SendNotifSaveAsync(FormApiParm param);

		/// <returns></returns>
		UpdateResultWithGui SendNotifSave(FormApiParm param);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveFormValueAsync(FormApiParm param);

		/// <returns></returns>
		UpdateResultWithGui SaveFormValue(FormApiParm param);
				
	}
	
	public partial interface IHelperWebClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GenerateApiTokenAsync();

		/// <returns></returns>
		String GenerateApiToken();

		/// <param name="v"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UnsubscribeAllEmailAsync(Boolean v);

		/// <param name="v"></param>
		/// <returns></returns>
		Boolean UnsubscribeAllEmail(Boolean v);
				
	}
	
	public partial interface IHumanRessourcesClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTitlesOrderAsync(Dictionary<Int32, Int32> neworder);

		/// <returns></returns>
		UpdateResult UpdateTitlesOrder(Dictionary<Int32, Int32> neworder);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllTitlesAsync();

		/// <returns></returns>
		List<OccupationJS> GetAllTitles();


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllSkillLevelsAsync();

		/// <returns></returns>
		List<SkillLevelJs> GetAllSkillLevels();

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckCanDeleteRessourceAsync(Int32 ressourceId);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		Boolean CheckCanDeleteRessource(Int32 ressourceId);

		/// <param name="skillLevelId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSkillLevelAsync(Int32 skillLevelId);

		/// <param name="skillLevelId"></param>
		/// <returns></returns>
		UpdateResult DeleteSkillLevel(Int32 skillLevelId);


		/// <returns></returns>
		Task<HttpResponseMessage> ChangeSkillLevelsOrderAsync(Int32[] newOrder);

		/// <returns></returns>
		UpdateResult ChangeSkillLevelsOrder(Int32[] newOrder);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrEditSkillLevelAsync(SkillLevelJs skillLevel);

		/// <returns></returns>
		UpdateResultWithId AddOrEditSkillLevel(SkillLevelJs skillLevel);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllSkillsAsync();

		/// <returns></returns>
		List<SkillJs> GetAllSkills();

		/// <param name="skillId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSkillAsync(Int32 skillId);

		/// <param name="skillId"></param>
		/// <returns></returns>
		UpdateResult DeleteSkill(Int32 skillId);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateResourceSkillsAsync(Int32 userId,List<SkillJs> skills);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult UpdateResourceSkills(Int32 userId,List<SkillJs> skills);

		/// <param name="userId"></param>
		/// <param name="skillId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteResourceSkillAsync(Int32 userId,Int32 skillId);

		/// <param name="userId"></param>
		/// <param name="skillId"></param>
		/// <returns></returns>
		UpdateResult DeleteResourceSkill(Int32 userId,Int32 skillId);


		/// <returns></returns>
		Task<HttpResponseMessage> ChangeSkillsOrderAsync(Int32[] newOrder);

		/// <returns></returns>
		UpdateResult ChangeSkillsOrder(Int32[] newOrder);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrEditSkillAsync(SkillJs skill);

		/// <returns></returns>
		UpdateResultWithId AddOrEditSkill(SkillJs skill);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateTitileAsync(OccupationJS title);

		/// <returns></returns>
		UpdateResultWithId CreateTitile(OccupationJS title);

		/// <param name="email"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SendEmailAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		UpdateResult SendEmail(String email);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveSettingResourceAsync(SettingResource setting);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess SaveSettingResource(SettingResource setting);

		/// <param name="titleId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTitleAsync(Int32 titleId,OccupationJS title);

		/// <param name="titleId"></param>
		/// <returns></returns>
		UpdateResult UpdateTitle(Int32 titleId,OccupationJS title);

		/// <param name="titleId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTitileAsync(Int32 titleId);

		/// <param name="titleId"></param>
		/// <returns></returns>
		UpdateResult DeleteTitile(Int32 titleId);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckUpdateEmployeeAsync(Int32 ressourceId,RessourceUpdate data);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResult CheckUpdateEmployee(Int32 ressourceId,RessourceUpdate data);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateEmployeeAsync(Int32 ressourceId,RessourceUpdate data);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResultWithId UpdateEmployee(Int32 ressourceId,RessourceUpdate data);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateOrAddEmployesOldAsync(List<ApiRessource> users);

		/// <returns></returns>
		UpdateResultWithId UpdateOrAddEmployesOld(List<ApiRessource> users);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateOrAddEmployesAsync(List<ApiRessource> users);

		/// <returns></returns>
		List<ResponseContainer<ApiRessource>> UpdateOrAddEmployes(List<ApiRessource> users);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetManagersAsync(Int32 userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		Int32[] GetManagers(Int32 userId);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveNewPositionsAsync(NewPositions newPositions);

		/// <returns></returns>
		UpdateResult SaveNewPositions(NewPositions newPositions);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveNewDirectionsAsync(NewDirections newDirections);

		/// <returns></returns>
		UpdateResult SaveNewDirections(NewDirections newDirections);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveNewRolesAsync(NewRoles newRoles);

		/// <returns></returns>
		UpdateResult SaveNewRoles(NewRoles newRoles);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteUserAsync(Int32 userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult DeleteUser(Int32 userId);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ReactivateUserAsync(Int32 userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult ReactivateUser(Int32 userId);
				
	}
	
	public partial interface IImportsClient : IClientBase
	{	

		/// <param name="exportType"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetFieldsForAsync(ObjectType exportType);

		/// <param name="exportType"></param>
		/// <returns></returns>
		List<ColumnInfo> GetFieldsFor(ObjectType exportType);


		/// <returns></returns>
		Task<HttpResponseMessage> AddImportAsync(ApiImport import);

		/// <returns></returns>
		ApiImport AddImport(ApiImport import);

		/// <param name="importId">Id of the import to update</param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateImportAsync(Guid importId,ApiImport import);

		/// <param name="importId">Id of the import to update</param>
		/// <returns></returns>
		ApiImport UpdateImport(Guid importId,ApiImport import);


		/// <returns></returns>
		Task<HttpResponseMessage> ListImportsAsync();

		/// <returns></returns>
		List<ApiImport> ListImports();
				
	}
	
	public partial interface IIntegrationsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> ImportFicheContributionAsync();

		/// <returns></returns>
		UpdateResultWithId ImportFicheContribution();

		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AssignOracleProjetAsync(String oracleId,Int32 BeeyeId);

		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>
		/// <returns></returns>
		UpdateResult AssignOracleProjet(String oracleId,Int32 BeeyeId);

		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AssignOracleRessourceAsync(String oracleId,Int32 BeeyeId);

		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>
		/// <returns></returns>
		UpdateResult AssignOracleRessource(String oracleId,Int32 BeeyeId);


		/// <returns></returns>
		Task<HttpResponseMessage> UploadGrGpDataAsync();

		/// <returns></returns>
		GtGpImportResult UploadGrGpData();


		/// <returns></returns>
		Task<HttpResponseMessage> WipeAsync();

		/// <returns></returns>
		UpdateResult Wipe();

		/// <param name="cfId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateGtGpCustomFieldAsync(Int32 cfId);

		/// <param name="cfId"></param>
		/// <returns></returns>
		UpdateResult UpdateGtGpCustomField(Int32 cfId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetLuccaConfigAsync();

		/// <returns></returns>
		LuccaConfig GetLuccaConfig();


		/// <returns></returns>
		Task<HttpResponseMessage> GetLuccaErrorsAsync();

		/// <returns></returns>
		List<LuccaError> GetLuccaErrors();


		/// <returns></returns>
		Task<HttpResponseMessage> SaveLuccaConfigAsync(LuccaConfig conf);

		/// <returns></returns>
		UpdateResult SaveLuccaConfig(LuccaConfig conf);


		/// <returns></returns>
		Task<HttpResponseMessage> CheckLuccaConnexionAsync();

		/// <returns></returns>
		UpdateResult CheckLuccaConnexion();


		/// <returns></returns>
		Task<HttpResponseMessage> ProcessLuccaImportAsync(DatesRangeRequest<LuccaImportParams> luccaImportRequest);

		/// <returns></returns>
		UpdateResult ProcessLuccaImport(DatesRangeRequest<LuccaImportParams> luccaImportRequest);

		/// <param name="errorId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteLuccaErrorAsync(Int32 errorId);

		/// <param name="errorId"></param>
		/// <returns></returns>
		UpdateResult DeleteLuccaError(Int32 errorId);


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteAllLuccaErrorsAsync();

		/// <returns></returns>
		UpdateResult DeleteAllLuccaErrors();

		/// <param name="compId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetGTGPConfigAsync(Int32 compId);

		/// <param name="compId"></param>
		/// <returns></returns>
		GtGpConfig GetGTGPConfig(Int32 compId);

		/// <param name="compId"></param>
		/// <param name="cfId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateGtGpConfigAsync(Int32 compId,Int32 cfId);

		/// <param name="compId"></param>
		/// <param name="cfId"></param>
		/// <returns></returns>
		UpdateResult UpdateGtGpConfig(Int32 compId,Int32 cfId);

		/// <param name="type"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ForceSyncAsync(IntegrationType type);

		/// <param name="type"></param>
		/// <returns></returns>
		UpdateResult ForceSync(IntegrationType type);

		/// <param name="compId"></param>
		/// <param name="compExternalId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetConfigurationsAsync(Nullable<Int32> compId,String compExternalId);

		/// <param name="compId"></param>
		/// <param name="compExternalId"></param>
		/// <returns></returns>
		List<IntegrationConfigurationBasic> GetConfigurations(Nullable<Int32> compId,String compExternalId);

		/// <param name="errorId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RerunLuccaAsync(Int32 errorId);

		/// <param name="errorId"></param>
		/// <returns></returns>
		UpdateResult RerunLucca(Int32 errorId);

		/// <param name="compId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateConfigurationsSellsyAsync(Int32 compId,IntegrationConfigurationSellsy newConfiguration);

		/// <param name="compId"></param>
		/// <returns></returns>
		UpdateResult UpdateConfigurationsSellsy(Int32 compId,IntegrationConfigurationSellsy newConfiguration);


		/// <returns></returns>
		Task<HttpResponseMessage> GenerateSellsyInvoiceAsync(DatesRangeRequest<Int32> datesRangeRequest);

		/// <returns></returns>
		UpdateResult GenerateSellsyInvoice(DatesRangeRequest<Int32> datesRangeRequest);
				
	}
	
	public partial interface IInvoicesClient : IClientBase
	{	

		/// <param name="invoiceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteInvoiceAsync(Int32 invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		UpdateResult DeleteInvoice(Int32 invoiceId);

		/// <param name="invoiceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetInvoiceDetailsAsync(Int32 invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		Invoiced GetInvoiceDetails(Int32 invoiceId);

		/// <param name="invoiceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddFilesToInvoiceAsync(Int32 invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		UpdateResultWithId AddFilesToInvoice(Int32 invoiceId);

		/// <param name="invoiceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetFilesListForInvoiceAsync(Int32 invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		List<UploadedFile> GetFilesListForInvoice(Int32 invoiceId);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllInvoicesForProjectAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		List<Invoiced> GetAllInvoicesForProject(Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllInvoicesAsync();

		/// <returns></returns>
		List<Invoiced> GetAllInvoices();

		/// <param name="invoiceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdatePaiedStatusAsync(Int32 invoiceId,Boolean newValue);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		UpdateResult UpdatePaiedStatus(Int32 invoiceId,Boolean newValue);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateListInvoicedAsync(RequestSelectedBulkAction data);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess UpdateListInvoiced(RequestSelectedBulkAction data);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateInvoiceAsync(Invoiced invoice);

		/// <returns></returns>
		UpdateResultWithId CreateOrUpdateInvoice(Invoiced invoice);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateInvoicesOldAsync(List<Invoiced> invoices);

		/// <returns></returns>
		UpdateResultWithId CreateOrUpdateInvoicesOld(List<Invoiced> invoices);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateInvoicesAsync(List<Invoiced> invoices);

		/// <returns></returns>
		List<ResponseContainer<Invoiced>> CreateOrUpdateInvoices(List<Invoiced> invoices);
				
	}
	
	public partial interface IKpiClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectSuccessByProjectAsync(DatesRangeFilteredRequest<ProjectSuccessComponent> request);

		/// <returns></returns>
		List<ProjectSuccessReturn> GetProjectSuccessByProject(DatesRangeFilteredRequest<ProjectSuccessComponent> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectSuccessPieAsync(DatesRangeFilteredRequest<ProjectSuccessPieComponent> request);

		/// <returns></returns>
		Int32[] GetProjectSuccessPie(DatesRangeFilteredRequest<ProjectSuccessPieComponent> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetSingleValueCustomFieldKpiAsync(DatesRangeFilteredRequest<KpiSingleNumberCustomFields> request);

		/// <returns></returns>
		KpiSingleNumberCustomFieldsValue GetSingleValueCustomFieldKpi(DatesRangeFilteredRequest<KpiSingleNumberCustomFields> request);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveDashBoardAsync(DatesRangeFilteredRequest<GraphInfo> request);

		/// <returns></returns>
		UpdateResultWithId SaveDashBoard(DatesRangeFilteredRequest<GraphInfo> request);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveFiltersDashBoardAsync(DatesRangeFilteredRequest<Int32> request);

		/// <returns></returns>
		UpdateResult SaveFiltersDashBoard(DatesRangeFilteredRequest<Int32> request);

		/// <param name="id">Id of the dashboard</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteDashboardAsync(Int32 id);

		/// <param name="id">Id of the dashboard</param>
		/// <returns></returns>
		UpdateResult DeleteDashboard(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateSharedDashboardAsync(ShareDashboardParam request);

		/// <returns></returns>
		UpdateResult UpdateSharedDashboard(ShareDashboardParam request);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSharedDashboardAsync(String id);

		/// <param name="id"></param>
		/// <returns></returns>
		SharedDashboard GetSharedDashboard(String id);


		/// <returns></returns>
		Task<HttpResponseMessage> GetSharedDashboardsListAsync();

		/// <returns></returns>
		List<SharedDashboard> GetSharedDashboardsList();

		/// <param name="Id">id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSharedDashboardAsync(String Id);

		/// <param name="Id">id</param>
		/// <returns></returns>
		UpdateResult DeleteSharedDashboard(String Id);


		/// <returns></returns>
		Task<HttpResponseMessage> ShareDashboardAsync(ShareDashboardParam request);

		/// <returns></returns>
		UpdateResult ShareDashboard(ShareDashboardParam request);

		/// <param name="id">Id of the dashboard</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetDashboardAsync(Int32 id);

		/// <param name="id">Id of the dashboard</param>
		/// <returns></returns>
		List<BaseDashboardComponent> GetDashboard(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCapacityGraphByPosteAsync(DatesRangeFilteredRequest<GraphCapacityByOccupation> request);

		/// <returns></returns>
		GraphCapacityByOccupationValue GetCapacityGraphByPoste(DatesRangeFilteredRequest<GraphCapacityByOccupation> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCapacityGraphAsync(DatesRangeFilteredRequest<CapacityGraphComponent> request);

		/// <returns></returns>
		CapacityGraphComponentResults GetCapacityGraph(DatesRangeFilteredRequest<CapacityGraphComponent> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetRatioGraphAsync(DatesRangeFilteredRequest<RatioGraphComponent> request);

		/// <returns></returns>
		TimeByCustomFieldReturnType GetRatioGraph(DatesRangeFilteredRequest<RatioGraphComponent> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetComparisonGraphAsync(DatesRangeFilteredRequest<ComparisonGraphComponent> request);

		/// <returns></returns>
		List<ComparisonGraphReturnType> GetComparisonGraph(DatesRangeFilteredRequest<ComparisonGraphComponent> request);

		/// <param name="startDate"></param>
		/// <param name="endDate"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTimeByCustomFieldGraphInternalAsync(DateTime startDate,DateTime endDate);

		/// <param name="startDate"></param>
		/// <param name="endDate"></param>
		/// <returns></returns>
		TimeByCustomFieldReturnType GetTimeByCustomFieldGraphInternal(DateTime startDate,DateTime endDate);
				
	}
	
	public partial interface ILoginClient : IClientBase
	{	

		/// <param name="apiKey">Authentication key for the company</param>

		/// <returns></returns>
		Task<HttpResponseMessage> ApiLoginAsync(String apiKey);

		/// <param name="apiKey">Authentication key for the company</param>
		/// <returns></returns>
		UpdateResultWithId ApiLogin(String apiKey);


		/// <returns></returns>
		Task<HttpResponseMessage> UserLoginAsync(LoginParams credentials);

		/// <returns></returns>
		UpdateResultWithId UserLogin(LoginParams credentials);


		/// <returns></returns>
		Task<HttpResponseMessage> IsLoggedAsync();

		/// <returns></returns>
		UpdateResultWithId IsLogged();


		/// <returns></returns>
		Task<HttpResponseMessage> LogOutAsync();

		/// <returns></returns>
		Boolean LogOut();


		/// <returns></returns>
		Task<HttpResponseMessage> ResetPasswordAsync(String email);

		/// <returns></returns>
		UpdateResult ResetPassword(String email);
				
	}
	
	public partial interface IMobileAuthClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAsync();

		/// <returns></returns>
		void Get();
				
	}
	
	public partial interface INotificationClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> ToggleSubmitSubscriptionAsync();

		/// <returns></returns>
		UpdateResultWithId ToggleSubmitSubscription();


		/// <returns></returns>
		Task<HttpResponseMessage> ToggleRejectedSubscriptionAsync();

		/// <returns></returns>
		UpdateResultWithId ToggleRejectedSubscription();


		/// <returns></returns>
		Task<HttpResponseMessage> ToggleEditedPlanningAsync();

		/// <returns></returns>
		UpdateResultWithId ToggleEditedPlanning();


		/// <returns></returns>
		Task<HttpResponseMessage> ToggleValidatedCommentsTimesheetAsync();

		/// <returns></returns>
		UpdateResultWithId ToggleValidatedCommentsTimesheet();


		/// <returns></returns>
		Task<HttpResponseMessage> ToggleValidatedSubscriptionAsync();

		/// <returns></returns>
		UpdateResultWithId ToggleValidatedSubscription();

		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ToggleTaskSubscriptionAsync(Int32 taskId);

		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResultWithId ToggleTaskSubscription(Int32 taskId);

		/// <param name="projectTypeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ToggleProjectTypeSubscriptionAsync(Int32 projectTypeId);

		/// <param name="projectTypeId"></param>
		/// <returns></returns>
		UpdateResultWithId ToggleProjectTypeSubscription(Int32 projectTypeId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetUserNotificationsListAsync();

		/// <returns></returns>
		UserNotificationsList GetUserNotificationsList();
				
	}
	
	public partial interface IPlanningClient : IClientBase
	{	

		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTaskPlanningAsync(Nullable<Int32> projectId,Nullable<Int32> resourceId,Nullable<Int32> taskId);

		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		List<TaskPlanning> GetTaskPlanning(Nullable<Int32> projectId,Nullable<Int32> resourceId,Nullable<Int32> taskId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPlanningAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <returns></returns>
		PlanningResult GetPlanning(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="viewId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeletePlanningViewAsync(Int32 viewId);

		/// <param name="viewId"></param>
		/// <returns></returns>
		UpdateResult DeletePlanningView(Int32 viewId);


		/// <returns></returns>
		Task<HttpResponseMessage> SavePreferencesPlannificationAsync();

		/// <returns></returns>
		void SavePreferencesPlannification();

		/// <param name="normal"></param>
		/// <param name="conflict"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ChangePlanningOrderAsync(Boolean normal,Boolean conflict,Int32[] newOrder);

		/// <param name="normal"></param>
		/// <param name="conflict"></param>
		/// <returns></returns>
		UpdateResult ChangePlanningOrder(Boolean normal,Boolean conflict,Int32[] newOrder);


		/// <returns></returns>
		Task<HttpResponseMessage> AddNewPlanningViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesPlanningParam> param);

		/// <returns></returns>
		UpdateResultWithId AddNewPlanningView(DatesRangeFilteredRequestPagination<UserPreferencesPlanningParam> param);


		/// <returns></returns>
		Task<HttpResponseMessage> DeletePlanningViewsAsync(List<Int32> viewsIdList);

		/// <returns></returns>
		UpdateResult DeletePlanningViews(List<Int32> viewsIdList);

		/// <param name="companyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllPlanifRealAsync(Int32 companyId);

		/// <param name="companyId"></param>
		/// <returns></returns>
		List<Double> GetAllPlanifReal(Int32 companyId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPlanifGraphAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <returns></returns>
		List<Double> GetPlanifGraph(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetIfRessHavePlanifAsync(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		Boolean GetIfRessHavePlanif(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="userId">Id of project or ressource</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetPlanningByIdAsync(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="userId">Id of project or ressource</param>
		/// <returns></returns>
		PlanningResult GetPlanningById(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdatePlanningDatesAsync(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data);

		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>
		/// <returns></returns>
		UpdateResult UpdatePlanningDates(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data);

		/// <param name="UserId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleProjectsListProjectNotCloseAsync(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="UserId"></param>
		/// <returns></returns>
		List<ProjectJS> GetAvalibleProjectsListProjectNotClose(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleProjectsListAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <returns></returns>
		List<ProjectJS> GetAvalibleProjectsList(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>

		/// <returns></returns>
		Task<HttpResponseMessage> ClearProjectPlanningAsync(Int32 projectId,Boolean clearTasks);

		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>
		/// <returns></returns>
		UpdateResult ClearProjectPlanning(Int32 projectId,Boolean clearTasks);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCombienedPlanningAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData);

		/// <returns></returns>
		PlanningResponse GetCombienedPlanning(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvailabilityAsync(GetPlanningLineRequest requestData);

		/// <returns></returns>
		PlanningResponse GetAvailability(GetPlanningLineRequest requestData);
				
	}
	
	public partial interface IPlanningByTasksClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> SaveRecurenceAsync(DatesRangeRequest<RecurentPlanParams> Params);

		/// <returns></returns>
		UpdateResult SaveRecurence(DatesRangeRequest<RecurentPlanParams> Params);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPlanningsAsync(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject);

		/// <returns></returns>
		TaskPlanningResult GetPlannings(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject);

		/// <param name="viewBy"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveViewByAsync(Int32 viewBy);

		/// <param name="viewBy"></param>
		/// <returns></returns>
		void SaveViewBy(Int32 viewBy);


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsForDatesAsync(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject);

		/// <returns></returns>
		List<ProjectContainer> GetProjectsForDates(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectForPlanningAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		ProjectContainer GetProjectForPlanning(Int32 projectId);

		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetRealHoursForTaskAsync(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates);

		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		Double GetRealHoursForTask(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates);

		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetPlannedHoursForTaskAsync(Int32 taskId);

		/// <param name="taskId"></param>
		/// <returns></returns>
		Double GetPlannedHoursForTask(Int32 taskId);

		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAvailableHoursForTaskAsync(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates);

		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		Double GetAvailableHoursForTask(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveChangesToPlanningsAsync(TaskPlanningsToSave plannings);

		/// <returns></returns>
		UpdateResult SaveChangesToPlannings(TaskPlanningsToSave plannings);


		/// <returns></returns>
		Task<HttpResponseMessage> ReversePlanningAsDoneAsync(DatesRangeRequest<RequestDeclareDone> dates);

		/// <returns></returns>
		UpdateResult ReversePlanningAsDone(DatesRangeRequest<RequestDeclareDone> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> DeclarePlanningAsDoneAsync(DatesRangeRequest<RequestDeclareDone> dates);

		/// <returns></returns>
		UpdateResult DeclarePlanningAsDone(DatesRangeRequest<RequestDeclareDone> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeletePlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResult DeletePlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> SetupDefaultWorkSpacesAsync();

		/// <returns></returns>
		UpdateResult SetupDefaultWorkSpaces();

		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetDefaultAllWorkSpaceAsync(Int32 taskId);

		/// <param name="taskId"></param>
		/// <returns></returns>
		Int32 GetDefaultAllWorkSpace(Int32 taskId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllTasksAsync(DatesRangeRequest<Int32> param);

		/// <returns></returns>
		List<ProjectTaskMinimal> GetAllTasks(DatesRangeRequest<Int32> param);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllWorkSpacesAsync();

		/// <returns></returns>
		List<TaskPlanningWorkSpace> GetAllWorkSpaces();


		/// <returns></returns>
		Task<HttpResponseMessage> SaveAllWorkSpacesAsync(List<TaskPlanningWorkSpace> workSpaces);

		/// <returns></returns>
		UpdateResult SaveAllWorkSpaces(List<TaskPlanningWorkSpace> workSpaces);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateWorkSpaceForPlanningAsync(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>
		/// <returns></returns>
		UpdateResult UpdateWorkSpaceForPlanning(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> LockTaskPlanningAsync(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>
		/// <returns></returns>
		UpdateResult LockTaskPlanning(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UnlockTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResult UnlockTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetLockTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResult GetLockTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCommentsForTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		List<TaskPlanningComment> GetCommentsForTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddCommentForTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResultWithId AddCommentForTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> EditCommentForTaskPlanningAsync(Int32 commentId,String newText);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult EditCommentForTaskPlanning(Int32 commentId,String newText);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCommentForTaskPlanningAsync(Int32 commentId);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult DeleteCommentForTaskPlanning(Int32 commentId);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictsForRessourceAsync(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		ConflictsManagmentEntity GetConflictsForRessource(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictsForProjectAsync(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="projectId"></param>
		/// <returns></returns>
		ConflictsManagmentEntity GetConflictsForProject(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetBaselineAsync(Int32 ProjetId,Int32 RessourceId);

		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>
		/// <returns></returns>
		Double GetBaseline(Int32 ProjetId,Int32 RessourceId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictsAsync(DatesRangeFilteredRequest<RequestConflicts> data);

		/// <returns></returns>
		List<ConflictsManagmentEntity> GetConflicts(DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="cardId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateUnitPlaningAsync(Int32 cardId,ConflictsPlanning data);

		/// <param name="cardId"></param>
		/// <returns></returns>
		UpdateResultWithId UpdateUnitPlaning(Int32 cardId,ConflictsPlanning data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictsByProjectAsync(DatesRangeFilteredRequest<RequestConflicts> data);

		/// <returns></returns>
		List<ConflictsManagmentEntity> GetConflictsByProject(DatesRangeFilteredRequest<RequestConflicts> data);
				
	}
	
	public partial interface IProfileImageClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> UploadUserFileAsync();

		/// <returns></returns>
		UpdateResult UploadUserFile();


		/// <returns></returns>
		Task<HttpResponseMessage> UploadNewImageAsync();

		/// <returns></returns>
		UpdateResult UploadNewImage();


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteImageAsync();

		/// <returns></returns>
		UpdateResult DeleteImage();
				
	}
	
	public partial interface IProjectManagementClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> QueueProjectsForPlanningAsync(DatesRangeFilteredRequest<Int32[]> projects);

		/// <returns></returns>
		UpdateResult QueueProjectsForPlanning(DatesRangeFilteredRequest<Int32[]> projects);

		/// <param name="projId"></param>
		/// <param name="GraphDateMode"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetGraphMaxAsync(Int32 projId,Int32 GraphDateMode);

		/// <param name="projId"></param>
		/// <param name="GraphDateMode"></param>
		/// <returns></returns>
		ProjectGraphMax GetGraphMax(Int32 projId,Int32 GraphDateMode);


		/// <returns></returns>
		Task<HttpResponseMessage> GetFieldsUsedForProjectCreationAsync();

		/// <returns></returns>
		List<ProjectDynamicNameField> GetFieldsUsedForProjectCreation();


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsDueDateUseAsync(DatesRangeRequestProjectsDueDate datesRangeRequestProjectsDueDate);

		/// <returns></returns>
		List<ListItemInt> GetProjectsDueDateUse(DatesRangeRequestProjectsDueDate datesRangeRequestProjectsDueDate);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectsDueDateAsync(List<Int32> projectsIds);

		/// <returns></returns>
		UpdateResult UpdateProjectsDueDate(List<Int32> projectsIds);

		/// <param name="projId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectRessourcesAsync(Int32 projId);

		/// <param name="projId"></param>
		/// <returns></returns>
		List<RessourceStats> GetProjectRessources(Int32 projId);

		/// <param name="projId"></param>
		/// <param name="objId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteObjectiveAsync(Int32 projId,Int32 objId);

		/// <param name="projId"></param>
		/// <param name="objId"></param>
		/// <returns></returns>
		UpdateResult DeleteObjective(Int32 projId,Int32 objId);

		/// <param name="activityFamiliesId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetMandatoryFieldsAsync(Guid activityFamiliesId);

		/// <param name="activityFamiliesId"></param>
		/// <returns></returns>
		MandatoryFields GetMandatoryFields(Guid activityFamiliesId);

		/// <param name="prId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllExpenssesAsync(Int32 prId);

		/// <param name="prId"></param>
		/// <returns></returns>
		List<Expense> GetAllExpensses(Int32 prId);

		/// <param name="prId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectSuccessAsync(Int32 prId);

		/// <param name="prId"></param>
		/// <returns></returns>
		ProjectSuccess GetProjectSuccess(Int32 prId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllResourcesResponsibleForTaskAsync();

		/// <returns></returns>
		List<EmployeJS> GetAllResourcesResponsibleForTask();


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllResourcesResponsibleForProjectAsync();

		/// <returns></returns>
		List<EmployeJS> GetAllResourcesResponsibleForProject();

		/// <param name="projId"></param>
		/// <param name="responsableId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveResponsableAsync(Int32 projId,Int32 responsableId);

		/// <param name="projId"></param>
		/// <param name="responsableId"></param>
		/// <returns></returns>
		UpdateResult SaveResponsable(Int32 projId,Int32 responsableId);

		/// <param name="projId"></param>
		/// <param name="projectGagne"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveBudgetAsync(Int32 projId,Double projectGagne);

		/// <param name="projId"></param>
		/// <param name="projectGagne"></param>
		/// <returns></returns>
		UpdateResult SaveBudget(Int32 projId,Double projectGagne);

		/// <param name="projId"></param>
		/// <param name="projectPrevu"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SavePlannedExpensesAsync(Int32 projId,Double projectPrevu);

		/// <param name="projId"></param>
		/// <param name="projectPrevu"></param>
		/// <returns></returns>
		UpdateResult SavePlannedExpenses(Int32 projId,Double projectPrevu);


		/// <returns></returns>
		Task<HttpResponseMessage> GetMyProjectsListAsync(DatesRangeRequestBase dates);

		/// <returns></returns>
		List<ProjectJS> GetMyProjectsList(DatesRangeRequestBase dates);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetDocumentsForprojectAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		List<UploadedFile> GetDocumentsForproject(Int32 projectId);

		/// <param name="fileToRemove"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RemoveDocumentAsync(Int32 fileToRemove);

		/// <param name="fileToRemove"></param>
		/// <returns></returns>
		UpdateResult RemoveDocument(Int32 fileToRemove);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UploadDocumentAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResultWithId UploadDocument(Int32 projectId);

		/// <param name="isImport"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CreateAllNewProjectAsync(Boolean isImport,List<ProjectJS> newProjList);

		/// <param name="isImport"></param>
		/// <returns></returns>
		UpdateResultWithId CreateAllNewProject(Boolean isImport,List<ProjectJS> newProjList);

		/// <param name="isImport"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CreateProjectsByBatchAsync(Boolean isImport,List<ProjectJS> projects);

		/// <param name="isImport"></param>
		/// <returns></returns>
		UpdateResultWithId CreateProjectsByBatch(Boolean isImport,List<ProjectJS> projects);

		/// <param name="projectId"></param>
		/// <param name="name"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectNameAsync(Int32 projectId,String name);

		/// <param name="projectId"></param>
		/// <param name="name"></param>
		/// <returns></returns>
		UpdateResult UpdateProjectName(Int32 projectId,String name);


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteProjectsAsync(Int32[] projectsIdList);

		/// <returns></returns>
		UpdateResult DeleteProjects(Int32[] projectsIdList);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteProjectAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult DeleteProject(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> GetManagedProjectsByDateAsync(DatesRangeFilteredRequest<RequestProjectManaged> data);

		/// <returns></returns>
		List<ProjectJS> GetManagedProjectsByDate(DatesRangeFilteredRequest<RequestProjectManaged> data);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectInfoMinimalAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		ProjectJS GetProjectInfoMinimal(Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetGeneralInfoAsync(DatesRangeRequest<Int32> requestData);

		/// <returns></returns>
		ProjectInfo GetGeneralInfo(DatesRangeRequest<Int32> requestData);


		/// <returns></returns>
		Task<HttpResponseMessage> GetFinancialInfoAsync(DatesRangeRequest<Int32> requestData);

		/// <returns></returns>
		FinancialInfo GetFinancialInfo(DatesRangeRequest<Int32> requestData);


		/// <returns></returns>
		Task<HttpResponseMessage> GetManagedProjectsAsync(RequestProjectManagedForUser requestData);

		/// <returns></returns>
		List<ProjectJS> GetManagedProjects(RequestProjectManagedForUser requestData);


		/// <returns></returns>
		Task<HttpResponseMessage> ProjectQuickCreateAsync(ProjectQuickCreate tocreate);

		/// <returns></returns>
		UpdateResultWithId ProjectQuickCreate(ProjectQuickCreate tocreate);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddActivitysToProjectAsync(Int32 projectId,Guid[] activitysId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResultMultiErrorSuccess AddActivitysToProject(Int32 projectId,Guid[] activitysId);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateNewProjectAsync(ProjectJS newProject);

		/// <returns></returns>
		UpdateResultWithId CreateNewProject(ProjectJS newProject);


		/// <returns></returns>
		Task<HttpResponseMessage> CopyProjectsAsync(ReplanProjectsRequest data);

		/// <returns></returns>
		UpdateResultWithId CopyProjects(ReplanProjectsRequest data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossibledRessourcesWithCapacityAsync(DatesRangeRequest<Boolean> dates);

		/// <returns></returns>
		RessourcesForNewProject GetPossibledRessourcesWithCapacity(DatesRangeRequest<Boolean> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> AddUsersToProjectsAsync(AssignMultiples assignMultiples);

		/// <returns></returns>
		UpdateResult AddUsersToProjects(AssignMultiples assignMultiples);

		/// <param name="projectId"></param>
		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddUserToProjectAsync(Int32 projectId,Int32 userId);

		/// <param name="projectId"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult AddUserToProject(Int32 projectId,Int32 userId);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateProjectWithCustomFieldsAsync(ProjectJS project);

		/// <returns></returns>
		UpdateResultWithId CreateProjectWithCustomFields(ProjectJS project);


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsRessourcesAsync(DatesRangeRequest<RequestProjectResources> requestObject);

		/// <returns></returns>
		ProjectJS GetProjectsRessources(DatesRangeRequest<RequestProjectResources> requestObject);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTasksForProjectAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		List<ProjectTaskMinimal> GetTasksForProject(Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetLastActivityForProjectAsync(DatesRangeRequest<Int32> data);

		/// <returns></returns>
		List<ActivityLine> GetLastActivityForProject(DatesRangeRequest<Int32> data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllProjectsWithCustomFieldsAsync(DatesRangeFilteredRequest<Boolean> requestObject);

		/// <returns></returns>
		List<ProjectJS> GetAllProjectsWithCustomFields(DatesRangeFilteredRequest<Boolean> requestObject);

		/// <param name="familyId"></param>
		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ChangeActivityFamilyAsync(Guid familyId,Int32 projectId);

		/// <param name="familyId"></param>
		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResultWithId ChangeActivityFamily(Guid familyId,Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateListProjectsAsync(RequestSelectedProjects data);

		/// <returns></returns>
		UpdateResult UpdateListProjects(RequestSelectedProjects data);

		/// <param name="projectId"></param>
		/// <param name="fondDeFinancement">client id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateFondDeFinancementAsync(Int32 projectId,Int32 fondDeFinancement);

		/// <param name="projectId"></param>
		/// <param name="fondDeFinancement">client id</param>
		/// <returns></returns>
		UpdateResult UpdateFondDeFinancement(Int32 projectId,Int32 fondDeFinancement);

		/// <param name="projectName"></param>
		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateNameAsync(String projectName,Int32 projectId);

		/// <param name="projectName"></param>
		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResult UpdateName(String projectName,Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectInfoAsync(ProjectJSMainStats newData);

		/// <returns></returns>
		UpdateResult UpdateProjectInfo(ProjectJSMainStats newData);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectMillesimeAsync(DatesRangeFilteredRequest<Int32> requestObjec);

		/// <returns></returns>
		UpdateResult UpdateProjectMillesime(DatesRangeFilteredRequest<Int32> requestObjec);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectDatesAndNameAsync(ProjectJSMainStats data);

		/// <returns></returns>
		UpdateResult UpdateProjectDatesAndName(ProjectJSMainStats data);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> OpenProjectAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResult OpenProject(Int32 projectId);

		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ChangeDefaultWorkPlaceAsync(Int32 projectId,Int32 workPlaceId);

		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>
		/// <returns></returns>
		UpdateResult ChangeDefaultWorkPlace(Int32 projectId,Int32 workPlaceId);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CloseProjectAsync(Int32 projectId,Boolean deleteSurvey);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResult CloseProject(Int32 projectId,Boolean deleteSurvey);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateDatesAsync(ProjectJSMainStats newData);

		/// <returns></returns>
		UpdateResult UpdateDates(ProjectJSMainStats newData);

		/// <param name="projectId"></param>
		/// <param name="projectTypeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectTypeIdAsync(Int32 projectId,Int32 projectTypeId);

		/// <param name="projectId"></param>
		/// <param name="projectTypeId"></param>
		/// <returns></returns>
		UpdateResult UpdateProjectTypeId(Int32 projectId,Int32 projectTypeId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossibledRessourcesAsync(DatesRangeFilteredRequest<Boolean> param);

		/// <returns></returns>
		List<EmployeJS> GetPossibledRessources(DatesRangeFilteredRequest<Boolean> param);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossibledResponsablesAsync();

		/// <returns></returns>
		List<EmployeJS> GetPossibledResponsables();

		/// <param name="prId"></param>
		/// <param name="val"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ToggleProjectFavAsync(Int32 prId,Boolean val);

		/// <param name="prId"></param>
		/// <param name="val"></param>
		/// <returns></returns>
		UpdateResult ToggleProjectFav(Int32 prId,Boolean val);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectDescriptionAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult GetProjectDescription(Int32 id);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectDescriptionAsync(Int32 id,String description);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult UpdateProjectDescription(Int32 id,String description);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleProjectsListAsync(DatesRangeFilteredRequest<RequestProjectManaged> param);

		/// <returns></returns>
		List<ProjectJS> GetAvalibleProjectsList(DatesRangeFilteredRequest<RequestProjectManaged> param);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleProjectsListNoDateAsync();

		/// <returns></returns>
		List<ProjectJS> GetAvalibleProjectsListNoDate();

		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsForProjectAsync(Int32 projectId,Boolean noUnique);

		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetCustomFieldsForProject(Int32 projectId,Boolean noUnique);

		/// <param name="ressourceId"></param>
		/// <param name="noUnique"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsForRessourceAsync(Int32 ressourceId,Boolean noUnique);

		/// <param name="ressourceId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetCustomFieldsForRessource(Int32 ressourceId,Boolean noUnique);

		/// <param name="pId"></param>
		/// <param name="rId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RemoveRessourceFromProjectAsync(Int32 pId,Int32 rId);

		/// <param name="pId"></param>
		/// <param name="rId"></param>
		/// <returns></returns>
		UpdateResultWithId RemoveRessourceFromProject(Int32 pId,Int32 rId);

		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RemoveProjectResourcesBillRateAsync(Int32 projectId,Int32 resourceId);

		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		Double RemoveProjectResourcesBillRate(Int32 projectId,Int32 resourceId);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectRessourcesAsync(Int32 projectId,List<RessourceStats> rs);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResult UpdateProjectRessources(Int32 projectId,List<RessourceStats> rs);


		/// <returns></returns>
		Task<HttpResponseMessage> AddObjectiveAsync(ProjectObjective objective);

		/// <returns></returns>
		UpdateResultWithId AddObjective(ProjectObjective objective);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateProjectsAsync(List<ApiProject> projects);

		/// <returns></returns>
		UpdateResultWithId CreateOrUpdateProjects(List<ApiProject> projects);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateProjectsWithoutUsersOldAsync(List<ApiProject> projects);

		/// <returns></returns>
		UpdateResultWithId CreateOrUpdateProjectsWithoutUsersOld(List<ApiProject> projects);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateProjectsWithoutUsersAsync(List<ApiProject> projects);

		/// <returns></returns>
		List<ResponseContainer<ApiProject>> CreateOrUpdateProjectsWithoutUsers(List<ApiProject> projects);
				
	}
	
	public partial interface IProjectStatesClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllStatesAsync();

		/// <returns></returns>
		List<ProjectState> GetAllStates();

		/// <param name="assignedStateId">Id of project state</param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateStateAsync(Int32 assignedStateId,String comment);

		/// <param name="assignedStateId">Id of project state</param>
		/// <returns></returns>
		UpdateResult UpdateState(Int32 assignedStateId,String comment);

		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddStateAsync(Int32 projectId,Int32 stateId,String comment);

		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>
		/// <returns></returns>
		UpdateResultWithId AddState(Int32 projectId,Int32 stateId,String comment);

		/// <param name="projectId">Id of project</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetStatesForProjectAsync(Int32 projectId);

		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		List<ProjectState> GetStatesForProject(Int32 projectId);
				
	}
	
	public partial interface IProjectSurveyClient : IClientBase
	{	

		/// <param name="pId"></param>
		/// <param name="sendToTeam"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SendAllTeamAsync(Int32 pId,Boolean sendToTeam);

		/// <param name="pId"></param>
		/// <param name="sendToTeam"></param>
		/// <returns></returns>
		UpdateResult SendAllTeam(Int32 pId,Boolean sendToTeam);

		/// <param name="idSection"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddSurveyQuestionAsync(Int32 idSection);

		/// <param name="idSection"></param>
		/// <returns></returns>
		UpdateResultWithId AddSurveyQuestion(Int32 idSection);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSurveySectionAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		Boolean DeleteSurveySection(Int32 id);

		/// <param name="prId"></param>
		/// <param name="sendToTeam"></param>
		/// <param name="haveSurveyAnswer"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SendEmailSurveyAsync(Int32 prId,Boolean sendToTeam,Boolean haveSurveyAnswer);

		/// <param name="prId"></param>
		/// <param name="sendToTeam"></param>
		/// <param name="haveSurveyAnswer"></param>
		/// <returns></returns>
		Boolean SendEmailSurvey(Int32 prId,Boolean sendToTeam,Boolean haveSurveyAnswer);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveAnswerAsync(List<ProjectSurveyQuestionAnswer> answer);

		/// <returns></returns>
		UpdateResult SaveAnswer(List<ProjectSurveyQuestionAnswer> answer);

		/// <param name="pId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectSurveyQuestionSectionsAsync(Int32 pId);

		/// <param name="pId"></param>
		/// <returns></returns>
		List<SurveySection> GetProjectSurveyQuestionSections(Int32 pId);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSurveyAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		Boolean DeleteSurvey(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateQuestionAsync(ProjectSurveyQuestion questionChange);

		/// <returns></returns>
		UpdateResult UpdateQuestion(ProjectSurveyQuestion questionChange);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateSectionAsync(ProjectSurveyQuestionSection sectionChange);

		/// <returns></returns>
		UpdateResult UpdateSection(ProjectSurveyQuestionSection sectionChange);


		/// <returns></returns>
		Task<HttpResponseMessage> AddSurveySectionAsync();

		/// <returns></returns>
		UpdateResultWithId AddSurveySection();


		/// <returns></returns>
		Task<HttpResponseMessage> SaveSurveyParametresAsync(CompagnyGeneralParams toSave);

		/// <returns></returns>
		UpdateResult SaveSurveyParametres(CompagnyGeneralParams toSave);

		/// <param name="ProjectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSurveyEnableAsync(Int32 ProjectId);

		/// <param name="ProjectId"></param>
		/// <returns></returns>
		SurveyState GetSurveyEnable(Int32 ProjectId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetSurveyQuestionSectionsAsync();

		/// <returns></returns>
		List<SurveySection> GetSurveyQuestionSections();

		/// <param name="qId"></param>
		/// <param name="pId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAswerQuestionAsync(Int32 qId,Int32 pId);

		/// <param name="qId"></param>
		/// <param name="pId"></param>
		/// <returns></returns>
		AswerQuestion GetAswerQuestion(Int32 qId,Int32 pId);
				
	}
	
	public partial interface IProjectTemplateClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllTemplatesAsync();

		/// <returns></returns>
		List<ProjectTemplate> GetAllTemplates();

		/// <param name="projectId">Id of project</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTemplatesListAsync(Int32 projectId);

		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		List<ProjectTemplate> GetTemplatesList(Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateTemplateAsync(ProjectTemplateParams param);

		/// <returns></returns>
		ProjectTemplate CreateTemplate(ProjectTemplateParams param);

		/// <param name="tid">Guid of the template</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTemplateAsync(String tid);

		/// <param name="tid">Guid of the template</param>
		/// <returns></returns>
		UpdateResult DeleteTemplate(String tid);
				
	}
	
	public partial interface IProjectTypeClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> SaveTypeProjectDynamicNameAsync(TypeProjectDynamic param);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess SaveTypeProjectDynamicName(TypeProjectDynamic param);

		/// <param name="ProjectTypeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteProjectTypeAsync(Int32 ProjectTypeId);

		/// <param name="ProjectTypeId"></param>
		/// <returns></returns>
		UpdateResultWithId DeleteProjectType(Int32 ProjectTypeId);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectTypeAsync(ProjectTypeJS prjs);

		/// <returns></returns>
		UpdateResultWithId UpdateProjectType(ProjectTypeJS prjs);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectTypesAsync(List<ProjectTypeJS> prjs);

		/// <returns></returns>
		UpdateResultWithId UpdateProjectTypes(List<ProjectTypeJS> prjs);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateCategoryAsync(CustomFieldCategory categorie);

		/// <returns></returns>
		UpdateResultWithId UpdateCategory(CustomFieldCategory categorie);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsCategpriesAsync();

		/// <returns></returns>
		List<CustomFieldCategory> GetCustomFieldsCategpries();

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldByIdAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		CustomFieldJs GetCustomFieldById(Int32 id);

		/// <param name="takeHiddens"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getAllCustomField"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsAsync(Boolean takeHiddens,Boolean takeCalculHard,Boolean getAllCustomField);

		/// <param name="takeHiddens"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getAllCustomField"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetCustomFields(Boolean takeHiddens,Boolean takeCalculHard,Boolean getAllCustomField);

		/// <param name="categoryId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCustomFieldCategoryAsync(Int32 categoryId);

		/// <param name="categoryId"></param>
		/// <returns></returns>
		UpdateResult DeleteCustomFieldCategory(Int32 categoryId);

		/// <param name="category"></param>
		/// <param name="isRessource"></param>
		/// <param name="isClient"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ReorderFieldsAsync(Int32 category,Boolean isRessource,Boolean isClient,Dictionary<Int32, Int32> toReorder);

		/// <param name="category"></param>
		/// <param name="isRessource"></param>
		/// <param name="isClient"></param>
		/// <returns></returns>
		UpdateResult ReorderFields(Int32 category,Boolean isRessource,Boolean isClient,Dictionary<Int32, Int32> toReorder);

		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCustomFieldAsync(Int32 fieldId,Boolean isRessourceCustom);

		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>
		/// <returns></returns>
		UpdateResult DeleteCustomField(Int32 fieldId,Boolean isRessourceCustom);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCompanyTypesAsync();

		/// <returns></returns>
		List<ProjectTypeJS> GetCompanyTypes();


		/// <returns></returns>
		Task<HttpResponseMessage> EditCustomFieldAsync(CustomFieldJs field);

		/// <returns></returns>
		UpdateResultWithId EditCustomField(CustomFieldJs field);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldRessourceByIdAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		CustomFieldJs GetCustomFieldRessourceById(Int32 id);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldClientByIdAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		CustomFieldJs GetCustomFieldClientById(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCompanyTypesWithSubscribtionAsync();

		/// <returns></returns>
		List<ProjectTypeJS> GetCompanyTypesWithSubscribtion();


		/// <returns></returns>
		Task<HttpResponseMessage> CreateAsync(ProjectTypeJS projectType);

		/// <returns></returns>
		UpdateResultWithId Create(ProjectTypeJS projectType);


		/// <returns></returns>
		Task<HttpResponseMessage> ListAsync();

		/// <returns></returns>
		List<ProjectTypeJS> List();
				
	}
	
	public partial interface IRapportsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsNoFiltersAsync(SearchCriteriaRapports searchOptions);

		/// <returns></returns>
		ProjectTypeStats GetProjectsNoFilters(SearchCriteriaRapports searchOptions);


		/// <returns></returns>
		Task<HttpResponseMessage> AddNewRapportViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesRepportsParam> param);

		/// <returns></returns>
		UpdateResultWithId AddNewRapportView(DatesRangeFilteredRequestPagination<UserPreferencesRepportsParam> param);

		/// <param name="viewId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteRapportViewAsync(Int32 viewId);

		/// <param name="viewId"></param>
		/// <returns></returns>
		UpdateResult DeleteRapportView(Int32 viewId);

		/// <param name="rapportType"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ChangeRepportsOrderAsync(Int32 rapportType,Int32[] newOrder);

		/// <param name="rapportType"></param>
		/// <returns></returns>
		UpdateResult ChangeRepportsOrder(Int32 rapportType,Int32[] newOrder);


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsByCategorieAsync(DatesRangeFilteredRequest<SearchCriteriaRapports> dates);

		/// <returns></returns>
		BaseRapport GetProjectsByCategorie(DatesRangeFilteredRequest<SearchCriteriaRapports> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTasksByDirectionAsync(DatesRangeFilteredRequest<SearchCriteriaRapports> dates);

		/// <returns></returns>
		BaseRapport GetTasksByDirection(DatesRangeFilteredRequest<SearchCriteriaRapports> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> GetSurveysByProjectAsync(DatesRangeFilteredRequest<SearchCriteriaRapports> dates);

		/// <returns></returns>
		BaseRapport GetSurveysByProject(DatesRangeFilteredRequest<SearchCriteriaRapports> dates);

		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTaskCustomByIdAsync(Int32 taskId);

		/// <param name="taskId"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetTaskCustomById(Int32 taskId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossiblesColumnsProjectsAsync();

		/// <returns></returns>
		List<ColumnInfo> GetPossiblesColumnsProjects();


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossiblesColumnsRessourcesAsync();

		/// <returns></returns>
		List<ColumnInfo> GetPossiblesColumnsRessources();


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossiblesColumnsTasksAsync();

		/// <returns></returns>
		List<ColumnInfo> GetPossiblesColumnsTasks();


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossiblesColumnsSurveysAsync();

		/// <returns></returns>
		List<ColumnInfo> GetPossiblesColumnsSurveys();


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteRapportsViewsAsync(List<Int32> viewsIdList);

		/// <returns></returns>
		UpdateResult DeleteRapportsViews(List<Int32> viewsIdList);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvailableTasksListAsync(DatesRangeFilteredRequest<Object> param);

		/// <returns></returns>
		List<TaskFiltre> GetAvailableTasksList(DatesRangeFilteredRequest<Object> param);

		/// <param name="col"></param>
		/// <param name="direction"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateDefaultSortingAsync(Int32 col,Boolean direction);

		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		UpdateResult UpdateDefaultSorting(Int32 col,Boolean direction);

		/// <param name="col"></param>
		/// <param name="direction"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateDefaultSortingTasksAsync(Int32 col,Boolean direction);

		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		UpdateResult UpdateDefaultSortingTasks(Int32 col,Boolean direction);

		/// <param name="col"></param>
		/// <param name="direction"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateDefaultSortingSurveysAsync(Int32 col,Boolean direction);

		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		UpdateResult UpdateDefaultSortingSurveys(Int32 col,Boolean direction);

		/// <param name="col"></param>
		/// <param name="direction"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateDefaultSortingRessourcesAsync(Int32 col,Boolean direction);

		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		UpdateResult UpdateDefaultSortingRessources(Int32 col,Boolean direction);


		/// <returns></returns>
		Task<HttpResponseMessage> GetRessourcesByDirectionAsync(DatesRangeFilteredRequest<SearchCriteriaRapports> dates);

		/// <returns></returns>
		BaseRapport GetRessourcesByDirection(DatesRangeFilteredRequest<SearchCriteriaRapports> dates);
				
	}
	
	public partial interface IRealTimesClient : IClientBase
	{	

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ListAsync(Int32 projectId,DatesRangeRequestBase dates);

		/// <param name="projectId"></param>
		/// <returns></returns>
		List<RealtimeEntry> List(Int32 projectId,DatesRangeRequestBase dates);
				
	}
	
	public partial interface IRessourceClient : IClientBase
	{	

		/// <param name="userId"></param>
		/// <param name="includeData"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetUsergeneralInfoAsync(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates);

		/// <param name="userId"></param>
		/// <param name="includeData"></param>
		/// <returns></returns>
		RessourceGeneralInformations GetUsergeneralInfo(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> ResourceBulkUpdateAsync(ResourceBulkUpdate resourceBulkUpdate);

		/// <returns></returns>
		UpdateResultMultiMessages ResourceBulkUpdate(ResourceBulkUpdate resourceBulkUpdate);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPreferencesAsync();

		/// <returns></returns>
		Object GetPreferences();


		/// <returns></returns>
		Task<HttpResponseMessage> CreateUserAsync(EmployeJS userInfo);

		/// <returns></returns>
		UpdateResultWithId CreateUser(EmployeJS userInfo);


		/// <returns></returns>
		Task<HttpResponseMessage> GetDefaultAsync();

		/// <returns></returns>
		EmployeJS GetDefault();

		/// <param name="resourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteResourceAsync(Int32 resourceId);

		/// <param name="resourceId"></param>
		/// <returns></returns>
		UpdateResult DeleteResource(Int32 resourceId);
				
	}
	
	public partial interface IRolesManagementClient : IClientBase
	{	

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetRessourcesAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		List<RessourceStats> GetRessources(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> GetRolesAsync();

		/// <returns></returns>
		List<RoleJS> GetRoles();


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateRoleAsync(RoleJS newRole);

		/// <returns></returns>
		UpdateResult UpdateRole(RoleJS newRole);


		/// <returns></returns>
		Task<HttpResponseMessage> AddRoleAsync(RoleJS item);

		/// <returns></returns>
		UpdateResultWithId AddRole(RoleJS item);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveRolesAsync(List<RoleJS> newRoles);

		/// <returns></returns>
		UpdateResult SaveRoles(List<RoleJS> newRoles);

		/// <param name="roleId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsPermissionsAsync(Int32 roleId);

		/// <param name="roleId"></param>
		/// <returns></returns>
		List<CustomFieldPermissionJS> GetCustomFieldsPermissions(Int32 roleId);

		/// <param name="roleId"></param>
		/// <param name="roleName"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveCustomFieldsPermissionsAsync(Int32 roleId,String roleName,List<CustomFieldPermissionJS> customFieldPermissions);

		/// <param name="roleId"></param>
		/// <param name="roleName"></param>
		/// <returns></returns>
		UpdateResult SaveCustomFieldsPermissions(Int32 roleId,String roleName,List<CustomFieldPermissionJS> customFieldPermissions);
				
	}
	
	public partial interface ISearchClient : IClientBase
	{	

		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchProjectsAsync(String searchStr,ViewSelect viewSelector);

		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		List<ProjectSearchResult> SearchProjects(String searchStr,ViewSelect viewSelector);

		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchRessourcesAsync(String searchStr,ViewSelect viewSelector);

		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		List<EmployeJS__> SearchRessources(String searchStr,ViewSelect viewSelector);
				
	}
	
	public partial interface ISignupClient : IClientBase
	{	

		/// <param name="email"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckIfEmailInUseAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		UpdateResult CheckIfEmailInUse(String email);

		/// <param name="lang"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetOrgNeedsAsync(String lang);

		/// <param name="lang"></param>
		/// <returns></returns>
		List<OrgNeed> GetOrgNeeds(String lang);

		/// <param name="lang"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetOrgTypesAsync(String lang);

		/// <param name="lang"></param>
		/// <returns></returns>
		List<ExcelDemoTemplate> GetOrgTypes(String lang);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateAccountAsync(SignUpInfo info);

		/// <returns></returns>
		UpdateResult CreateAccount(SignUpInfo info);
				
	}
	
	public partial interface IStatisticsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> ReportAdBlockAsync();

		/// <returns></returns>
		void ReportAdBlock();

		/// <param name="events"></param>
		/// <param name="objects"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> TrackAsync(String events,String objects);

		/// <param name="events"></param>
		/// <param name="objects"></param>
		/// <returns></returns>
		void Track(String events,String objects);
				
	}
	
	public partial interface ITasksClient : IClientBase
	{	

		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ImportFromTemplateAsync(String templateId,Int32 projectId,Boolean addTemplateResp);

		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>
		/// <returns></returns>
		UpdateResult ImportFromTemplate(String templateId,Int32 projectId,Boolean addTemplateResp);


		/// <returns></returns>
		Task<HttpResponseMessage> AddNewTaskViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param);

		/// <returns></returns>
		UpdateResultWithId AddNewTaskView(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param);

		/// <param name="taskViewId">The id of the view we want to share</param>

		/// <returns></returns>
		Task<HttpResponseMessage> ShareTaskViewAsync(Int32 taskViewId);

		/// <param name="taskViewId">The id of the view we want to share</param>
		/// <returns></returns>
		UpdateResult ShareTaskView(Int32 taskViewId);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateListTasksAsync(RequestSelectedBulkAction data);

		/// <returns></returns>
		List<UpdateResultWithData<ApiTask>> UpdateListTasks(RequestSelectedBulkAction data);

		/// <param name="taskViewId">The id of the view we want to share</param>

		/// <returns></returns>
		Task<HttpResponseMessage> UnShareTaskViewAsync(Int32 taskViewId);

		/// <param name="taskViewId">The id of the view we want to share</param>
		/// <returns></returns>
		UpdateResult UnShareTaskView(Int32 taskViewId);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param);

		/// <returns></returns>
		UpdateResult UpdateView(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param);

		/// <param name="viewId">view id to remove</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteViewAsync(Int32 viewId);

		/// <param name="viewId">view id to remove</param>
		/// <returns></returns>
		UpdateResult DeleteView(Int32 viewId);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateTaskAsync(ProjectTaskMinimal toCreate);

		/// <returns></returns>
		List<UpdateResultWithData<ApiTask>> CreateTask(ProjectTaskMinimal toCreate);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsForTaskNoValueAsync();

		/// <returns></returns>
		List<CustomFieldJs> GetCustomFieldsForTaskNoValue();

		/// <param name="taskId">Id of the task to delete</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTaskAsync(Int32 taskId);

		/// <param name="taskId">Id of the task to delete</param>
		/// <returns></returns>
		UpdateResult DeleteTask(Int32 taskId);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveAllStatesAsync(List<TaskState> states);

		/// <returns></returns>
		UpdateResult SaveAllStates(List<TaskState> states);

		/// <param name="stateId">Id of the state</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteStateAsync(Int32 stateId);

		/// <param name="stateId">Id of the state</param>
		/// <returns></returns>
		UpdateResult DeleteState(Int32 stateId);


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTasksAsync(List<Int32> tasksId);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess DeleteTasks(List<Int32> tasksId);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskFilterAsync(RequesTasksFilter requesTasksFilter);

		/// <returns></returns>
		UpdateResult UpdateTaskFilter(RequesTasksFilter requesTasksFilter);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskTodoListAsync(RequesTasksTodo requesTasksTodo);

		/// <returns></returns>
		UpdateResult UpdateTaskTodoList(RequesTasksTodo requesTasksTodo);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskBillingRulesAsync(RequesTasksBillingRules requesTasksBillingRules);

		/// <returns></returns>
		UpdateResult UpdateTaskBillingRules(RequesTasksBillingRules requesTasksBillingRules);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskDefaultDurationAsync(RequesTasksDefaultDuration requesTasksDefaultDuration);

		/// <returns></returns>
		UpdateResult UpdateTaskDefaultDuration(RequesTasksDefaultDuration requesTasksDefaultDuration);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskDeadlineAsync(RequesTasksDeadline requesTasksDeadline);

		/// <returns></returns>
		UpdateResult UpdateTaskDeadline(RequesTasksDeadline requesTasksDeadline);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskDescriptionAsync(RequesTasksDescription requesTasksDescription);

		/// <returns></returns>
		UpdateResult UpdateTaskDescription(RequesTasksDescription requesTasksDescription);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateBulkTasksAsync(RequesTasksInfosUpdate requesTasksInfosUpdate);

		/// <returns></returns>
		UpdateResult UpdateBulkTasks(RequesTasksInfosUpdate requesTasksInfosUpdate);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskInfoAsync(RequesTasksInfo requestTaskInfo);

		/// <returns></returns>
		UpdateResult UpdateTaskInfo(RequesTasksInfo requestTaskInfo);

		/// <param name="taskId"></param>
		/// <param name="parentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskAsync(Int32 taskId,Int32 parentId,RequesTasks requestTask);

		/// <param name="taskId"></param>
		/// <param name="parentId"></param>
		/// <returns></returns>
		UpdateResult UpdateTask(Int32 taskId,Int32 parentId,RequesTasks requestTask);

		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="isForTaskEmpty"></param>
		/// <param name="noUnique"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsForTaskAsync(Int32 taskId,Int32 projectId,Boolean isForTaskEmpty,Boolean noUnique);

		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="isForTaskEmpty"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetCustomFieldsForTask(Int32 taskId,Int32 projectId,Boolean isForTaskEmpty,Boolean noUnique);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateTasksAsync(List<ApiTask> tasks);

		/// <returns></returns>
		UpdateResult AddOrUpdateTasks(List<ApiTask> tasks);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTasksOrderAsync(Int32 projectId,List<Int32[]> orders);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResult UpdateTasksOrder(Int32 projectId,List<Int32[]> orders);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetMyTodayTasksAsync(Int32 userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		List<ProjectWithTasks> GetMyTodayTasks(Int32 userId);

		/// <param name="taskId"></param>
		/// <param name="isEnded"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ToggleEndedAsync(Int32 taskId,Boolean isEnded);

		/// <param name="taskId"></param>
		/// <param name="isEnded"></param>
		/// <returns></returns>
		UpdateResult ToggleEnded(Int32 taskId,Boolean isEnded);

		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetIfTaskHavePlanifAsync(Int32 taskId,RequesTasks requestTask);

		/// <param name="taskId"></param>
		/// <returns></returns>
		Boolean GetIfTaskHavePlanif(Int32 taskId,RequesTasks requestTask);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateListStateTaskAsync(List<TaskState> taskStates);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess UpdateListStateTask(List<TaskState> taskStates);

		/// <param name="taskId"></param>
		/// <param name="stateId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskStateAsync(Int32 taskId,Int32 stateId);

		/// <param name="taskId"></param>
		/// <param name="stateId"></param>
		/// <returns></returns>
		UpdateResult UpdateTaskState(Int32 taskId,Int32 stateId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetKanbanAsync(DatesRangeFilteredRequest<Int32> data);

		/// <returns></returns>
		List<TaskStateWithTask> GetKanban(DatesRangeFilteredRequest<Int32> data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetIfTasksHavePlanifAsync(RequestSelectedTasks data);

		/// <returns></returns>
		Boolean GetIfTasksHavePlanif(RequestSelectedTasks data);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateSelectedTasksInfoAsync(RequestSelectedTasks data);

		/// <returns></returns>
		UpdateResult UpdateSelectedTasksInfo(RequestSelectedTasks data);

		/// <param name="taskId"></param>
		/// <param name="comment"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddCommentAsync(Int32 taskId,String comment);

		/// <param name="taskId"></param>
		/// <param name="comment"></param>
		/// <returns></returns>
		UpdateResultWithId AddComment(Int32 taskId,String comment);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCommentAsync(Int32 commentId);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult DeleteComment(Int32 commentId);

		/// <param name="commentId"></param>
		/// <param name="newText"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateCommentAsync(Int32 commentId,String newText);

		/// <param name="commentId"></param>
		/// <param name="newText"></param>
		/// <returns></returns>
		UpdateResult UpdateComment(Int32 commentId,String newText);

		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RefreshTaskAsync(Int32 taskId);

		/// <param name="taskId"></param>
		/// <returns></returns>
		ProjectTask RefreshTask(Int32 taskId);

		/// <param name="taskId">task to duplicate</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DuplicateTaskAsync(Int32 taskId);

		/// <param name="taskId">task to duplicate</param>
		/// <returns></returns>
		UpdateResult DuplicateTask(Int32 taskId);


		/// <returns></returns>
		Task<HttpResponseMessage> DuplicateTasksAsync(List<Int32> tasksId);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess DuplicateTasks(List<Int32> tasksId);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllProjectRessourcesAsync(Int32 projectId,RequesTasks dates);

		/// <param name="projectId"></param>
		/// <returns></returns>
		List<EmployeJS> GetAllProjectRessources(Int32 projectId,RequesTasks dates);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllStatesAsync();

		/// <returns></returns>
		List<TaskState> GetAllStates();

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTasksNoManaDireCheckAsync(Int32 ressourceId,DatesRangeRequest<Object> dates);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		List<ProjectWithTasks> GetTasksNoManaDireCheck(Int32 ressourceId,DatesRangeRequest<Object> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTaskByIdAsync(DatesRangeRequest<Int32> criteria);

		/// <returns></returns>
		ProjectTask GetTaskById(DatesRangeRequest<Int32> criteria);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateTaskStateAsync(TaskState taskState);

		/// <returns></returns>
		UpdateResultWithId CreateTaskState(TaskState taskState);

		/// <param name="projectId"></param>
		/// <param name="activityId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CreateTaskFromActicityAsync(Int32 projectId,Guid activityId);

		/// <param name="projectId"></param>
		/// <param name="activityId"></param>
		/// <returns></returns>
		UpdateResultWithId CreateTaskFromActicity(Int32 projectId,Guid activityId);

		/// <param name="projectId">Id of the project</param>
		/// <param name="getBillingInfo">get hour rate</param>
		/// <param name="putInTreeChild">if the return task should be in a tree structure (childs tasks in childs object of the tasks)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllTasksAsync(Int32 projectId,Boolean getBillingInfo,Boolean putInTreeChild);

		/// <param name="projectId">Id of the project</param>
		/// <param name="getBillingInfo">get hour rate</param>
		/// <param name="putInTreeChild">if the return task should be in a tree structure (childs tasks in childs object of the tasks)</param>
		/// <returns></returns>
		List<ProjectTask> GetAllTasks(Int32 projectId,Boolean getBillingInfo,Boolean putInTreeChild);

		/// <param name="projectId">Id of the project</param>

		/// <returns></returns>
		Task<HttpResponseMessage> CreateMultipleTasksFromIdsAsync(Int32 projectId,List<Guid> activities);

		/// <param name="projectId">Id of the project</param>
		/// <returns></returns>
		UpdateResultWithId CreateMultipleTasksFromIds(Int32 projectId,List<Guid> activities);


		/// <returns></returns>
		Task<HttpResponseMessage> ListTasksAsync(DatesRangeFilteredRequest<Object> query);

		/// <returns></returns>
		List<ProjectTask> ListTasks(DatesRangeFilteredRequest<Object> query);


		/// <returns></returns>
		Task<HttpResponseMessage> ListTasksBudgetRateAsync(DatesRangeFilteredRequest<Object> query);

		/// <returns></returns>
		List<ProjectTask> ListTasksBudgetRate(DatesRangeFilteredRequest<Object> query);

		/// <param name="projectId">Id of the project</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectWorkPlaceAsync(Int32 projectId);

		/// <param name="projectId">Id of the project</param>
		/// <returns></returns>
		Nullable<Int32> GetProjectWorkPlace(Int32 projectId);
				
	}
	
	public partial interface ITimesheetsClient : IClientBase
	{	

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTimeAsync(Int32 ressourceId,TimehseetBaseLine data);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResultWithId UpdateTime(Int32 ressourceId,TimehseetBaseLine data);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTimeExternalAsync(List<TimehseetBaseLine> dataList);

		/// <returns></returns>
		UpdateResult UpdateTimeExternal(List<TimehseetBaseLine> dataList);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTimesheetAsync(GetTimesheetRequest args);

		/// <returns></returns>
		TimeSheetReduced GetTimesheet(GetTimesheetRequest args);

		/// <param name="timesheetId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SubmitTimesheetAsync(Int32 timesheetId);

		/// <param name="timesheetId"></param>
		/// <returns></returns>
		UpdateResult SubmitTimesheet(Int32 timesheetId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTimesheetFromProjectAsync(GetTimesheetFromProjectRequest args);

		/// <returns></returns>
		TimeSheetReduced GetTimesheetFromProject(GetTimesheetFromProjectRequest args);


		/// <returns></returns>
		Task<HttpResponseMessage> GetUsersAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <returns></returns>
		List<MinimalEmployeeData> GetUsers(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetUsersNotSubmittedTimesheetsAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <returns></returns>
		NotSubmitedTimesheetsResponse GetUsersNotSubmittedTimesheets(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <param name="viewId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteNewTimesheetViewAsync(Int32 viewId);

		/// <param name="viewId"></param>
		/// <returns></returns>
		UpdateResult DeleteNewTimesheetView(Int32 viewId);


		/// <returns></returns>
		Task<HttpResponseMessage> AddNewTimesheetViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesTimesheetsParam> param);

		/// <returns></returns>
		UpdateResultWithId AddNewTimesheetView(DatesRangeFilteredRequestPagination<UserPreferencesTimesheetsParam> param);


		/// <returns></returns>
		Task<HttpResponseMessage> GetSubmitDetailByDateAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <returns></returns>
		List<TimeSheetRessourceDetail> GetSubmitDetailByDate(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);


		/// <returns></returns>
		Task<HttpResponseMessage> SendNotifToUserNotSubmitAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <returns></returns>
		UpdateResult SendNotifToUserNotSubmit(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPastTimesheetAsync(GetTimesheetRequest args);

		/// <returns></returns>
		TimeSheetReduced GetPastTimesheet(GetTimesheetRequest args);

		/// <param name="toReject"></param>
		/// <param name="comment"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RejectTimeSheetAsync(Int32 toReject,String comment);

		/// <param name="toReject"></param>
		/// <param name="comment"></param>
		/// <returns></returns>
		UpdateResult RejectTimeSheet(Int32 toReject,String comment);

		/// <param name="toVal"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DevalidateTimeSheetAsync(Int32 toVal);

		/// <param name="toVal"></param>
		/// <returns></returns>
		UpdateResult DevalidateTimeSheet(Int32 toVal);


		/// <returns></returns>
		Task<HttpResponseMessage> GetSummariesAsync(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request);

		/// <returns></returns>
		List<TimeSheetReduced> GetSummaries(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveTimesheetAsync(Int32 ressourceId,TimeSheetReduced time);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResultWithId SaveTimesheet(Int32 ressourceId,TimeSheetReduced time);

		/// <param name="timesheetId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetGeneralCommentsTimesheetAsync(Int32 timesheetId);

		/// <param name="timesheetId"></param>
		/// <returns></returns>
		List<TimesheetGeneralComment> GetGeneralCommentsTimesheet(Int32 timesheetId);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> EditGeneralCommentAsync(Int32 commentId,String newText);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult EditGeneralComment(Int32 commentId,String newText);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteGeneralCommentAsync(Int32 commentId);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult DeleteGeneralComment(Int32 commentId);


		/// <returns></returns>
		Task<HttpResponseMessage> AddGeneralTimesheetCommentsAsync(DatesRangeRequest<TimeSheetCommentParam> param);

		/// <returns></returns>
		UpdateResultWithId AddGeneralTimesheetComments(DatesRangeRequest<TimeSheetCommentParam> param);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveTimesheetCommentsAsync(Int32 ressourceId,TimeSheetReduced time);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResultWithId SaveTimesheetComments(Int32 ressourceId,TimeSheetReduced time);


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsListForUserAsync(DatesRangeRequest<Int32> searchData);

		/// <returns></returns>
		List<ListItem> GetProjectsListForUser(DatesRangeRequest<Int32> searchData);

		/// <param name="timesheetId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ValidateTimesheetAsync(Int32 timesheetId,String coment);

		/// <param name="timesheetId"></param>
		/// <returns></returns>
		UpdateResult ValidateTimesheet(Int32 timesheetId,String coment);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTimebankAsync(TimeSheetReduced ts);

		/// <returns></returns>
		UpdateResultWithId UpdateTimebank(TimeSheetReduced ts);
				
	}
	
	public partial interface ITranslationsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllAvalibleTranslationsAsync();

		/// <returns></returns>
		List<TranslationsData> GetAllAvalibleTranslations();

		/// <param name="pageName"></param>
		/// <param name="isControl"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTranslationsAsync(String pageName,Boolean isControl);

		/// <param name="pageName"></param>
		/// <param name="isControl"></param>
		/// <returns></returns>
		List<TranslationText> GetTranslations(String pageName,Boolean isControl);

		/// <param name="isControl"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllTranslationsAsync(Boolean isControl,List<String> pagesNames);

		/// <param name="isControl"></param>
		/// <returns></returns>
		List<TranslationGroupText> GetAllTranslations(Boolean isControl,List<String> pagesNames);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllLangsAsync();

		/// <returns></returns>
		List<LangDefinition> GetAllLangs();

		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ChangeLanguageAsync(String newCulture,Boolean origUser);

		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>
		/// <returns></returns>
		UpdateResult ChangeLanguage(String newCulture,Boolean origUser);
				
	}
	
	public partial interface IUserProfileClient : IClientBase
	{	

		/// <param name="password"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> Enable2FAAsync(String password);

		/// <param name="password"></param>
		/// <returns></returns>
		Enable2FAResult Enable2FA(String password);


		/// <returns></returns>
		Task<HttpResponseMessage> Activate2FAAsync(Activate2FARequest request);

		/// <returns></returns>
		UpdateResult Activate2FA(Activate2FARequest request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetActiveDelegationsRecivedAsync();

		/// <returns></returns>
		List<DelegationJS> GetActiveDelegationsRecived();


		/// <returns></returns>
		Task<HttpResponseMessage> CreateDelegationAsync(DelegationJS delegation);

		/// <returns></returns>
		UpdateResultWithId CreateDelegation(DelegationJS delegation);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteDelegationAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult DeleteDelegation(Int32 id);

		/// <param name="newLink"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateStartUpPageAsync(String newLink);

		/// <param name="newLink"></param>
		/// <returns></returns>
		UpdateResult UpdateStartUpPage(String newLink);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTimesheetRemindersAsync();

		/// <returns></returns>
		List<TriggerWraper> GetTimesheetReminders();

		/// <param name="ressourceId">Optional</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetDefinedTriggertsAsync(Int32 ressourceId);

		/// <param name="ressourceId">Optional</param>
		/// <returns></returns>
		List<TriggerWraper> GetDefinedTriggerts(Int32 ressourceId);

		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCustomTriggerAsync(Guid nuid,Int32 ressourceId);

		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>
		/// <returns></returns>
		UpdateResult DeleteCustomTrigger(Guid nuid,Int32 ressourceId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetActiveDelegationsAsync();

		/// <returns></returns>
		List<DelegationJS> GetActiveDelegations();


		/// <returns></returns>
		Task<HttpResponseMessage> GetUsersListForDelegationAsync();

		/// <returns></returns>
		List<EmployeJS> GetUsersListForDelegation();


		/// <returns></returns>
		Task<HttpResponseMessage> ChangeNameAsync(RessourceStats newInfo);

		/// <returns></returns>
		UpdateResult ChangeName(RessourceStats newInfo);


		/// <returns></returns>
		Task<HttpResponseMessage> ChangePasswordAsync(RessourceStats info);

		/// <returns></returns>
		UpdateResult ChangePassword(RessourceStats info);


		/// <returns></returns>
		Task<HttpResponseMessage> ResetAllTimePeriodsAsync();

		/// <returns></returns>
		void ResetAllTimePeriods();

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProfileFilesAsync(Int32 ressourceId);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		List<UploadedFile> GetProfileFiles(Int32 ressourceId);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveProfileAsync(ProfileUser profile);

		/// <returns></returns>
		UpdateResultMultiErrorSuccess SaveProfile(ProfileUser profile);

		/// <param name="ressourceId">USer to add notification to. (Optional)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddCustomNotificationAsync(Int32 ressourceId,List<BaseBeeyeTrigger> triggers);

		/// <param name="ressourceId">USer to add notification to. (Optional)</param>
		/// <returns></returns>
		UpdateResult AddCustomNotification(Int32 ressourceId,List<BaseBeeyeTrigger> triggers);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCountriesAsync();

		/// <returns></returns>
		IDictionary<String, String> GetCountries();

		/// <param name="country"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTimeZonesAsync(String country);

		/// <param name="country"></param>
		/// <returns></returns>
		IDictionary<String, String> GetTimeZones(String country);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCountryFromTimeZoneAsync(String timeZone);

		/// <returns></returns>
		String GetCountryFromTimeZone(String timeZone);
				
	}
	
	public partial interface IWebHooksClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleWebHooksAsync();

		/// <returns></returns>
		List<BeeyeWebHook> GetAvalibleWebHooks();


		/// <returns></returns>
		Task<HttpResponseMessage> GetActiveWebHooksAsync();

		/// <returns></returns>
		List<ActiveBeeyeWebHook> GetActiveWebHooks();


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateWebHooksAsync(List<ActiveBeeyeWebHook> activeHooks);

		/// <returns></returns>
		UpdateResult UpdateWebHooks(List<ActiveBeeyeWebHook> activeHooks);

		/// <param name="companyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSystemWebHooksAsync(Nullable<Int32> companyId);

		/// <param name="companyId"></param>
		/// <returns></returns>
		List<ActiveBeeyeWebHook> GetSystemWebHooks(Nullable<Int32> companyId);

		/// <param name="id"></param>
		/// <param name="companyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateSystemWebHookAsync(Guid id,Nullable<Int32> companyId,ActiveBeeyeWebHook webHookUpdate);

		/// <param name="id"></param>
		/// <param name="companyId"></param>
		/// <returns></returns>
		ActiveBeeyeWebHook UpdateSystemWebHook(Guid id,Nullable<Int32> companyId,ActiveBeeyeWebHook webHookUpdate);

		/// <param name="id"></param>
		/// <param name="companyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSystemWebHookAsync(Guid id,Nullable<Int32> companyId);

		/// <param name="id"></param>
		/// <param name="companyId"></param>
		/// <returns></returns>
		void DeleteSystemWebHook(Guid id,Nullable<Int32> companyId);

		/// <param name="companyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddSystemWebHookAsync(Nullable<Int32> companyId,ActiveBeeyeWebHook beeyeWebHook);

		/// <param name="companyId"></param>
		/// <returns></returns>
		ActiveBeeyeWebHook AddSystemWebHook(Nullable<Int32> companyId,ActiveBeeyeWebHook beeyeWebHook);
				
	}

}
#endregion

#region Clients
namespace WebApi.Proxies.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.MyWebApiProxyBaseAddress)
			};
		}
		
		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
			var content = response.Content.ReadAsStringAsync().Result;
			throw new WebApiProxyResponseException(response.StatusCode, content);			
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.MyWebApiProxyBaseAddress)
			};
		}

		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString());
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// Helper class to access all clients at once
	/// </summary>
	public partial class WebApiClients
	{
		public ActivitiesClient Activities { get; private set; }
		public ActivityFamiliesClient ActivityFamilies { get; private set; }
		public ActivityScenariosClient ActivityScenarios { get; private set; }
		public ApiRawDataClient ApiRawData { get; private set; }
		public BeeyeAIClient BeeyeAI { get; private set; }
		public BillingClient Billing { get; private set; }
		public ClientsManagmentClient ClientsManagment { get; private set; }
		public CompanyClient Company { get; private set; }
		public ConfigTaskClient ConfigTask { get; private set; }
		public ConflictsClient Conflicts { get; private set; }
		public CustomFieldsClient CustomFields { get; private set; }
		public DataSharingClient DataSharing { get; private set; }
		public DirectionsClient Directions { get; private set; }
		public EmployesClient Employes { get; private set; }
		public ExpensesClient Expenses { get; private set; }
		public ExportsClient Exports { get; private set; }
		public FastPlanningClient FastPlanning { get; private set; }
		public FeesClient Fees { get; private set; }
		public FormClient Form { get; private set; }
		public HelperWebClient HelperWeb { get; private set; }
		public HumanRessourcesClient HumanRessources { get; private set; }
		public ImportsClient Imports { get; private set; }
		public IntegrationsClient Integrations { get; private set; }
		public InvoicesClient Invoices { get; private set; }
		public KpiClient Kpi { get; private set; }
		public LoginClient Login { get; private set; }
		public MobileAuthClient MobileAuth { get; private set; }
		public NotificationClient Notification { get; private set; }
		public PlanningClient Planning { get; private set; }
		public PlanningByTasksClient PlanningByTasks { get; private set; }
		public ProfileImageClient ProfileImage { get; private set; }
		public ProjectManagementClient ProjectManagement { get; private set; }
		public ProjectStatesClient ProjectStates { get; private set; }
		public ProjectSurveyClient ProjectSurvey { get; private set; }
		public ProjectTemplateClient ProjectTemplate { get; private set; }
		public ProjectTypeClient ProjectType { get; private set; }
		public RapportsClient Rapports { get; private set; }
		public RealTimesClient RealTimes { get; private set; }
		public RessourceClient Ressource { get; private set; }
		public RolesManagementClient RolesManagement { get; private set; }
		public SearchClient Search { get; private set; }
		public SignupClient Signup { get; private set; }
		public StatisticsClient Statistics { get; private set; }
		public TasksClient Tasks { get; private set; }
		public TimesheetsClient Timesheets { get; private set; }
		public TranslationsClient Translations { get; private set; }
		public UserProfileClient UserProfile { get; private set; }
		public WebHooksClient WebHooks { get; private set; }
		
        protected IEnumerable<Interfaces.IClientBase> Clients
        {
            get
            {
				yield return Activities;
				yield return ActivityFamilies;
				yield return ActivityScenarios;
				yield return ApiRawData;
				yield return BeeyeAI;
				yield return Billing;
				yield return ClientsManagment;
				yield return Company;
				yield return ConfigTask;
				yield return Conflicts;
				yield return CustomFields;
				yield return DataSharing;
				yield return Directions;
				yield return Employes;
				yield return Expenses;
				yield return Exports;
				yield return FastPlanning;
				yield return Fees;
				yield return Form;
				yield return HelperWeb;
				yield return HumanRessources;
				yield return Imports;
				yield return Integrations;
				yield return Invoices;
				yield return Kpi;
				yield return Login;
				yield return MobileAuth;
				yield return Notification;
				yield return Planning;
				yield return PlanningByTasks;
				yield return ProfileImage;
				yield return ProjectManagement;
				yield return ProjectStates;
				yield return ProjectSurvey;
				yield return ProjectTemplate;
				yield return ProjectType;
				yield return Rapports;
				yield return RealTimes;
				yield return Ressource;
				yield return RolesManagement;
				yield return Search;
				yield return Signup;
				yield return Statistics;
				yield return Tasks;
				yield return Timesheets;
				yield return Translations;
				yield return UserProfile;
				yield return WebHooks;
            }
        }

		public WebApiClients(Uri baseAddress = null)
		{
            if (baseAddress != null)
                Configuration.MyWebApiProxyBaseAddress = baseAddress.AbsoluteUri;

			Activities = new ActivitiesClient();
			ActivityFamilies = new ActivityFamiliesClient();
			ActivityScenarios = new ActivityScenariosClient();
			ApiRawData = new ApiRawDataClient();
			BeeyeAI = new BeeyeAIClient();
			Billing = new BillingClient();
			ClientsManagment = new ClientsManagmentClient();
			Company = new CompanyClient();
			ConfigTask = new ConfigTaskClient();
			Conflicts = new ConflictsClient();
			CustomFields = new CustomFieldsClient();
			DataSharing = new DataSharingClient();
			Directions = new DirectionsClient();
			Employes = new EmployesClient();
			Expenses = new ExpensesClient();
			Exports = new ExportsClient();
			FastPlanning = new FastPlanningClient();
			Fees = new FeesClient();
			Form = new FormClient();
			HelperWeb = new HelperWebClient();
			HumanRessources = new HumanRessourcesClient();
			Imports = new ImportsClient();
			Integrations = new IntegrationsClient();
			Invoices = new InvoicesClient();
			Kpi = new KpiClient();
			Login = new LoginClient();
			MobileAuth = new MobileAuthClient();
			Notification = new NotificationClient();
			Planning = new PlanningClient();
			PlanningByTasks = new PlanningByTasksClient();
			ProfileImage = new ProfileImageClient();
			ProjectManagement = new ProjectManagementClient();
			ProjectStates = new ProjectStatesClient();
			ProjectSurvey = new ProjectSurveyClient();
			ProjectTemplate = new ProjectTemplateClient();
			ProjectType = new ProjectTypeClient();
			Rapports = new RapportsClient();
			RealTimes = new RealTimesClient();
			Ressource = new RessourceClient();
			RolesManagement = new RolesManagementClient();
			Search = new SearchClient();
			Signup = new SignupClient();
			Statistics = new StatisticsClient();
			Tasks = new TasksClient();
			Timesheets = new TimesheetsClient();
			Translations = new TranslationsClient();
			UserProfile = new UserProfileClient();
			WebHooks = new WebHooksClient();
		}

        public void SetAuthentication(AuthenticationHeaderValue auth)
        {
            foreach (var client in Clients)
                client.HttpClient.DefaultRequestHeaders.Authorization = auth;
        }
		
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var client in Clients)
                    client.Dispose();
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

		~WebApiClients() 
		{
            Dispose(false);
		}
	}

	/// <summary>
	/// Manages company activities
		/// An activity can be imported as a task on any project in a company.
	/// </summary>
	public partial class ActivitiesClient : ClientBase, Interfaces.IActivitiesClient
	{		

		/// <summary>
		/// Manages company activities
		/// An activity can be imported as a task on any project in a company.
		/// </summary>
		public ActivitiesClient() : base()
		{
		}

		/// <summary>
		/// Manages company activities
		/// An activity can be imported as a task on any project in a company.
		/// </summary>
		public ActivitiesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Adds or updates a list of activities
		/// </summary>
		/// <param name="activities"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateMultipleActivitiesAsyncMsg(List<ApiActivity> activities)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiActivity>>("multiples", activities);
		}

		/// <summary>
		/// Adds or updates a list of activities
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateMultipleActivitiesAsync(List<ApiActivity> activities)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiActivity>>("multiples", activities);
		}

		/// <summary>
		/// Adds or updates a list of activities
		/// </summary>
		public virtual UpdateResultWithId AddOrUpdateMultipleActivities(List<ApiActivity> activities)
		{
			var result = Task.Run(() => AddOrUpdateMultipleActivitiesAsyncMsg(activities)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns a list of activities
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetListAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/activities");
		}

		/// <summary>
		/// Returns a list of activities
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetListAsync()
		{
			return await HttpClient.GetAsync("api/v1/activities");
		}

		/// <summary>
		/// Returns a list of activities
		/// </summary>
		public virtual List<ApiActivity> GetList()
		{
			var result = Task.Run(() => GetListAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ApiActivity>>().Result;
			 		}

		/// <summary>
		/// Returns ONE activity by Id
		/// </summary>
		/// <param name="activityId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetOneAsyncMsg(Guid activityId)
		{
			return await HttpClient.GetAsync("api/v1/activities?activityId=" + activityId);
		}

		/// <summary>
		/// Returns ONE activity by Id
		/// </summary>
		/// <param name="activityId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOneAsync(Guid activityId)
		{
			return await HttpClient.GetAsync("api/v1/activities?activityId=" + activityId);
		}

		/// <summary>
		/// Returns ONE activity by Id
		/// </summary>
		/// <param name="activityId"></param>
		public virtual ApiActivity GetOne(Guid activityId)
		{
			var result = Task.Run(() => GetOneAsyncMsg(activityId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ApiActivity>().Result;
			 		}

		/// <summary>
		/// Adds or updates an activity
		/// </summary>
		/// <param name="activity"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateActivityAsyncMsg(ApiActivity activity)
		{
			return await HttpClient.PostAsJsonAsync<ApiActivity>("api/v1/activities", activity);
		}

		/// <summary>
		/// Adds or updates an activity
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateActivityAsync(ApiActivity activity)
		{
			return await HttpClient.PostAsJsonAsync<ApiActivity>("api/v1/activities", activity);
		}

		/// <summary>
		/// Adds or updates an activity
		/// </summary>
		public virtual UpdateResultWithId AddOrUpdateActivity(ApiActivity activity)
		{
			var result = Task.Run(() => AddOrUpdateActivityAsyncMsg(activity)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Deletes one activity by Id
		/// </summary>
		/// <param name="activityId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteActivityAsyncMsg(Guid activityId)
		{
			return await HttpClient.DeleteAsync("api/v1/activities?activityId=" + activityId);
		}

		/// <summary>
		/// Deletes one activity by Id
		/// </summary>
		/// <param name="activityId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteActivityAsync(Guid activityId)
		{
			return await HttpClient.DeleteAsync("api/v1/activities?activityId=" + activityId);
		}

		/// <summary>
		/// Deletes one activity by Id
		/// </summary>
		/// <param name="activityId"></param>
		public virtual UpdateResult DeleteActivity(Guid activityId)
		{
			var result = Task.Run(() => DeleteActivityAsyncMsg(activityId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Aloows managment of activity famillies
	/// </summary>
	public partial class ActivityFamiliesClient : ClientBase, Interfaces.IActivityFamiliesClient
	{		

		/// <summary>
		/// Aloows managment of activity famillies
		/// </summary>
		public ActivityFamiliesClient() : base()
		{
		}

		/// <summary>
		/// Aloows managment of activity famillies
		/// </summary>
		public ActivityFamiliesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Returns a list of all activity families 
		/// Does not include activities
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetListAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/activityFamily");
		}

		/// <summary>
		/// Returns a list of all activity families 
		/// Does not include activities
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetListAsync()
		{
			return await HttpClient.GetAsync("api/v1/activityFamily");
		}

		/// <summary>
		/// Returns a list of all activity families 
		/// Does not include activities
		/// </summary>
		public virtual List<ApiActivityFamily> GetList()
		{
			var result = Task.Run(() => GetListAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ApiActivityFamily>>().Result;
			 		}

		/// <summary>
		/// Returns a list of all activity famillies 
		/// Include activities
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetListWithActivitiesAsyncMsg()
		{
			return await HttpClient.GetAsync("withActivities");
		}

		/// <summary>
		/// Returns a list of all activity famillies 
		/// Include activities
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetListWithActivitiesAsync()
		{
			return await HttpClient.GetAsync("withActivities");
		}

		/// <summary>
		/// Returns a list of all activity famillies 
		/// Include activities
		/// </summary>
		public virtual List<ApiActivityFamily> GetListWithActivities()
		{
			var result = Task.Run(() => GetListWithActivitiesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ApiActivityFamily>>().Result;
			 		}

		/// <summary>
		/// Returns a list of all activity famillies 
		/// Include activities
		/// Excluded activcities already presents in a given project
		/// retrun nothing when you dont have the access to add task to a project to a famillies
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetListWithActivitiesByProjectidAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("withActivities/" + projectId);
		}

		/// <summary>
		/// Returns a list of all activity famillies 
		/// Include activities
		/// Excluded activcities already presents in a given project
		/// retrun nothing when you dont have the access to add task to a project to a famillies
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetListWithActivitiesByProjectidAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("withActivities/" + projectId);
		}

		/// <summary>
		/// Returns a list of all activity famillies 
		/// Include activities
		/// Excluded activcities already presents in a given project
		/// retrun nothing when you dont have the access to add task to a project to a famillies
		/// </summary>
		/// <param name="projectId"></param>
		public virtual List<ApiActivityFamily> GetListWithActivitiesByProjectid(Int32 projectId)
		{
			var result = Task.Run(() => GetListWithActivitiesByProjectidAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ApiActivityFamily>>().Result;
			 		}

		/// <summary>
		/// Returns an activity family 
		/// Include activities
		/// </summary>
		/// <param name="familyId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetListWithActivitiesByfamilyIdAsyncMsg(Guid familyId)
		{
			return await HttpClient.GetAsync("familyWithActivities/" + familyId);
		}

		/// <summary>
		/// Returns an activity family 
		/// Include activities
		/// </summary>
		/// <param name="familyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetListWithActivitiesByfamilyIdAsync(Guid familyId)
		{
			return await HttpClient.GetAsync("familyWithActivities/" + familyId);
		}

		/// <summary>
		/// Returns an activity family 
		/// Include activities
		/// </summary>
		/// <param name="familyId"></param>
		public virtual ApiActivityFamily GetListWithActivitiesByfamilyId(Guid familyId)
		{
			var result = Task.Run(() => GetListWithActivitiesByfamilyIdAsyncMsg(familyId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ApiActivityFamily>().Result;
			 		}

		/// <summary>
		/// Insert or update multiple activity families.
		/// </summary>
		/// <param name="apiActivityFamilies"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrEditFamiliesAsyncMsg(List<ApiActivityFamily> apiActivityFamilies)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiActivityFamily>>("multiple", apiActivityFamilies);
		}

		/// <summary>
		/// Insert or update multiple activity families.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrEditFamiliesAsync(List<ApiActivityFamily> apiActivityFamilies)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiActivityFamily>>("multiple", apiActivityFamilies);
		}

		/// <summary>
		/// Insert or update multiple activity families.
		/// </summary>
		public virtual UpdateResultWithId AddOrEditFamilies(List<ApiActivityFamily> apiActivityFamilies)
		{
			var result = Task.Run(() => AddOrEditFamiliesAsyncMsg(apiActivityFamilies)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns one activity familly matching provided Id
		/// </summary>
		/// <param name="activityFamilyId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetListByActivityfamilyidAsyncMsg(Guid activityFamilyId)
		{
			return await HttpClient.GetAsync("api/ActivityFamilies?activityFamilyId=" + activityFamilyId);
		}

		/// <summary>
		/// Returns one activity familly matching provided Id
		/// </summary>
		/// <param name="activityFamilyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetListByActivityfamilyidAsync(Guid activityFamilyId)
		{
			return await HttpClient.GetAsync("api/ActivityFamilies?activityFamilyId=" + activityFamilyId);
		}

		/// <summary>
		/// Returns one activity familly matching provided Id
		/// </summary>
		/// <param name="activityFamilyId"></param>
		public virtual ApiActivityFamily GetListByActivityfamilyid(Guid activityFamilyId)
		{
			var result = Task.Run(() => GetListByActivityfamilyidAsyncMsg(activityFamilyId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ApiActivityFamily>().Result;
			 		}

		/// <summary>
		/// Creates a new activity family
		/// If the list of activities is provided, they will be automaticlly added
		/// </summary>
		/// <param name="apiActivityFamily"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddFamilyAsyncMsg(ApiActivityFamily apiActivityFamily)
		{
			return await HttpClient.PostAsJsonAsync<ApiActivityFamily>("api/ActivityFamilies", apiActivityFamily);
		}

		/// <summary>
		/// Creates a new activity family
		/// If the list of activities is provided, they will be automaticlly added
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddFamilyAsync(ApiActivityFamily apiActivityFamily)
		{
			return await HttpClient.PostAsJsonAsync<ApiActivityFamily>("api/ActivityFamilies", apiActivityFamily);
		}

		/// <summary>
		/// Creates a new activity family
		/// If the list of activities is provided, they will be automaticlly added
		/// </summary>
		public virtual UpdateResultWithId AddFamily(ApiActivityFamily apiActivityFamily)
		{
			var result = Task.Run(() => AddFamilyAsyncMsg(apiActivityFamily)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="apiActivityFamily"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateActivityFamilyAsyncMsg(Guid id,ApiActivityFamily apiActivityFamily)
		{
			return await HttpClient.PutAsJsonAsync<ApiActivityFamily>("api/ActivityFamilies/" + id, apiActivityFamily);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateActivityFamilyAsync(Guid id,ApiActivityFamily apiActivityFamily)
		{
			return await HttpClient.PutAsJsonAsync<ApiActivityFamily>("api/ActivityFamilies/" + id, apiActivityFamily);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult UpdateActivityFamily(Guid id,ApiActivityFamily apiActivityFamily)
		{
			var result = Task.Run(() => UpdateActivityFamilyAsyncMsg(id, apiActivityFamily)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deletes a family with all activities
		/// </summary>
		/// <param name="familyGuid"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteActivityFamilyAsyncMsg(Guid familyGuid)
		{
			return await HttpClient.DeleteAsync("api/ActivityFamilies?familyGuid=" + familyGuid);
		}

		/// <summary>
		/// Deletes a family with all activities
		/// </summary>
		/// <param name="familyGuid"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteActivityFamilyAsync(Guid familyGuid)
		{
			return await HttpClient.DeleteAsync("api/ActivityFamilies?familyGuid=" + familyGuid);
		}

		/// <summary>
		/// Deletes a family with all activities
		/// </summary>
		/// <param name="familyGuid"></param>
		public virtual UpdateResult DeleteActivityFamily(Guid familyGuid)
		{
			var result = Task.Run(() => DeleteActivityFamilyAsyncMsg(familyGuid)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update the activity order display
		/// </summary>
		/// <param name="familyGuid"></param>
		/// <param name="orders"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateActivityOrderAsyncMsg(Guid familyGuid,List<Guid> orders)
		{
			return await HttpClient.PostAsJsonAsync<List<Guid>>("api/ActivityFamilies?familyGuid=" + familyGuid, orders);
		}

		/// <summary>
		/// Update the activity order display
		/// </summary>
		/// <param name="familyGuid"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateActivityOrderAsync(Guid familyGuid,List<Guid> orders)
		{
			return await HttpClient.PostAsJsonAsync<List<Guid>>("api/ActivityFamilies?familyGuid=" + familyGuid, orders);
		}

		/// <summary>
		/// Update the activity order display
		/// </summary>
		/// <param name="familyGuid"></param>
		public virtual UpdateResult UpdateActivityOrder(Guid familyGuid,List<Guid> orders)
		{
			var result = Task.Run(() => UpdateActivityOrderAsyncMsg(familyGuid, orders)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityScenariosClient : ClientBase, Interfaces.IActivityScenariosClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ActivityScenariosClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ActivityScenariosClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ListAsyncMsg(Guid activityId)
		{
			return await HttpClient.GetAsync("api/v1/activities/" + activityId + "/scenarios");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ListAsync(Guid activityId)
		{
			return await HttpClient.GetAsync("api/v1/activities/" + activityId + "/scenarios");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		public virtual List<ActivityScenario> List(Guid activityId)
		{
			var result = Task.Run(() => ListAsyncMsg(activityId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ActivityScenario>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <param name="activityScenario"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> InsertAsyncMsg(Guid activityId,ActivityScenario activityScenario)
		{
			return await HttpClient.PostAsJsonAsync<ActivityScenario>("api/v1/activities/" + activityId + "/scenarios", activityScenario);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> InsertAsync(Guid activityId,ActivityScenario activityScenario)
		{
			return await HttpClient.PostAsJsonAsync<ActivityScenario>("api/v1/activities/" + activityId + "/scenarios", activityScenario);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		public virtual ActivityScenario Insert(Guid activityId,ActivityScenario activityScenario)
		{
			var result = Task.Run(() => InsertAsyncMsg(activityId, activityScenario)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ActivityScenario>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>
		/// <param name="activityScenario"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateAsyncMsg(Guid activityId,Guid activityScenarioId,ActivityScenario activityScenario)
		{
			return await HttpClient.PutAsJsonAsync<ActivityScenario>("api/v1/activities/" + activityId + "/scenarios/" + activityScenarioId, activityScenario);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateAsync(Guid activityId,Guid activityScenarioId,ActivityScenario activityScenario)
		{
			return await HttpClient.PutAsJsonAsync<ActivityScenario>("api/v1/activities/" + activityId + "/scenarios/" + activityScenarioId, activityScenario);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>
		public virtual ActivityScenario Update(Guid activityId,Guid activityScenarioId,ActivityScenario activityScenario)
		{
			var result = Task.Run(() => UpdateAsyncMsg(activityId, activityScenarioId, activityScenario)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ActivityScenario>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteAsyncMsg(Guid activityId,Guid activityScenarioId)
		{
			return await HttpClient.DeleteAsync("api/v1/activities/" + activityId + "/scenarios/" + activityScenarioId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteAsync(Guid activityId,Guid activityScenarioId)
		{
			return await HttpClient.DeleteAsync("api/v1/activities/" + activityId + "/scenarios/" + activityScenarioId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="activityId"></param>
		/// <param name="activityScenarioId"></param>
		public virtual ActivityScenario Delete(Guid activityId,Guid activityScenarioId)
		{
			var result = Task.Run(() => DeleteAsyncMsg(activityId, activityScenarioId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ActivityScenario>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Controller for getting raw data.
		/// no checks are performed, except autentification and acess level
		/// Only basic filtering is supported
		/// Only users with following requirement can use it :
		/// Company view,
		/// Acess to project managment for projects
		/// Full planification acess for plannings
		/// Full timesheet acess for real times
	/// </summary>
	public partial class ApiRawDataClient : ClientBase, Interfaces.IApiRawDataClient
	{		

		/// <summary>
		/// Controller for getting raw data.
		/// no checks are performed, except autentification and acess level
		/// Only basic filtering is supported
		/// Only users with following requirement can use it :
		/// Company view,
		/// Acess to project managment for projects
		/// Full planification acess for plannings
		/// Full timesheet acess for real times
		/// </summary>
		public ApiRawDataClient() : base()
		{
		}

		/// <summary>
		/// Controller for getting raw data.
		/// no checks are performed, except autentification and acess level
		/// Only basic filtering is supported
		/// Only users with following requirement can use it :
		/// Company view,
		/// Acess to project managment for projects
		/// Full planification acess for plannings
		/// Full timesheet acess for real times
		/// </summary>
		public ApiRawDataClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Only considers task plannings
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllPlanningsAsyncMsg(DatesRangeRequest<Object> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/rawData/plannings", data);
		}

		/// <summary>
		/// Only considers task plannings
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllPlanningsAsync(DatesRangeRequest<Object> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/rawData/plannings", data);
		}

		/// <summary>
		/// Only considers task plannings
		/// </summary>
		public virtual List<PlanningTimeLine> GetAllPlannings(DatesRangeRequest<Object> data)
		{
			var result = Task.Run(() => GetAllPlanningsAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<PlanningTimeLine>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class BeeyeAIClient : ClientBase, Interfaces.IBeeyeAIClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public BeeyeAIClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public BeeyeAIClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SuggestTop5RessourcesAsyncMsg(DatesRangeFilteredRequestPagination<RecommendationRequest> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<RecommendationRequest>>("api/BeeyeAI", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SuggestTop5RessourcesAsync(DatesRangeFilteredRequestPagination<RecommendationRequest> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<RecommendationRequest>>("api/BeeyeAI", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<EmployeJS__> SuggestTop5Ressources(DatesRangeFilteredRequestPagination<RecommendationRequest> request)
		{
			var result = Task.Run(() => SuggestTop5RessourcesAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class BillingClient : ClientBase, Interfaces.IBillingClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public BillingClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public BillingClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// returns list of avalible addons.
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleAddonsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/billing/addons");
		}

		/// <summary>
		/// returns list of avalible addons.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleAddonsAsync()
		{
			return await HttpClient.GetAsync("api/v1/billing/addons");
		}

		/// <summary>
		/// returns list of avalible addons.
		/// </summary>
		public virtual List<ChargeBeeAddon> GetAvalibleAddons()
		{
			var result = Task.Run(() => GetAvalibleAddonsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ChargeBeeAddon>>().Result;
			 		}

		/// <summary>
		/// Change Address
		/// </summary>
		/// <param name="adresssInfo"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeAddressAsyncMsg(InvoiceDetails adresssInfo)
		{
			return await HttpClient.PostAsJsonAsync<InvoiceDetails>("api/v1/billing/changeAddress", adresssInfo);
		}

		/// <summary>
		/// Change Address
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeAddressAsync(InvoiceDetails adresssInfo)
		{
			return await HttpClient.PostAsJsonAsync<InvoiceDetails>("api/v1/billing/changeAddress", adresssInfo);
		}

		/// <summary>
		/// Change Address
		/// </summary>
		public virtual UpdateResult ChangeAddress(InvoiceDetails adresssInfo)
		{
			var result = Task.Run(() => ChangeAddressAsyncMsg(adresssInfo)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Adds addon for user
		/// </summary>
		/// <param name="addon"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddAddonAsyncMsg(ChargeBeeAddon addon)
		{
			return await HttpClient.PostAsJsonAsync<ChargeBeeAddon>("api/v1/billing/addAddon", addon);
		}

		/// <summary>
		/// Adds addon for user
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddAddonAsync(ChargeBeeAddon addon)
		{
			return await HttpClient.PostAsJsonAsync<ChargeBeeAddon>("api/v1/billing/addAddon", addon);
		}

		/// <summary>
		/// Adds addon for user
		/// </summary>
		public virtual UpdateResult AddAddon(ChargeBeeAddon addon)
		{
			var result = Task.Run(() => AddAddonAsyncMsg(addon)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates users having billin acess. User needs to be active and not virtual
		/// </summary>
		/// <param name="users">List of user Ids</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateUsersForBillingAsyncMsg(List<Int32> users)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/billing/billing/users/update", users);
		}

		/// <summary>
		/// Updates users having billin acess. User needs to be active and not virtual
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateUsersForBillingAsync(List<Int32> users)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/billing/billing/users/update", users);
		}

		/// <summary>
		/// Updates users having billin acess. User needs to be active and not virtual
		/// </summary>
		public virtual UpdateResult UpdateUsersForBilling(List<Int32> users)
		{
			var result = Task.Run(() => UpdateUsersForBillingAsyncMsg(users)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Retuens list of users havinf acess to billing page
		/// The company responsible always has acess
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsersWithBillingAcessAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/billing/billing/users");
		}

		/// <summary>
		/// Retuens list of users havinf acess to billing page
		/// The company responsible always has acess
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsersWithBillingAcessAsync()
		{
			return await HttpClient.GetAsync("api/v1/billing/billing/users");
		}

		/// <summary>
		/// Retuens list of users havinf acess to billing page
		/// The company responsible always has acess
		/// </summary>
		public virtual List<EmployeJS__> GetUsersWithBillingAcess()
		{
			var result = Task.Run(() => GetUsersWithBillingAcessAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="addon"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RemoveAddonAsyncMsg(ChargeBeeAddon addon)
		{
			return await HttpClient.PostAsJsonAsync<ChargeBeeAddon>("api/v1/billing/billing/addons/remove", addon);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveAddonAsync(ChargeBeeAddon addon)
		{
			return await HttpClient.PostAsJsonAsync<ChargeBeeAddon>("api/v1/billing/billing/addons/remove", addon);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult RemoveAddon(ChargeBeeAddon addon)
		{
			var result = Task.Run(() => RemoveAddonAsyncMsg(addon)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetBillingInfosAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/billing/billingInfos");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBillingInfosAsync()
		{
			return await HttpClient.GetAsync("api/v1/billing/billingInfos");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual ClientBilingInfos GetBillingInfos()
		{
			var result = Task.Run(() => GetBillingInfosAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ClientBilingInfos>().Result;
			 		}

		/// <summary>
		/// Changes user's credit card information
		/// </summary>
		/// <param name="card"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddCreditCardAsyncMsg(CreditCardInfo card)
		{
			return await HttpClient.PostAsJsonAsync<CreditCardInfo>("api/v1/billing/addCard", card);
		}

		/// <summary>
		/// Changes user's credit card information
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddCreditCardAsync(CreditCardInfo card)
		{
			return await HttpClient.PostAsJsonAsync<CreditCardInfo>("api/v1/billing/addCard", card);
		}

		/// <summary>
		/// Changes user's credit card information
		/// </summary>
		public virtual UpdateResult AddCreditCard(CreditCardInfo card)
		{
			var result = Task.Run(() => AddCreditCardAsyncMsg(card)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLastInvoicesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/billing/invoices");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLastInvoicesAsync()
		{
			return await HttpClient.GetAsync("api/v1/billing/invoices");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<Invoiced> GetLastInvoices()
		{
			var result = Task.Run(() => GetLastInvoicesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Invoiced>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ClientsManagmentClient : ClientBase, Interfaces.IClientsManagmentClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ClientsManagmentClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ClientsManagmentClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="clientId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadClientDocumentAsyncMsg(Int32 clientId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/clients/UploadClientDocument/" + clientId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="clientId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadClientDocumentAsync(Int32 clientId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/clients/UploadClientDocument/" + clientId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="clientId"></param>
		public virtual UpdateResultWithId UploadClientDocument(Int32 clientId)
		{
			var result = Task.Run(() => UploadClientDocumentAsyncMsg(clientId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="clientId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDocumentsForClientAsyncMsg(Int32 clientId)
		{
			return await HttpClient.GetAsync("api/v1/clients/files/" + clientId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="clientId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDocumentsForClientAsync(Int32 clientId)
		{
			return await HttpClient.GetAsync("api/v1/clients/files/" + clientId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="clientId"></param>
		public virtual List<UploadedFile> GetDocumentsForClient(Int32 clientId)
		{
			var result = Task.Run(() => GetDocumentsForClientAsyncMsg(clientId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UploadedFile>>().Result;
			 		}

		/// <summary>
		/// Reactive archived client
		/// </summary>
		/// <param name="clientId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReactivateClientAsyncMsg(Int32 clientId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/clients/Reactivate/" + clientId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Reactive archived client
		/// </summary>
		/// <param name="clientId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReactivateClientAsync(Int32 clientId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/clients/Reactivate/" + clientId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Reactive archived client
		/// </summary>
		/// <param name="clientId"></param>
		public virtual UpdateResult ReactivateClient(Int32 clientId)
		{
			var result = Task.Run(() => ReactivateClientAsyncMsg(clientId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get list of client with filter
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetClientsListFilterAsyncMsg(DatesRangeFilteredRequest<Boolean> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/clients/GetClientsListFilter", data);
		}

		/// <summary>
		/// Get list of client with filter
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClientsListFilterAsync(DatesRangeFilteredRequest<Boolean> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/clients/GetClientsListFilter", data);
		}

		/// <summary>
		/// Get list of client with filter
		/// </summary>
		public virtual List<Client> GetClientsListFilter(DatesRangeFilteredRequest<Boolean> data)
		{
			var result = Task.Run(() => GetClientsListFilterAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Client>>().Result;
			 		}

		/// <summary>
		/// Used to get the list of all clients with all relative data.
		/// If user doesn't have complete license, only names are returned
		/// </summary>
		/// <param name="takeDeleted">Display archived clients</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetClientsListAsyncMsg(Boolean takeDeleted)
		{
			return await HttpClient.GetAsync("api/v1/clients/GetClientsList/" + takeDeleted);
		}

		/// <summary>
		/// Used to get the list of all clients with all relative data.
		/// If user doesn't have complete license, only names are returned
		/// </summary>
		/// <param name="takeDeleted">Display archived clients</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClientsListAsync(Boolean takeDeleted)
		{
			return await HttpClient.GetAsync("api/v1/clients/GetClientsList/" + takeDeleted);
		}

		/// <summary>
		/// Used to get the list of all clients with all relative data.
		/// If user doesn't have complete license, only names are returned
		/// </summary>
		/// <param name="takeDeleted">Display archived clients</param>
		public virtual List<Client> GetClientsList(Boolean takeDeleted)
		{
			var result = Task.Run(() => GetClientsListAsyncMsg(takeDeleted)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Client>>().Result;
			 		}

		/// <summary>
		/// Getting information on 1 client by ID
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetClientByIdAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/clients/GetClient?id=" + id);
		}

		/// <summary>
		/// Getting information on 1 client by ID
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClientByIdAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/clients/GetClient?id=" + id);
		}

		/// <summary>
		/// Getting information on 1 client by ID
		/// </summary>
		/// <param name="id"></param>
		public virtual Client GetClientById(Int32 id)
		{
			var result = Task.Run(() => GetClientByIdAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Client>().Result;
			 		}

		/// <summary>
		/// Adding new client
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateClientAsyncMsg(Client value)
		{
			return await HttpClient.PostAsJsonAsync<Client>("api/v1/clients/CreateClient", value);
		}

		/// <summary>
		/// Adding new client
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateClientAsync(Client value)
		{
			return await HttpClient.PostAsJsonAsync<Client>("api/v1/clients/CreateClient", value);
		}

		/// <summary>
		/// Adding new client
		/// </summary>
		public virtual UpdateResultWithId CreateClient(Client value)
		{
			var result = Task.Run(() => CreateClientAsyncMsg(value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Update list of clients information
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateListClientAsyncMsg(RequestSelectedBulkAction data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedBulkAction>("api/v1/clients/UpdateListClient", data);
		}

		/// <summary>
		/// Update list of clients information
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateListClientAsync(RequestSelectedBulkAction data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedBulkAction>("api/v1/clients/UpdateListClient", data);
		}

		/// <summary>
		/// Update list of clients information
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess UpdateListClient(RequestSelectedBulkAction data)
		{
			var result = Task.Run(() => UpdateListClientAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Update information on one client
		/// </summary>
		/// <param name="id"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateClientAsyncMsg(Int32 id,Client value)
		{
			return await HttpClient.PutAsJsonAsync<Client>("api/v1/clients/UpdateClient?id=" + id, value);
		}

		/// <summary>
		/// Update information on one client
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateClientAsync(Int32 id,Client value)
		{
			return await HttpClient.PutAsJsonAsync<Client>("api/v1/clients/UpdateClient?id=" + id, value);
		}

		/// <summary>
		/// Update information on one client
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult UpdateClient(Int32 id,Client value)
		{
			var result = Task.Run(() => UpdateClientAsyncMsg(id, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Delete multiple clients
		/// </summary>
		/// <param name="ids"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteMultipleClientsAsyncMsg(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/clients/DeleteMultipleClients", ids);
		}

		/// <summary>
		/// Delete multiple clients
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteMultipleClientsAsync(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/clients/DeleteMultipleClients", ids);
		}

		/// <summary>
		/// Delete multiple clients
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess DeleteMultipleClients(Int32[] ids)
		{
			var result = Task.Run(() => DeleteMultipleClientsAsyncMsg(ids)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Archive multiple clients
		/// </summary>
		/// <param name="ids"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ArchiveMultipleClientsAsyncMsg(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/clients/ArchiveMultipleClients", ids);
		}

		/// <summary>
		/// Archive multiple clients
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ArchiveMultipleClientsAsync(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/clients/ArchiveMultipleClients", ids);
		}

		/// <summary>
		/// Archive multiple clients
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess ArchiveMultipleClients(Int32[] ids)
		{
			var result = Task.Run(() => ArchiveMultipleClientsAsyncMsg(ids)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Unarchive multiple clients
		/// </summary>
		/// <param name="ids"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReactivateMultipleClientsAsyncMsg(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/clients/ReactivateMultipleClients", ids);
		}

		/// <summary>
		/// Unarchive multiple clients
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReactivateMultipleClientsAsync(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/clients/ReactivateMultipleClients", ids);
		}

		/// <summary>
		/// Unarchive multiple clients
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess ReactivateMultipleClients(Int32[] ids)
		{
			var result = Task.Run(() => ReactivateMultipleClientsAsyncMsg(ids)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Archiving one client
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ArchiveClientAsyncMsg(Int32 id)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/clients/ArchiveClient?id=" + id, default(HttpResponseMessage));
		}

		/// <summary>
		/// Archiving one client
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ArchiveClientAsync(Int32 id)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/clients/ArchiveClient?id=" + id, default(HttpResponseMessage));
		}

		/// <summary>
		/// Archiving one client
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult ArchiveClient(Int32 id)
		{
			var result = Task.Run(() => ArchiveClientAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deleting one client
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteClientAsyncMsg(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/clients/DeleteClient?id=" + id);
		}

		/// <summary>
		/// Deleting one client
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteClientAsync(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/clients/DeleteClient?id=" + id);
		}

		/// <summary>
		/// Deleting one client
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult DeleteClient(Int32 id)
		{
			var result = Task.Run(() => DeleteClientAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Insert or update a list of clients
		/// </summary>
		/// <param name="clients">List of clients to insert or update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> InsertOrUpdateOldAsyncMsg(List<ApiClient> clients)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiClient>>("api/v1/clients/insertOrUpdate", clients);
		}

		/// <summary>
		/// Insert or update a list of clients
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> InsertOrUpdateOldAsync(List<ApiClient> clients)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiClient>>("api/v1/clients/insertOrUpdate", clients);
		}

		/// <summary>
		/// Insert or update a list of clients
		/// </summary>
		public virtual UpdateResultWithId InsertOrUpdateOld(List<ApiClient> clients)
		{
			var result = Task.Run(() => InsertOrUpdateOldAsyncMsg(clients)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Insert or update a list of clients
		/// </summary>
		/// <param name="clients">List of clients to insert or update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> InsertOrUpdateAsyncMsg(List<ApiClient> clients)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiClient>>("api/v2/clients/insertOrUpdate", clients);
		}

		/// <summary>
		/// Insert or update a list of clients
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> InsertOrUpdateAsync(List<ApiClient> clients)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiClient>>("api/v2/clients/insertOrUpdate", clients);
		}

		/// <summary>
		/// Insert or update a list of clients
		/// </summary>
		public virtual List<ResponseContainer<ApiClient>> InsertOrUpdate(List<ApiClient> clients)
		{
			var result = Task.Run(() => InsertOrUpdateAsyncMsg(clients)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ResponseContainer<ApiClient>>>().Result;
			 		}

		/// <summary>
		/// Retuens a list of customn fields for a client
		/// </summary>
		/// <param name="clientId"></param>
		/// <param name="getAllCustomField"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsForClientAsyncMsg(Int32 clientId,Boolean getAllCustomField)
		{
			return await HttpClient.GetAsync("api/v1/clients/GetCustomFieldsForClient/" + clientId + "/" + getAllCustomField);
		}

		/// <summary>
		/// Retuens a list of customn fields for a client
		/// </summary>
		/// <param name="clientId"></param>
		/// <param name="getAllCustomField"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsForClientAsync(Int32 clientId,Boolean getAllCustomField)
		{
			return await HttpClient.GetAsync("api/v1/clients/GetCustomFieldsForClient/" + clientId + "/" + getAllCustomField);
		}

		/// <summary>
		/// Retuens a list of customn fields for a client
		/// </summary>
		/// <param name="clientId"></param>
		/// <param name="getAllCustomField"></param>
		public virtual List<CustomFieldJs> GetCustomFieldsForClient(Int32 clientId,Boolean getAllCustomField)
		{
			var result = Task.Run(() => GetCustomFieldsForClientAsyncMsg(clientId, getAllCustomField)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class CompanyClient : ClientBase, Interfaces.ICompanyClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public CompanyClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public CompanyClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> LoginAsCompanyAsyncMsg(Int32 companyId)
		{
			return await HttpClient.GetAsync("api/company/loginas/" + companyId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LoginAsCompanyAsync(Int32 companyId)
		{
			return await HttpClient.GetAsync("api/company/loginas/" + companyId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		public virtual UpdateResult LoginAsCompany(Int32 companyId)
		{
			var result = Task.Run(() => LoginAsCompanyAsyncMsg(companyId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// change info on a resource
		/// </summary>
		/// <param name="resource">Resource to update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveUserAsyncMsg(EmployeJS__ resource)
		{
			return await HttpClient.PostAsJsonAsync<EmployeJS__>("api/company/saveUser", resource);
		}

		/// <summary>
		/// change info on a resource
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveUserAsync(EmployeJS__ resource)
		{
			return await HttpClient.PostAsJsonAsync<EmployeJS__>("api/company/saveUser", resource);
		}

		/// <summary>
		/// change info on a resource
		/// </summary>
		public virtual UpdateResult SaveUser(EmployeJS__ resource)
		{
			var result = Task.Run(() => SaveUserAsyncMsg(resource)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// change responsable of a compagnie
		/// </summary>
		/// <param name="UserId">new reposable id</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeCompagnyRespAsyncMsg(Int32 UserId)
		{
			return await HttpClient.PostAsJsonAsync("api/company/changeCompagnyResp?UserId=" + UserId, default(HttpResponseMessage));
		}

		/// <summary>
		/// change responsable of a compagnie
		/// </summary>
		/// <param name="UserId">new reposable id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeCompagnyRespAsync(Int32 UserId)
		{
			return await HttpClient.PostAsJsonAsync("api/company/changeCompagnyResp?UserId=" + UserId, default(HttpResponseMessage));
		}

		/// <summary>
		/// change responsable of a compagnie
		/// </summary>
		/// <param name="UserId">new reposable id</param>
		public virtual UpdateResult ChangeCompagnyResp(Int32 UserId)
		{
			var result = Task.Run(() => ChangeCompagnyRespAsyncMsg(UserId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// search in all resources
		/// </summary>
		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchAllRessourcesAsyncMsg(String search,Int32 page)
		{
			return await HttpClient.GetAsync("api/company/searchAllRessources?search=" + search + "&page=" + page);
		}

		/// <summary>
		/// search in all resources
		/// </summary>
		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchAllRessourcesAsync(String search,Int32 page)
		{
			return await HttpClient.GetAsync("api/company/searchAllRessources?search=" + search + "&page=" + page);
		}

		/// <summary>
		/// search in all resources
		/// </summary>
		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>
		public virtual SearchResourceReturn SearchAllRessources(String search,Int32 page)
		{
			var result = Task.Run(() => SearchAllRessourcesAsyncMsg(search, page)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<SearchResourceReturn>().Result;
			 		}

		/// <summary>
		/// Get Appro Config
		/// </summary>
		/// <param name="compId">compagnie id</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetApproConfigAsyncMsg(Int32 compId)
		{
			return await HttpClient.GetAsync("api/company/getApproConfig?compId=" + compId);
		}

		/// <summary>
		/// Get Appro Config
		/// </summary>
		/// <param name="compId">compagnie id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetApproConfigAsync(Int32 compId)
		{
			return await HttpClient.GetAsync("api/company/getApproConfig?compId=" + compId);
		}

		/// <summary>
		/// Get Appro Config
		/// </summary>
		/// <param name="compId">compagnie id</param>
		public virtual ApproConfigInfo GetApproConfig(Int32 compId)
		{
			var result = Task.Run(() => GetApproConfigAsyncMsg(compId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ApproConfigInfo>().Result;
			 		}

		/// <summary>
		/// search in all projects
		/// </summary>
		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchAllProjectsAsyncMsg(String search,Int32 page)
		{
			return await HttpClient.GetAsync("api/company/searchAllProjects?search=" + search + "&page=" + page);
		}

		/// <summary>
		/// search in all projects
		/// </summary>
		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchAllProjectsAsync(String search,Int32 page)
		{
			return await HttpClient.GetAsync("api/company/searchAllProjects?search=" + search + "&page=" + page);
		}

		/// <summary>
		/// search in all projects
		/// </summary>
		/// <param name="search">Contain this text</param>
		/// <param name="page">Page selected</param>
		public virtual SearchProjectReturn SearchAllProjects(String search,Int32 page)
		{
			var result = Task.Run(() => SearchAllProjectsAsyncMsg(search, page)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<SearchProjectReturn>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="isEnabled"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveApproConfigAsyncMsg(Int32 compId,Boolean isEnabled)
		{
			return await HttpClient.PostAsJsonAsync("api/company/saveApproConfig?compId=" + compId + "&isEnabled=" + isEnabled, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="isEnabled"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveApproConfigAsync(Int32 compId,Boolean isEnabled)
		{
			return await HttpClient.PostAsJsonAsync("api/company/saveApproConfig?compId=" + compId + "&isEnabled=" + isEnabled, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="isEnabled"></param>
		public virtual UpdateResult SaveApproConfig(Int32 compId,Boolean isEnabled)
		{
			var result = Task.Run(() => SaveApproConfigAsyncMsg(compId, isEnabled)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compagnyInfo"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveCompagnyInfoAsyncMsg(CompagnyInfo compagnyInfo)
		{
			return await HttpClient.PostAsJsonAsync<CompagnyInfo>("api/company/saveCompagnyInfo", compagnyInfo);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveCompagnyInfoAsync(CompagnyInfo compagnyInfo)
		{
			return await HttpClient.PostAsJsonAsync<CompagnyInfo>("api/company/saveCompagnyInfo", compagnyInfo);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess SaveCompagnyInfo(CompagnyInfo compagnyInfo)
		{
			var result = Task.Run(() => SaveCompagnyInfoAsyncMsg(compagnyInfo)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="toSave"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveGeneralParametresAsyncMsg(CompagnyGeneralParams toSave)
		{
			return await HttpClient.PostAsJsonAsync<CompagnyGeneralParams>("api/company/saveGeneralParametres", toSave);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveGeneralParametresAsync(CompagnyGeneralParams toSave)
		{
			return await HttpClient.PostAsJsonAsync<CompagnyGeneralParams>("api/company/saveGeneralParametres", toSave);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult SaveGeneralParametres(CompagnyGeneralParams toSave)
		{
			var result = Task.Run(() => SaveGeneralParametresAsyncMsg(toSave)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveFormAsyncMsg(FormJS newData)
		{
			return await HttpClient.PostAsJsonAsync<FormJS>("api/company/saveForm", newData);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveFormAsync(FormJS newData)
		{
			return await HttpClient.PostAsJsonAsync<FormJS>("api/company/saveForm", newData);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId SaveForm(FormJS newData)
		{
			var result = Task.Run(() => SaveFormAsyncMsg(newData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFormsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/company/getForms");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFormsAsync()
		{
			return await HttpClient.GetAsync("api/company/getForms");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<FormJS> GetForms()
		{
			var result = Task.Run(() => GetFormsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<FormJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetGeneralParametresAsyncMsg()
		{
			return await HttpClient.GetAsync("api/company/getGeneralParametres");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetGeneralParametresAsync()
		{
			return await HttpClient.GetAsync("api/company/getGeneralParametres");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual GeneralParams_Return GetGeneralParametres()
		{
			var result = Task.Run(() => GetGeneralParametresAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<GeneralParams_Return>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetNameFormulaAsyncMsg()
		{
			return await HttpClient.GetAsync("api/company/getNameFormula");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetNameFormulaAsync()
		{
			return await HttpClient.GetAsync("api/company/getNameFormula");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetNameFormula()
		{
			var result = Task.Run(() => GetNameFormulaAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCompaniesListAsyncMsg()
		{
			return await HttpClient.GetAsync("api/company/getCompaniesList");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCompaniesListAsync()
		{
			return await HttpClient.GetAsync("api/company/getCompaniesList");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<CompanyJS> GetCompaniesList()
		{
			var result = Task.Run(() => GetCompaniesListAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CompanyJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> LoginAsUserAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/company/loginAsUser?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LoginAsUserAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/company/loginAsUser?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult LoginAsUser(Int32 id)
		{
			var result = Task.Run(() => LoginAsUserAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compid"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllUsersAsyncMsg(Int32 compid)
		{
			return await HttpClient.GetAsync("api/company/getAllUsers?compid=" + compid);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compid"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllUsersAsync(Int32 compid)
		{
			return await HttpClient.GetAsync("api/company/getAllUsers?compid=" + compid);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compid"></param>
		public virtual List<EmployeJS__> GetAllUsers(Int32 compid)
		{
			var result = Task.Run(() => GetAllUsersAsyncMsg(compid)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCompanyAsyncMsg(Int32 companyId)
		{
			return await HttpClient.DeleteAsync("api/company/" + companyId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCompanyAsync(Int32 companyId)
		{
			return await HttpClient.DeleteAsync("api/company/" + companyId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		public virtual UpdateResult DeleteCompany(Int32 companyId)
		{
			var result = Task.Run(() => DeleteCompanyAsyncMsg(companyId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCompanyYourCompanyAsyncMsg()
		{
			return await HttpClient.DeleteAsync("api/company/deleteCompanyYourCompany");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCompanyYourCompanyAsync()
		{
			return await HttpClient.DeleteAsync("api/company/deleteCompanyYourCompany");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult DeleteCompanyYourCompany()
		{
			var result = Task.Run(() => DeleteCompanyYourCompanyAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Returns a single company
		/// </summary>
		/// <param name="companyId">Id of the company</param>
		/// <param name="companyExternalId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCompanyAsyncMsg(Nullable<Int32> companyId,String companyExternalId)
		{
			return await HttpClient.GetAsync("api/company/single?companyId=" + companyId + "&companyExternalId=" + companyExternalId);
		}

		/// <summary>
		/// Returns a single company
		/// </summary>
		/// <param name="companyId">Id of the company</param>
		/// <param name="companyExternalId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCompanyAsync(Nullable<Int32> companyId,String companyExternalId)
		{
			return await HttpClient.GetAsync("api/company/single?companyId=" + companyId + "&companyExternalId=" + companyExternalId);
		}

		/// <summary>
		/// Returns a single company
		/// </summary>
		/// <param name="companyId">Id of the company</param>
		/// <param name="companyExternalId"></param>
		public virtual CompanyJS GetCompany(Nullable<Int32> companyId,String companyExternalId)
		{
			var result = Task.Run(() => GetCompanyAsyncMsg(companyId, companyExternalId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<CompanyJS>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ListAsyncMsg()
		{
			return await HttpClient.GetAsync("api/Company");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ListAsync()
		{
			return await HttpClient.GetAsync("api/Company");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<CompanyJS> List()
		{
			var result = Task.Run(() => ListAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CompanyJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyToCreate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateAsyncMsg(CreateCompanyJS companyToCreate)
		{
			return await HttpClient.PostAsJsonAsync<CreateCompanyJS>("api/Company", companyToCreate);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateAsync(CreateCompanyJS companyToCreate)
		{
			return await HttpClient.PostAsJsonAsync<CreateCompanyJS>("api/Company", companyToCreate);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId Create(CreateCompanyJS companyToCreate)
		{
			var result = Task.Run(() => CreateAsyncMsg(companyToCreate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ConfigTaskClient : ClientBase, Interfaces.IConfigTaskClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ConfigTaskClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ConfigTaskClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="args"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsAsyncMsg(DatesRangeFilteredRequest<Boolean> args)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/configTask/getProjects", args);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsAsync(DatesRangeFilteredRequest<Boolean> args)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/configTask/getProjects", args);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectFastPlanningResult> GetProjects(DatesRangeFilteredRequest<Boolean> args)
		{
			var result = Task.Run(() => GetProjectsAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectFastPlanningResult>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller allows employees CRUD operations
	/// </summary>
	public partial class ConflictsClient : ClientBase, Interfaces.IConflictsClient
	{		

		/// <summary>
		/// This controller allows employees CRUD operations
		/// </summary>
		public ConflictsClient() : base()
		{
		}

		/// <summary>
		/// This controller allows employees CRUD operations
		/// </summary>
		public ConflictsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> testAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/conflict/test");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> testAsync()
		{
			return await HttpClient.GetAsync("api/v1/conflict/test");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult test()
		{
			var result = Task.Run(() => testAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReassingAsyncMsg(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/conflict/Reassing", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReassingAsync(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/conflict/Reassing", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult Reassing(PlanParams Params)
		{
			var result = Task.Run(() => ReassingAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SavePlanniAsyncMsg(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/conflict/SavePlanni", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SavePlanniAsync(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/conflict/SavePlanni", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult SavePlanni(PlanParams Params)
		{
			var result = Task.Run(() => SavePlanniAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictAsyncMsg(DatesRangeFilteredRequest<ConflictParams> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ConflictParams>>("api/v1/conflict/GetConflict", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictAsync(DatesRangeFilteredRequest<ConflictParams> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ConflictParams>>("api/v1/conflict/GetConflict", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<Conflict> GetConflict(DatesRangeFilteredRequest<ConflictParams> param)
		{
			var result = Task.Run(() => GetConflictAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Conflict>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Manage custom fields and thier values
	/// </summary>
	public partial class CustomFieldsClient : ClientBase, Interfaces.ICustomFieldsClient
	{		

		/// <summary>
		/// Manage custom fields and thier values
		/// </summary>
		public CustomFieldsClient() : base()
		{
		}

		/// <summary>
		/// Manage custom fields and thier values
		/// </summary>
		public CustomFieldsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Returns a list of resources custom fields. (Without values)
		/// </summary>
		/// <param name="takeCalculated">Include calculated fields in the result</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetEmployeeCustomFieldsAsyncMsg(Boolean takeCalculated)
		{
			return await HttpClient.GetAsync("api/customFields/employes/" + takeCalculated);
		}

		/// <summary>
		/// Returns a list of resources custom fields. (Without values)
		/// </summary>
		/// <param name="takeCalculated">Include calculated fields in the result</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetEmployeeCustomFieldsAsync(Boolean takeCalculated)
		{
			return await HttpClient.GetAsync("api/customFields/employes/" + takeCalculated);
		}

		/// <summary>
		/// Returns a list of resources custom fields. (Without values)
		/// </summary>
		/// <param name="takeCalculated">Include calculated fields in the result</param>
		public virtual List<CustomFieldJs> GetEmployeeCustomFields(Boolean takeCalculated)
		{
			var result = Task.Run(() => GetEmployeeCustomFieldsAsyncMsg(takeCalculated)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// Returns a list of project custom fields. (Without values)
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectCustomFieldsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/customFields/getProjectCustomFields");
		}

		/// <summary>
		/// Returns a list of project custom fields. (Without values)
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectCustomFieldsAsync()
		{
			return await HttpClient.GetAsync("api/customFields/getProjectCustomFields");
		}

		/// <summary>
		/// Returns a list of project custom fields. (Without values)
		/// </summary>
		public virtual List<CustomFieldJs> GetProjectCustomFields()
		{
			var result = Task.Run(() => GetProjectCustomFieldsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="valueId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteClientCustomFieldValueAsyncMsg(Int32 valueId)
		{
			return await HttpClient.DeleteAsync("api/customFields/DeleteClientCustomFieldValue?valueId=" + valueId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="valueId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteClientCustomFieldValueAsync(Int32 valueId)
		{
			return await HttpClient.DeleteAsync("api/customFields/DeleteClientCustomFieldValue?valueId=" + valueId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="valueId"></param>
		public virtual UpdateResult DeleteClientCustomFieldValue(Int32 valueId)
		{
			var result = Task.Run(() => DeleteClientCustomFieldValueAsyncMsg(valueId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Delete custom field value
		/// </summary>
		/// <param name="cfId">custom field value id</param>
		/// <param name="value">custom field value</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCustomFieldValueAsyncMsg(Int32 cfId,CustomFieldValue value)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldValue>("api/customFields/DeleteCustomFieldValue?cfId=" + cfId, value);
		}

		/// <summary>
		/// Delete custom field value
		/// </summary>
		/// <param name="cfId">custom field value id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCustomFieldValueAsync(Int32 cfId,CustomFieldValue value)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldValue>("api/customFields/DeleteCustomFieldValue?cfId=" + cfId, value);
		}

		/// <summary>
		/// Delete custom field value
		/// </summary>
		/// <param name="cfId">custom field value id</param>
		public virtual UpdateResult DeleteCustomFieldValue(Int32 cfId,CustomFieldValue value)
		{
			var result = Task.Run(() => DeleteCustomFieldValueAsyncMsg(cfId, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update CustomField Categories
		/// </summary>
		/// <param name="ids">ids</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateCustomFieldCategoriesAsyncMsg(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/customFields/UpdateCustomFieldCategories", ids);
		}

		/// <summary>
		/// Update CustomField Categories
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateCustomFieldCategoriesAsync(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/customFields/UpdateCustomFieldCategories", ids);
		}

		/// <summary>
		/// Update CustomField Categories
		/// </summary>
		public virtual UpdateResult UpdateCustomFieldCategories(Int32[] ids)
		{
			var result = Task.Run(() => UpdateCustomFieldCategoriesAsyncMsg(ids)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Delete ressource custom field value
		/// </summary>
		/// <param name="cfId">custom field value id</param>
		/// <param name="value">custom field value</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteRessourceCustomFieldValueAsyncMsg(Int32 cfId,CustomFieldValue value)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldValue>("api/customFields/DeleteRessourceCustomFieldValue?cfId=" + cfId, value);
		}

		/// <summary>
		/// Delete ressource custom field value
		/// </summary>
		/// <param name="cfId">custom field value id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteRessourceCustomFieldValueAsync(Int32 cfId,CustomFieldValue value)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldValue>("api/customFields/DeleteRessourceCustomFieldValue?cfId=" + cfId, value);
		}

		/// <summary>
		/// Delete ressource custom field value
		/// </summary>
		/// <param name="cfId">custom field value id</param>
		public virtual UpdateResult DeleteRessourceCustomFieldValue(Int32 cfId,CustomFieldValue value)
		{
			var result = Task.Run(() => DeleteRessourceCustomFieldValueAsyncMsg(cfId, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllCustomFieldsAsyncMsg(Boolean takeHidden,Boolean takeCalculHard)
		{
			return await HttpClient.GetAsync("api/customFields/all/" + takeHidden + "/" + takeCalculHard);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllCustomFieldsAsync(Boolean takeHidden,Boolean takeCalculHard)
		{
			return await HttpClient.GetAsync("api/customFields/all/" + takeHidden + "/" + takeCalculHard);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		public virtual List<CustomFieldJs> GetAllCustomFields(Boolean takeHidden,Boolean takeCalculHard)
		{
			var result = Task.Run(() => GetAllCustomFieldsAsyncMsg(takeHidden, takeCalculHard)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getVisibleReadAccess"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllCustomFieldsByCategorieAsyncMsg(Boolean takeHidden,Boolean takeCalculHard,Boolean getVisibleReadAccess)
		{
			return await HttpClient.GetAsync("api/customFields/getAllCustomFieldsByCategorie/" + takeHidden + "/" + takeCalculHard + "/" + getVisibleReadAccess);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getVisibleReadAccess"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllCustomFieldsByCategorieAsync(Boolean takeHidden,Boolean takeCalculHard,Boolean getVisibleReadAccess)
		{
			return await HttpClient.GetAsync("api/customFields/getAllCustomFieldsByCategorie/" + takeHidden + "/" + takeCalculHard + "/" + getVisibleReadAccess);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getVisibleReadAccess"></param>
		public virtual List<CustomFieldCategory> GetAllCustomFieldsByCategorie(Boolean takeHidden,Boolean takeCalculHard,Boolean getVisibleReadAccess)
		{
			var result = Task.Run(() => GetAllCustomFieldsByCategorieAsyncMsg(takeHidden, takeCalculHard, getVisibleReadAccess)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldCategory>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckUniqueValueAsyncMsg(Int32 customFieldId,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/checkUniqueValue/" + customFieldId, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckUniqueValueAsync(Int32 customFieldId,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/checkUniqueValue/" + customFieldId, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		public virtual UpdateResult CheckUniqueValue(Int32 customFieldId,CustomFieldValue value)
		{
			var result = Task.Run(() => CheckUniqueValueAsyncMsg(customFieldId, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateCustomFieldValueAsyncMsg(Int32 customFieldId,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/updateValue/" + customFieldId, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateCustomFieldValueAsync(Int32 customFieldId,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/updateValue/" + customFieldId, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		public virtual UpdateResultWithId UpdateCustomFieldValue(Int32 customFieldId,CustomFieldValue value)
		{
			var result = Task.Run(() => UpdateCustomFieldValueAsyncMsg(customFieldId, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Allow to update custom fields by name as names are unique by type of custom field
		/// </summary>
		/// <param name="customFieldName"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateCustomFieldValueByNameAsyncMsg(String customFieldName,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/updateValueByName/" + customFieldName, value);
		}

		/// <summary>
		/// Allow to update custom fields by name as names are unique by type of custom field
		/// </summary>
		/// <param name="customFieldName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateCustomFieldValueByNameAsync(String customFieldName,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/updateValueByName/" + customFieldName, value);
		}

		/// <summary>
		/// Allow to update custom fields by name as names are unique by type of custom field
		/// </summary>
		/// <param name="customFieldName"></param>
		public virtual UpdateResultWithId UpdateCustomFieldValueByName(String customFieldName,CustomFieldValue value)
		{
			var result = Task.Run(() => UpdateCustomFieldValueByNameAsyncMsg(customFieldName, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateCustomFieldValueShortAsyncMsg(CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/updateValue", value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateCustomFieldValueShortAsync(CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/updateValue", value);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId UpdateCustomFieldValueShort(CustomFieldValue value)
		{
			var result = Task.Run(() => UpdateCustomFieldValueShortAsyncMsg(value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Values"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateCustomFieldValueBatchAsyncMsg(List<CustomFieldValue> Values)
		{
			return await HttpClient.PutAsJsonAsync<List<CustomFieldValue>>("api/customFields/updateValueBatch", Values);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateCustomFieldValueBatchAsync(List<CustomFieldValue> Values)
		{
			return await HttpClient.PutAsJsonAsync<List<CustomFieldValue>>("api/customFields/updateValueBatch", Values);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<UpdateResultWithId> UpdateCustomFieldValueBatch(List<CustomFieldValue> Values)
		{
			var result = Task.Run(() => UpdateCustomFieldValueBatchAsyncMsg(Values)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UpdateResultWithId>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldCategory"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateCategoryAsyncMsg(CustomFieldCategory customFieldCategory)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldCategory>("api/customFields/category", customFieldCategory);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateCategoryAsync(CustomFieldCategory customFieldCategory)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldCategory>("api/customFields/category", customFieldCategory);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId CreateOrUpdateCategory(CustomFieldCategory customFieldCategory)
		{
			var result = Task.Run(() => CreateOrUpdateCategoryAsyncMsg(customFieldCategory)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteClientCustomFieldAsyncMsg(Int32 fieldId)
		{
			return await HttpClient.DeleteAsync("api/customFields/DeleteClientCustomField?fieldId=" + fieldId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteClientCustomFieldAsync(Int32 fieldId)
		{
			return await HttpClient.DeleteAsync("api/customFields/DeleteClientCustomField?fieldId=" + fieldId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		public virtual UpdateResult DeleteClientCustomField(Int32 fieldId)
		{
			var result = Task.Run(() => DeleteClientCustomFieldAsyncMsg(fieldId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customField"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateCustomFieldAsyncMsg(CustomFieldJs customField)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldJs>("api/CustomFields", customField);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateCustomFieldAsync(CustomFieldJs customField)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldJs>("api/CustomFields", customField);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId CreateOrUpdateCustomField(CustomFieldJs customField)
		{
			var result = Task.Run(() => CreateOrUpdateCustomFieldAsyncMsg(customField)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="category"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCustomFieldCategoryAsyncMsg(Int32 category)
		{
			return await HttpClient.PostAsJsonAsync("api/CustomFields?category=" + category, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="category"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCustomFieldCategoryAsync(Int32 category)
		{
			return await HttpClient.PostAsJsonAsync("api/CustomFields?category=" + category, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="category"></param>
		public virtual UpdateResult DeleteCustomFieldCategory(Int32 category)
		{
			var result = Task.Run(() => DeleteCustomFieldCategoryAsyncMsg(category)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCustomFieldAsyncMsg(Int32 fieldId,Boolean isRessourceCustom)
		{
			return await HttpClient.PostAsJsonAsync("api/CustomFields?fieldId=" + fieldId + "&isRessourceCustom=" + isRessourceCustom, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCustomFieldAsync(Int32 fieldId,Boolean isRessourceCustom)
		{
			return await HttpClient.PostAsJsonAsync("api/CustomFields?fieldId=" + fieldId + "&isRessourceCustom=" + isRessourceCustom, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>
		public virtual UpdateResult DeleteCustomField(Int32 fieldId,Boolean isRessourceCustom)
		{
			var result = Task.Run(() => DeleteCustomFieldAsyncMsg(fieldId, isRessourceCustom)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller manages rapports and dashboards sharing / import
	/// </summary>
	public partial class DataSharingClient : ClientBase, Interfaces.IDataSharingClient
	{		

		/// <summary>
		/// This controller manages rapports and dashboards sharing / import
		/// </summary>
		public DataSharingClient() : base()
		{
		}

		/// <summary>
		/// This controller manages rapports and dashboards sharing / import
		/// </summary>
		public DataSharingClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// returns a list of all Roles, Titles, Teams and employes for the company
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleShareTargetsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getTargets");
		}

		/// <summary>
		/// returns a list of all Roles, Titles, Teams and employes for the company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleShareTargetsAsync()
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getTargets");
		}

		/// <summary>
		/// returns a list of all Roles, Titles, Teams and employes for the company
		/// </summary>
		public virtual DataShareTargetsHolder GetAvalibleShareTargets()
		{
			var result = Task.Run(() => GetAvalibleShareTargetsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<DataShareTargetsHolder>().Result;
			 		}

		/// <summary>
		/// returns a list of shared reports with current user
		/// </summary>
		/// <param name="reportType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSharedReportsAsyncMsg(ReportType reportType)
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getSharedReports/" + reportType);
		}

		/// <summary>
		/// returns a list of shared reports with current user
		/// </summary>
		/// <param name="reportType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSharedReportsAsync(ReportType reportType)
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getSharedReports/" + reportType);
		}

		/// <summary>
		/// returns a list of shared reports with current user
		/// </summary>
		/// <param name="reportType">The report type (projects, ressources, tasks)</param>
		public virtual List<ShareInfos> GetSharedReports(ReportType reportType)
		{
			var result = Task.Run(() => GetSharedReportsAsyncMsg(reportType)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ShareInfos>>().Result;
			 		}

		/// <summary>
		/// returns a list of shared planning with current user
		/// </summary>
		/// <param name="planType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSharedPlansAsyncMsg(PlanType planType)
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getSharedPlans/" + planType);
		}

		/// <summary>
		/// returns a list of shared planning with current user
		/// </summary>
		/// <param name="planType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSharedPlansAsync(PlanType planType)
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getSharedPlans/" + planType);
		}

		/// <summary>
		/// returns a list of shared planning with current user
		/// </summary>
		/// <param name="planType">The report type (projects, ressources, tasks)</param>
		public virtual List<ShareInfos> GetSharedPlans(PlanType planType)
		{
			var result = Task.Run(() => GetSharedPlansAsyncMsg(planType)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ShareInfos>>().Result;
			 		}

		/// <summary>
		/// Shares user's report
		/// </summary>
		/// <param name="dataToShare">Informations about report to share. Dates are optinal.DatesRangeFilteredRequest is used to mostly hold filters</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ShareReportAsyncMsg(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ShareRapportHelper>>("api/v1/dataShare/shareReport", dataToShare);
		}

		/// <summary>
		/// Shares user's report
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ShareReportAsync(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ShareRapportHelper>>("api/v1/dataShare/shareReport", dataToShare);
		}

		/// <summary>
		/// Shares user's report
		/// </summary>
		public virtual UpdateResult ShareReport(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare)
		{
			var result = Task.Run(() => ShareReportAsyncMsg(dataToShare)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Shares user's Planning
		/// </summary>
		/// <param name="dataToShare">Informations about report to share. Dates are optinal.DatesRangeFilteredRequest is used to mostly hold filters</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SharePlanningAsyncMsg(DatesRangeFilteredRequest<SharePlanningHelper> dataToShare)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SharePlanningHelper>>("api/v1/dataShare/shareCombinedPlanning", dataToShare);
		}

		/// <summary>
		/// Shares user's Planning
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SharePlanningAsync(DatesRangeFilteredRequest<SharePlanningHelper> dataToShare)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SharePlanningHelper>>("api/v1/dataShare/shareCombinedPlanning", dataToShare);
		}

		/// <summary>
		/// Shares user's Planning
		/// </summary>
		public virtual UpdateResult SharePlanning(DatesRangeFilteredRequest<SharePlanningHelper> dataToShare)
		{
			var result = Task.Run(() => SharePlanningAsyncMsg(dataToShare)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="reportType"></param>
		/// <param name="toImport"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ImportReportsAsyncMsg(ReportType reportType,Guid[] toImport)
		{
			return await HttpClient.PostAsJsonAsync<Guid[]>("api/v1/dataShare/shareReport/" + reportType, toImport);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="reportType"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ImportReportsAsync(ReportType reportType,Guid[] toImport)
		{
			return await HttpClient.PostAsJsonAsync<Guid[]>("api/v1/dataShare/shareReport/" + reportType, toImport);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="reportType"></param>
		public virtual UpdateResultWithId ImportReports(ReportType reportType,Guid[] toImport)
		{
			var result = Task.Run(() => ImportReportsAsyncMsg(reportType, toImport)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="planType"></param>
		/// <param name="toImport"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ImportPlansAsyncMsg(PlanType planType,Guid[] toImport)
		{
			return await HttpClient.PostAsJsonAsync<Guid[]>("api/v1/dataShare/sharePlan/" + planType, toImport);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="planType"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ImportPlansAsync(PlanType planType,Guid[] toImport)
		{
			return await HttpClient.PostAsJsonAsync<Guid[]>("api/v1/dataShare/sharePlan/" + planType, toImport);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="planType"></param>
		public virtual UpdateResultWithId ImportPlans(PlanType planType,Guid[] toImport)
		{
			var result = Task.Run(() => ImportPlansAsyncMsg(planType, toImport)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller manages divisions.
	/// </summary>
	public partial class DirectionsClient : ClientBase, Interfaces.IDirectionsClient
	{		

		/// <summary>
		/// This controller manages divisions.
		/// </summary>
		public DirectionsClient() : base()
		{
		}

		/// <summary>
		/// This controller manages divisions.
		/// </summary>
		public DirectionsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Get the full org chart of company
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDirectionsOrgChartAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsOrgChart");
		}

		/// <summary>
		/// Get the full org chart of company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDirectionsOrgChartAsync()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsOrgChart");
		}

		/// <summary>
		/// Get the full org chart of company
		/// </summary>
		public virtual DirectionModelOrgChart GetDirectionsOrgChart()
		{
			var result = Task.Run(() => GetDirectionsOrgChartAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<DirectionModelOrgChart>().Result;
			 		}

		/// <summary>
		/// Get the the list of all acessible directions for current user
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDirectionsListForUserAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsListForUser");
		}

		/// <summary>
		/// Get the the list of all acessible directions for current user
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDirectionsListForUserAsync()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsListForUser");
		}

		/// <summary>
		/// Get the the list of all acessible directions for current user
		/// </summary>
		public virtual List<DirectionJS__> GetDirectionsListForUser()
		{
			var result = Task.Run(() => GetDirectionsListForUserAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<DirectionJS__>>().Result;
			 		}

		/// <summary>
		/// Get the the list of all directions
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllDirectionsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsList");
		}

		/// <summary>
		/// Get the the list of all directions
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllDirectionsAsync()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsList");
		}

		/// <summary>
		/// Get the the list of all directions
		/// </summary>
		public virtual List<DirectionJS__> GetAllDirections()
		{
			var result = Task.Run(() => GetAllDirectionsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<DirectionJS__>>().Result;
			 		}

		/// <summary>
		/// Get the the list of sub direction for a direction
		/// </summary>
		/// <param name="dirid">Id of parent direction</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSubDirectionsAsyncMsg(Int32 dirid)
		{
			return await HttpClient.GetAsync("api/v1/directions/GetSubDirections?dirid=" + dirid);
		}

		/// <summary>
		/// Get the the list of sub direction for a direction
		/// </summary>
		/// <param name="dirid">Id of parent direction</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSubDirectionsAsync(Int32 dirid)
		{
			return await HttpClient.GetAsync("api/v1/directions/GetSubDirections?dirid=" + dirid);
		}

		/// <summary>
		/// Get the the list of sub direction for a direction
		/// </summary>
		/// <param name="dirid">Id of parent direction</param>
		public virtual List<DirectionJS__> GetSubDirections(Int32 dirid)
		{
			var result = Task.Run(() => GetSubDirectionsAsyncMsg(dirid)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<DirectionJS__>>().Result;
			 		}

		/// <summary>
		/// Update direction.
		/// If dirid == 0 : updates company name
		/// </summary>
		/// <param name="dirId"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateDirectionAsyncMsg(Int32 dirId,DirectionModelOrgChart direction)
		{
			return await HttpClient.PutAsJsonAsync<DirectionModelOrgChart>("api/v1/directions/UpdateDirection?dirId=" + dirId, direction);
		}

		/// <summary>
		/// Update direction.
		/// If dirid == 0 : updates company name
		/// </summary>
		/// <param name="dirId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateDirectionAsync(Int32 dirId,DirectionModelOrgChart direction)
		{
			return await HttpClient.PutAsJsonAsync<DirectionModelOrgChart>("api/v1/directions/UpdateDirection?dirId=" + dirId, direction);
		}

		/// <summary>
		/// Update direction.
		/// If dirid == 0 : updates company name
		/// </summary>
		/// <param name="dirId"></param>
		public virtual UpdateResult UpdateDirection(Int32 dirId,DirectionModelOrgChart direction)
		{
			var result = Task.Run(() => UpdateDirectionAsyncMsg(dirId, direction)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a ne direction
		/// </summary>
		/// <param name="direction"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateDirectionAsyncMsg(DirectionJS__ direction)
		{
			return await HttpClient.PostAsJsonAsync<DirectionJS__>("api/v1/directions/CreateDirection", direction);
		}

		/// <summary>
		/// Creates a ne direction
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateDirectionAsync(DirectionJS__ direction)
		{
			return await HttpClient.PostAsJsonAsync<DirectionJS__>("api/v1/directions/CreateDirection", direction);
		}

		/// <summary>
		/// Creates a ne direction
		/// </summary>
		public virtual UpdateResultWithId CreateDirection(DirectionJS__ direction)
		{
			var result = Task.Run(() => CreateDirectionAsyncMsg(direction)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Deletes a direction.
		/// </summary>
		/// <param name="dirId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteDirectionAsyncMsg(Int32 dirId)
		{
			return await HttpClient.DeleteAsync("api/v1/directions/DeleteDirection?dirId=" + dirId);
		}

		/// <summary>
		/// Deletes a direction.
		/// </summary>
		/// <param name="dirId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteDirectionAsync(Int32 dirId)
		{
			return await HttpClient.DeleteAsync("api/v1/directions/DeleteDirection?dirId=" + dirId);
		}

		/// <summary>
		/// Deletes a direction.
		/// </summary>
		/// <param name="dirId"></param>
		public virtual UpdateResult DeleteDirection(Int32 dirId)
		{
			var result = Task.Run(() => DeleteDirectionAsyncMsg(dirId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Checks if the direction with name "name" already exists
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckIfDirectionExistsAsyncMsg(String name)
		{
			return await HttpClient.GetAsync("api/v1/directions/CheckIfDirectionExists?name=" + name);
		}

		/// <summary>
		/// Checks if the direction with name "name" already exists
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckIfDirectionExistsAsync(String name)
		{
			return await HttpClient.GetAsync("api/v1/directions/CheckIfDirectionExists?name=" + name);
		}

		/// <summary>
		/// Checks if the direction with name "name" already exists
		/// </summary>
		/// <param name="name"></param>
		public virtual Boolean CheckIfDirectionExists(String name)
		{
			var result = Task.Run(() => CheckIfDirectionExistsAsyncMsg(name)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Get the list of all users who doens't already manage a direction
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossibleResponsablesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetPossibleResponsables");
		}

		/// <summary>
		/// Get the list of all users who doens't already manage a direction
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossibleResponsablesAsync()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetPossibleResponsables");
		}

		/// <summary>
		/// Get the list of all users who doens't already manage a direction
		/// </summary>
		public virtual List<EmployeJS__> GetPossibleResponsables()
		{
			var result = Task.Run(() => GetPossibleResponsablesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller allows employees CRUD operations
	/// </summary>
	public partial class EmployesClient : ClientBase, Interfaces.IEmployesClient
	{		

		/// <summary>
		/// This controller allows employees CRUD operations
		/// </summary>
		public EmployesClient() : base()
		{
		}

		/// <summary>
		/// This controller allows employees CRUD operations
		/// </summary>
		public EmployesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// returns a list of employees per task for a specified project
		/// Takes into acount filters defined for each task
		/// </summary>
		/// <param name="projectid"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCombinedRessourcesByTaskAsyncMsg(Int32 projectid)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/filtered/" + projectid);
		}

		/// <summary>
		/// returns a list of employees per task for a specified project
		/// Takes into acount filters defined for each task
		/// </summary>
		/// <param name="projectid"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCombinedRessourcesByTaskAsync(Int32 projectid)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/filtered/" + projectid);
		}

		/// <summary>
		/// returns a list of employees per task for a specified project
		/// Takes into acount filters defined for each task
		/// </summary>
		/// <param name="projectid"></param>
		public virtual Dictionary<Int32, List<EmployeJS__>> GetCombinedRessourcesByTask(Int32 projectid)
		{
			var result = Task.Run(() => GetCombinedRessourcesByTaskAsyncMsg(projectid)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Dictionary<Int32, List<EmployeJS__>>>().Result;
			 		}

		/// <summary>
		/// Returns a list of all employees. Request object is bool : take or not deleted employees
		/// Uses short term (20 seconds) cache for identique requests for the same user
		/// </summary>
		/// <param name="request">Filters to use. Start date and EndDate are optional. The bool value indicate if we should only return actif users
		/// If some projects filter is applied : only return users affected to these projects</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllRessourcesFilteredAsyncMsg(DatesRangeFilteredRequestPagination<RessourceParam> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<RessourceParam>>("api/v1/rh/employees/filtered", request);
		}

		/// <summary>
		/// Returns a list of all employees. Request object is bool : take or not deleted employees
		/// Uses short term (20 seconds) cache for identique requests for the same user
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllRessourcesFilteredAsync(DatesRangeFilteredRequestPagination<RessourceParam> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<RessourceParam>>("api/v1/rh/employees/filtered", request);
		}

		/// <summary>
		/// Returns a list of all employees. Request object is bool : take or not deleted employees
		/// Uses short term (20 seconds) cache for identique requests for the same user
		/// </summary>
		public virtual List<EmployeJS__> GetAllRessourcesFiltered(DatesRangeFilteredRequestPagination<RessourceParam> request)
		{
			var result = Task.Run(() => GetAllRessourcesFilteredAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRessourcesListAsyncMsg(DatesRangeFilteredRequest<UsersListRequest> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<UsersListRequest>>("api/v1/rh/employees/users", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRessourcesListAsync(DatesRangeFilteredRequest<UsersListRequest> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<UsersListRequest>>("api/v1/rh/employees/users", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConfigRessourcesModel> GetRessourcesList(DatesRangeFilteredRequest<UsersListRequest> request)
		{
			var result = Task.Run(() => GetRessourcesListAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ConfigRessourcesModel>>().Result;
			 		}

		/// <summary>
		/// Returns a list of all employees
		/// </summary>
		/// <param name="takeOnlyActif">Only take not deleted employees</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllRessourcesAsyncMsg(Boolean takeOnlyActif)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/" + takeOnlyActif);
		}

		/// <summary>
		/// Returns a list of all employees
		/// </summary>
		/// <param name="takeOnlyActif">Only take not deleted employees</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllRessourcesAsync(Boolean takeOnlyActif)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/" + takeOnlyActif);
		}

		/// <summary>
		/// Returns a list of all employees
		/// </summary>
		/// <param name="takeOnlyActif">Only take not deleted employees</param>
		public virtual List<EmployeJS__> GetAllRessources(Boolean takeOnlyActif)
		{
			var result = Task.Run(() => GetAllRessourcesAsyncMsg(takeOnlyActif)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeOnlyActif"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllRessourcesWithCustomFieldsAsyncMsg(Boolean takeOnlyActif)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/withCustomFields/" + takeOnlyActif);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeOnlyActif"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllRessourcesWithCustomFieldsAsync(Boolean takeOnlyActif)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/withCustomFields/" + takeOnlyActif);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeOnlyActif"></param>
		public virtual List<EmployeJSWithCustomFields> GetAllRessourcesWithCustomFields(Boolean takeOnlyActif)
		{
			var result = Task.Run(() => GetAllRessourcesWithCustomFieldsAsyncMsg(takeOnlyActif)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJSWithCustomFields>>().Result;
			 		}

		/// <summary>
		/// Alows employe creation with minimum of information
		/// Note : Default role should be selected at company level or provided
		/// Note : Default title should be selected at company level or provided
		/// </summary>
		/// <param name="employe"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateEmployeAsyncMsg(MinimalEmployeCreation employe)
		{
			return await HttpClient.PostAsJsonAsync<MinimalEmployeCreation>("api/v1/rh/employees/create", employe);
		}

		/// <summary>
		/// Alows employe creation with minimum of information
		/// Note : Default role should be selected at company level or provided
		/// Note : Default title should be selected at company level or provided
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateEmployeAsync(MinimalEmployeCreation employe)
		{
			return await HttpClient.PostAsJsonAsync<MinimalEmployeCreation>("api/v1/rh/employees/create", employe);
		}

		/// <summary>
		/// Alows employe creation with minimum of information
		/// Note : Default role should be selected at company level or provided
		/// Note : Default title should be selected at company level or provided
		/// </summary>
		public virtual UpdateResultWithId CreateEmploye(MinimalEmployeCreation employe)
		{
			var result = Task.Run(() => CreateEmployeAsyncMsg(employe)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Gets the last activity for a user within dates range
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLastActivityForUserAsyncMsg(DatesRangeRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/rh/employees/GetLastActivity", data);
		}

		/// <summary>
		/// Gets the last activity for a user within dates range
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLastActivityForUserAsync(DatesRangeRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/rh/employees/GetLastActivity", data);
		}

		/// <summary>
		/// Gets the last activity for a user within dates range
		/// </summary>
		public virtual List<ActivityLine> GetLastActivityForUser(DatesRangeRequest<Int32> data)
		{
			var result = Task.Run(() => GetLastActivityForUserAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ActivityLine>>().Result;
			 		}

		/// <summary>
		/// Get Hour Rate History
		/// </summary>
		/// <param name="userId">User id</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetHourRateHistoryAsyncMsg(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/GetHourRateHistory/" + userId);
		}

		/// <summary>
		/// Get Hour Rate History
		/// </summary>
		/// <param name="userId">User id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetHourRateHistoryAsync(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/GetHourRateHistory/" + userId);
		}

		/// <summary>
		/// Get Hour Rate History
		/// </summary>
		/// <param name="userId">User id</param>
		public virtual List<RessourceHourRate> GetHourRateHistory(Int32 userId)
		{
			var result = Task.Run(() => GetHourRateHistoryAsyncMsg(userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<RessourceHourRate>>().Result;
			 		}

		/// <summary>
		/// Get Bill rate History for this ressource
		/// </summary>
		/// <param name="userId">User id</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetBillRateHistoryAsyncMsg(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/GetBillRateHistory/" + userId);
		}

		/// <summary>
		/// Get Bill rate History for this ressource
		/// </summary>
		/// <param name="userId">User id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBillRateHistoryAsync(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/GetBillRateHistory/" + userId);
		}

		/// <summary>
		/// Get Bill rate History for this ressource
		/// </summary>
		/// <param name="userId">User id</param>
		public virtual List<RessourceBillRate> GetBillRateHistory(Int32 userId)
		{
			var result = Task.Run(() => GetBillRateHistoryAsyncMsg(userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<RessourceBillRate>>().Result;
			 		}

		/// <summary>
		/// Update bill rate History
		/// </summary>
		/// <param name="rateHistory"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateBillRateHistoryAsyncMsg(BillRateHistory rateHistory)
		{
			return await HttpClient.PostAsJsonAsync<BillRateHistory>("api/v1/rh/employees/UpdateBillRateHistory", rateHistory);
		}

		/// <summary>
		/// Update bill rate History
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateBillRateHistoryAsync(BillRateHistory rateHistory)
		{
			return await HttpClient.PostAsJsonAsync<BillRateHistory>("api/v1/rh/employees/UpdateBillRateHistory", rateHistory);
		}

		/// <summary>
		/// Update bill rate History
		/// </summary>
		public virtual UpdateResult UpdateBillRateHistory(BillRateHistory rateHistory)
		{
			var result = Task.Run(() => UpdateBillRateHistoryAsyncMsg(rateHistory)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Rate History
		/// </summary>
		/// <param name="userId">User id</param>
		/// <param name="rateHistory"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateRateHistoryAsyncMsg(Int32 userId,RateHistory rateHistory)
		{
			return await HttpClient.PostAsJsonAsync<RateHistory>("api/v1/rh/employees/UpdateRateHistory/" + userId, rateHistory);
		}

		/// <summary>
		/// Update Rate History
		/// </summary>
		/// <param name="userId">User id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateRateHistoryAsync(Int32 userId,RateHistory rateHistory)
		{
			return await HttpClient.PostAsJsonAsync<RateHistory>("api/v1/rh/employees/UpdateRateHistory/" + userId, rateHistory);
		}

		/// <summary>
		/// Update Rate History
		/// </summary>
		/// <param name="userId">User id</param>
		public virtual UpdateResult UpdateRateHistory(Int32 userId,RateHistory rateHistory)
		{
			var result = Task.Run(() => UpdateRateHistoryAsyncMsg(userId, rateHistory)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates cost rate from today
		/// </summary>
		/// <param name="userId">User id</param>
		/// <param name="rate">New rate effectif from current date</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateEmployeCostRateAsyncMsg(Int32 userId,Double rate)
		{
			return await HttpClient.PostAsJsonAsync<Double>("api/v1/rh/employees/UpdateEmployeCostRate?userId=" + userId, rate);
		}

		/// <summary>
		/// Updates cost rate from today
		/// </summary>
		/// <param name="userId">User id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateEmployeCostRateAsync(Int32 userId,Double rate)
		{
			return await HttpClient.PostAsJsonAsync<Double>("api/v1/rh/employees/UpdateEmployeCostRate?userId=" + userId, rate);
		}

		/// <summary>
		/// Updates cost rate from today
		/// </summary>
		/// <param name="userId">User id</param>
		public virtual UpdateResult UpdateEmployeCostRate(Int32 userId,Double rate)
		{
			var result = Task.Run(() => UpdateEmployeCostRateAsyncMsg(userId, rate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="rate"></param>
		/// <param name="localDate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateEmployeCostRateFromDateAsyncMsg(Int32 userId,Double rate,DateTime localDate)
		{
			return await HttpClient.PostAsJsonAsync<DateTime>("api/v1/rh/employees/" + userId + "/UpdateEmployeCostRate?rate=" + rate, localDate);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="rate"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateEmployeCostRateFromDateAsync(Int32 userId,Double rate,DateTime localDate)
		{
			return await HttpClient.PostAsJsonAsync<DateTime>("api/v1/rh/employees/" + userId + "/UpdateEmployeCostRate?rate=" + rate, localDate);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="rate"></param>
		public virtual UpdateResult UpdateEmployeCostRateFromDate(Int32 userId,Double rate,DateTime localDate)
		{
			var result = Task.Run(() => UpdateEmployeCostRateFromDateAsyncMsg(userId, rate, localDate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="rate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateEmployeBillRateAsyncMsg(Int32 userId,Double rate)
		{
			return await HttpClient.PostAsJsonAsync<Double>("api/v1/rh/employees/UpdateEmployeBillRate?userId=" + userId, rate);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateEmployeBillRateAsync(Int32 userId,Double rate)
		{
			return await HttpClient.PostAsJsonAsync<Double>("api/v1/rh/employees/UpdateEmployeBillRate?userId=" + userId, rate);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult UpdateEmployeBillRate(Int32 userId,Double rate)
		{
			var result = Task.Run(() => UpdateEmployeBillRateAsyncMsg(userId, rate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="date"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateEmployeEndDateAsyncMsg(Int32 userId,DateTime date)
		{
			return await HttpClient.PostAsJsonAsync<DateTime>("api/v1/rh/employees/UpdateEmployeEndDate?userId=" + userId, date);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateEmployeEndDateAsync(Int32 userId,DateTime date)
		{
			return await HttpClient.PostAsJsonAsync<DateTime>("api/v1/rh/employees/UpdateEmployeEndDate?userId=" + userId, date);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult UpdateEmployeEndDate(Int32 userId,DateTime date)
		{
			var result = Task.Run(() => UpdateEmployeEndDateAsyncMsg(userId, date)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="employeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ArchiveEmployeeAsyncMsg(Int32 employeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/rh/employees/ArchiveEmployee/" + employeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="employeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ArchiveEmployeeAsync(Int32 employeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/rh/employees/ArchiveEmployee/" + employeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="employeId"></param>
		public virtual UpdateResult ArchiveEmployee(Int32 employeId)
		{
			var result = Task.Run(() => ArchiveEmployeeAsyncMsg(employeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Check if Availability Problem with ressource for a list of projects return problemes projects
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <param name="param">param</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckAvailabilityProblemAsyncMsg(Int32 employeId,ReplaceRessource param)
		{
			return await HttpClient.PostAsJsonAsync<ReplaceRessource>("api/v1/rh/employees/CheckAvailabilityProblem/" + employeId, param);
		}

		/// <summary>
		/// Check if Availability Problem with ressource for a list of projects return problemes projects
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckAvailabilityProblemAsync(Int32 employeId,ReplaceRessource param)
		{
			return await HttpClient.PostAsJsonAsync<ReplaceRessource>("api/v1/rh/employees/CheckAvailabilityProblem/" + employeId, param);
		}

		/// <summary>
		/// Check if Availability Problem with ressource for a list of projects return problemes projects
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		public virtual List<Int32> CheckAvailabilityProblem(Int32 employeId,ReplaceRessource param)
		{
			var result = Task.Run(() => CheckAvailabilityProblemAsyncMsg(employeId, param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Int32>>().Result;
			 		}

		/// <summary>
		/// Replace ressource planning
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <param name="param">param</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReplaceRessourceAsyncMsg(Int32 employeId,ReplaceRessource param)
		{
			return await HttpClient.PostAsJsonAsync<ReplaceRessource>("api/v1/rh/employees/ReplaceRessource/" + employeId, param);
		}

		/// <summary>
		/// Replace ressource planning
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReplaceRessourceAsync(Int32 employeId,ReplaceRessource param)
		{
			return await HttpClient.PostAsJsonAsync<ReplaceRessource>("api/v1/rh/employees/ReplaceRessource/" + employeId, param);
		}

		/// <summary>
		/// Replace ressource planning
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		public virtual UpdateResult ReplaceRessource(Int32 employeId,ReplaceRessource param)
		{
			var result = Task.Run(() => ReplaceRessourceAsyncMsg(employeId, param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Moves a ressource to a different division.
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <param name="newDirectionId">New direction ID</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> MoveEmployeeToDirectionAsyncMsg(Int32 employeId,Int32 newDirectionId)
		{
			return await HttpClient.PostAsJsonAsync<Int32>("api/v1/rh/employees/MoveEmployeeToDirection/" + employeId, newDirectionId);
		}

		/// <summary>
		/// Moves a ressource to a different division.
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MoveEmployeeToDirectionAsync(Int32 employeId,Int32 newDirectionId)
		{
			return await HttpClient.PostAsJsonAsync<Int32>("api/v1/rh/employees/MoveEmployeeToDirection/" + employeId, newDirectionId);
		}

		/// <summary>
		/// Moves a ressource to a different division.
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		public virtual UpdateResult MoveEmployeeToDirection(Int32 employeId,Int32 newDirectionId)
		{
			var result = Task.Run(() => MoveEmployeeToDirectionAsyncMsg(employeId, newDirectionId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates tiers Id  for an employee
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="toUpdate">Contains tiersId. Other fields are ignored</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTiersIdAsyncMsg(Int32 userId,EmployeJS__ toUpdate)
		{
			return await HttpClient.PutAsJsonAsync<EmployeJS__>("api/v1/rh/employees/UpdateTiersId/" + userId, toUpdate);
		}

		/// <summary>
		/// Updates tiers Id  for an employee
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTiersIdAsync(Int32 userId,EmployeJS__ toUpdate)
		{
			return await HttpClient.PutAsJsonAsync<EmployeJS__>("api/v1/rh/employees/UpdateTiersId/" + userId, toUpdate);
		}

		/// <summary>
		/// Updates tiers Id  for an employee
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult UpdateTiersId(Int32 userId,EmployeJS__ toUpdate)
		{
			var result = Task.Run(() => UpdateTiersIdAsyncMsg(userId, toUpdate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUserInfoAsyncMsg(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/getUserInfo/" + userId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserInfoAsync(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/getUserInfo/" + userId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual UserInfo GetUserInfo(Int32 userId)
		{
			var result = Task.Run(() => GetUserInfoAsyncMsg(userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UserInfo>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RessourceLevelAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/ressourceLevel");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RessourceLevelAsync()
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/ressourceLevel");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> RessourceLevel()
		{
			var result = Task.Run(() => RessourceLevelAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Int32>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="updateTiersParam"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsergeneralInfoAsyncMsg(Int32 userId,DatesRangeRequest<Boolean> updateTiersParam)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Boolean>>("api/v1/rh/employees/getUsergeneralInfo/" + userId, updateTiersParam);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsergeneralInfoAsync(Int32 userId,DatesRangeRequest<Boolean> updateTiersParam)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Boolean>>("api/v1/rh/employees/getUsergeneralInfo/" + userId, updateTiersParam);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual RessourceGeneralInformations GetUsergeneralInfo(Int32 userId,DatesRangeRequest<Boolean> updateTiersParam)
		{
			var result = Task.Run(() => GetUsergeneralInfoAsyncMsg(userId, updateTiersParam)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<RessourceGeneralInformations>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="updateTiersParam"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTiersIdByUpdatetiersparamAsyncMsg(UpdateTiersParam updateTiersParam)
		{
			return await HttpClient.PostAsJsonAsync<UpdateTiersParam>("api/v1/rh/employees/updateTiersIdByUpdatetiersparam", updateTiersParam);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTiersIdByUpdatetiersparamAsync(UpdateTiersParam updateTiersParam)
		{
			return await HttpClient.PostAsJsonAsync<UpdateTiersParam>("api/v1/rh/employees/updateTiersIdByUpdatetiersparam", updateTiersParam);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult UpdateTiersIdByUpdatetiersparam(UpdateTiersParam updateTiersParam)
		{
			var result = Task.Run(() => UpdateTiersIdByUpdatetiersparamAsyncMsg(updateTiersParam)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="message"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReferFriendAsyncMsg(String email,String message)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/rh/employees/referFriend?email=" + email + "&message=" + message, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="message"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReferFriendAsync(String email,String message)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/rh/employees/referFriend?email=" + email + "&message=" + message, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="message"></param>
		public virtual UpdateResult ReferFriend(String email,String message)
		{
			var result = Task.Run(() => ReferFriendAsyncMsg(email, message)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSkillsAndLevelsAsyncMsg(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/getSkillsAndLevels/" + userId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSkillsAndLevelsAsync(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/getSkillsAndLevels/" + userId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual SkillsAndSkillLevelsJs GetSkillsAndLevels(Int32 userId)
		{
			var result = Task.Run(() => GetSkillsAndLevelsAsyncMsg(userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<SkillsAndSkillLevelsJs>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="skill"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddSkillToResourceAsyncMsg(Int32 userId,SkillJs skill)
		{
			return await HttpClient.PostAsJsonAsync<SkillJs>("api/v1/rh/employees/skills/" + userId, skill);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddSkillToResourceAsync(Int32 userId,SkillJs skill)
		{
			return await HttpClient.PostAsJsonAsync<SkillJs>("api/v1/rh/employees/skills/" + userId, skill);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult AddSkillToResource(Int32 userId,SkillJs skill)
		{
			var result = Task.Run(() => AddSkillToResourceAsyncMsg(userId, skill)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="date"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateEmployeStartDateAsyncMsg(Int32 userId,DateTime date)
		{
			return await HttpClient.PostAsJsonAsync<DateTime>("api/Employes?userId=" + userId, date);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateEmployeStartDateAsync(Int32 userId,DateTime date)
		{
			return await HttpClient.PostAsJsonAsync<DateTime>("api/Employes?userId=" + userId, date);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult UpdateEmployeStartDate(Int32 userId,DateTime date)
		{
			var result = Task.Run(() => UpdateEmployeStartDateAsyncMsg(userId, date)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ExpensesClient : ClientBase, Interfaces.IExpensesClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ExpensesClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ExpensesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Get all informations for one expense
		/// </summary>
		/// <param name="expenseId">Id of the expense</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetExpenseInfoAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/expenses/" + expenseId);
		}

		/// <summary>
		/// Get all informations for one expense
		/// </summary>
		/// <param name="expenseId">Id of the expense</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetExpenseInfoAsync(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/expenses/" + expenseId);
		}

		/// <summary>
		/// Get all informations for one expense
		/// </summary>
		/// <param name="expenseId">Id of the expense</param>
		public virtual Expense GetExpenseInfo(Int32 expenseId)
		{
			var result = Task.Run(() => GetExpenseInfoAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Expense>().Result;
			 		}

		/// <summary>
		/// Return list of avalibles projects for expenses for current user
		/// </summary>
		/// <param name="data">Start and end dates of period</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleProjectsForDatesAsyncMsg(DatesRangeRequest<Object> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/expenses/getAvalibleUserProjectsForDates", data);
		}

		/// <summary>
		/// Return list of avalibles projects for expenses for current user
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleProjectsForDatesAsync(DatesRangeRequest<Object> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/expenses/getAvalibleUserProjectsForDates", data);
		}

		/// <summary>
		/// Return list of avalibles projects for expenses for current user
		/// </summary>
		public virtual List<SimpleProject> GetAvalibleProjectsForDates(DatesRangeRequest<Object> data)
		{
			var result = Task.Run(() => GetAvalibleProjectsForDatesAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SimpleProject>>().Result;
			 		}

		/// <summary>
		/// Return a list of custon defined taxes for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTaxesAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/taxes/getTaxes/" + expenseId);
		}

		/// <summary>
		/// Return a list of custon defined taxes for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTaxesAsync(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/taxes/getTaxes/" + expenseId);
		}

		/// <summary>
		/// Return a list of custon defined taxes for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		public virtual List<Taxe> GetTaxes(Int32 expenseId)
		{
			var result = Task.Run(() => GetTaxesAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Taxe>>().Result;
			 		}

		/// <summary>
		/// Returns a list of expenses types
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetExpensesTypesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/expenses/getExpensesTypes");
		}

		/// <summary>
		/// Returns a list of expenses types
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetExpensesTypesAsync()
		{
			return await HttpClient.GetAsync("api/v1/expenses/getExpensesTypes");
		}

		/// <summary>
		/// Returns a list of expenses types
		/// </summary>
		public virtual List<SpendingType> GetExpensesTypes()
		{
			var result = Task.Run(() => GetExpensesTypesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SpendingType>>().Result;
			 		}

		/// <summary>
		/// Creates a new tax, or updates existing
		/// </summary>
		/// <param name="t">Tax</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateTaxeAsyncMsg(Taxe t)
		{
			return await HttpClient.PostAsJsonAsync<Taxe>("api/v1/taxes/addOrUpdateTaxe", t);
		}

		/// <summary>
		/// Creates a new tax, or updates existing
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateTaxeAsync(Taxe t)
		{
			return await HttpClient.PostAsJsonAsync<Taxe>("api/v1/taxes/addOrUpdateTaxe", t);
		}

		/// <summary>
		/// Creates a new tax, or updates existing
		/// </summary>
		public virtual UpdateResultWithId AddOrUpdateTaxe(Taxe t)
		{
			var result = Task.Run(() => AddOrUpdateTaxeAsyncMsg(t)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Creates or updates a custom expense type
		/// </summary>
		/// <param name="t">Expense type</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateExpenseTypeAsyncMsg(SpendingType t)
		{
			return await HttpClient.PostAsJsonAsync<SpendingType>("api/v1/expenses/addOrUpdateExpenseType", t);
		}

		/// <summary>
		/// Creates or updates a custom expense type
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateExpenseTypeAsync(SpendingType t)
		{
			return await HttpClient.PostAsJsonAsync<SpendingType>("api/v1/expenses/addOrUpdateExpenseType", t);
		}

		/// <summary>
		/// Creates or updates a custom expense type
		/// </summary>
		public virtual UpdateResultWithId AddOrUpdateExpenseType(SpendingType t)
		{
			var result = Task.Run(() => AddOrUpdateExpenseTypeAsyncMsg(t)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Deletes taxe
		/// </summary>
		/// <param name="taxeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTaxeAsyncMsg(Int32 taxeId)
		{
			return await HttpClient.DeleteAsync("api/v1/taxes/deleteTaxe/" + taxeId);
		}

		/// <summary>
		/// Deletes taxe
		/// </summary>
		/// <param name="taxeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTaxeAsync(Int32 taxeId)
		{
			return await HttpClient.DeleteAsync("api/v1/taxes/deleteTaxe/" + taxeId);
		}

		/// <summary>
		/// Deletes taxe
		/// </summary>
		/// <param name="taxeId"></param>
		public virtual UpdateResultWithId DeleteTaxe(Int32 taxeId)
		{
			var result = Task.Run(() => DeleteTaxeAsyncMsg(taxeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Deletes expense type
		/// </summary>
		/// <param name="expenseTypeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteExpenseTypeAsyncMsg(Int32 expenseTypeId)
		{
			return await HttpClient.DeleteAsync("api/v1/expenses/deleteExpensesType/" + expenseTypeId);
		}

		/// <summary>
		/// Deletes expense type
		/// </summary>
		/// <param name="expenseTypeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteExpenseTypeAsync(Int32 expenseTypeId)
		{
			return await HttpClient.DeleteAsync("api/v1/expenses/deleteExpensesType/" + expenseTypeId);
		}

		/// <summary>
		/// Deletes expense type
		/// </summary>
		/// <param name="expenseTypeId"></param>
		public virtual UpdateResultWithId DeleteExpenseType(Int32 expenseTypeId)
		{
			var result = Task.Run(() => DeleteExpenseTypeAsyncMsg(expenseTypeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Add a new expense to project or edit exsting expense
		/// </summary>
		/// <param name="expense"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrEditProjectExpenseAsyncMsg(Expense expense)
		{
			return await HttpClient.PostAsJsonAsync<Expense>("api/v1/expenses/addOrEditProjectExpense", expense);
		}

		/// <summary>
		/// Add a new expense to project or edit exsting expense
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrEditProjectExpenseAsync(Expense expense)
		{
			return await HttpClient.PostAsJsonAsync<Expense>("api/v1/expenses/addOrEditProjectExpense", expense);
		}

		/// <summary>
		/// Add a new expense to project or edit exsting expense
		/// </summary>
		public virtual UpdateResultWithId AddOrEditProjectExpense(Expense expense)
		{
			var result = Task.Run(() => AddOrEditProjectExpenseAsyncMsg(expense)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Update list of expense information
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateListExpenseAsyncMsg(RequestSelectedBulkAction data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedBulkAction>("api/v1/expenses/UpdateListExpense", data);
		}

		/// <summary>
		/// Update list of expense information
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateListExpenseAsync(RequestSelectedBulkAction data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedBulkAction>("api/v1/expenses/UpdateListExpense", data);
		}

		/// <summary>
		/// Update list of expense information
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess UpdateListExpense(RequestSelectedBulkAction data)
		{
			var result = Task.Run(() => UpdateListExpenseAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Add files to expense. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddFilesToExpenseAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/expenses/addFilesToExpense/" + expenseId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add files to expense. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddFilesToExpenseAsync(Int32 expenseId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/expenses/addFilesToExpense/" + expenseId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add files to expense. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="expenseId"></param>
		public virtual UpdateResultWithId AddFilesToExpense(Int32 expenseId)
		{
			var result = Task.Run(() => AddFilesToExpenseAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns a list of files for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFilesListForExpenseAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/expenses/getFilesListForExpense/" + expenseId);
		}

		/// <summary>
		/// Returns a list of files for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFilesListForExpenseAsync(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/expenses/getFilesListForExpense/" + expenseId);
		}

		/// <summary>
		/// Returns a list of files for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		public virtual List<UploadedFile> GetFilesListForExpense(Int32 expenseId)
		{
			var result = Task.Run(() => GetFilesListForExpenseAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UploadedFile>>().Result;
			 		}

		/// <summary>
		/// Delets an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteExpenseAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.DeleteAsync("api/v1/expenses/deleteExpense/" + expenseId);
		}

		/// <summary>
		/// Delets an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteExpenseAsync(Int32 expenseId)
		{
			return await HttpClient.DeleteAsync("api/v1/expenses/deleteExpense/" + expenseId);
		}

		/// <summary>
		/// Delets an expense
		/// </summary>
		/// <param name="expenseId"></param>
		public virtual UpdateResult DeleteExpense(Int32 expenseId)
		{
			var result = Task.Run(() => DeleteExpenseAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ExportsClient : ClientBase, Interfaces.IExportsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ExportsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ExportsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllAvailableFieldsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/exports/getfields");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllAvailableFieldsAsync()
		{
			return await HttpClient.GetAsync("api/exports/getfields");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ColumnInfoForExport> GetAllAvailableFields()
		{
			var result = Task.Run(() => GetAllAvailableFieldsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ColumnInfoForExport>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvailableExportsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/exports/list");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvailableExportsAsync()
		{
			return await HttpClient.GetAsync("api/exports/list");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ExportConfig> GetAvailableExports()
		{
			var result = Task.Run(() => GetAvailableExportsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ExportConfig>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="template"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RunExportPostAsyncMsg(ExportConfigRun template)
		{
			return await HttpClient.PostAsJsonAsync<ExportConfigRun>("api/exports/run", template);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RunExportPostAsync(ExportConfigRun template)
		{
			return await HttpClient.PostAsJsonAsync<ExportConfigRun>("api/exports/run", template);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult RunExportPost(ExportConfigRun template)
		{
			var result = Task.Run(() => RunExportPostAsyncMsg(template)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="exportId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteExportAsyncMsg(String exportId)
		{
			return await HttpClient.DeleteAsync("api/exports/" + exportId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="exportId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteExportAsync(String exportId)
		{
			return await HttpClient.DeleteAsync("api/exports/" + exportId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="exportId"></param>
		public virtual HttpResponseMessage DeleteExport(String exportId)
		{
			var result = Task.Run(() => DeleteExportAsyncMsg(exportId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<HttpResponseMessage>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveExportAsyncMsg(ExportConfig request)
		{
			return await HttpClient.PostAsJsonAsync<ExportConfig>("api/Exports", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveExportAsync(ExportConfig request)
		{
			return await HttpClient.PostAsJsonAsync<ExportConfig>("api/Exports", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String SaveExport(ExportConfig request)
		{
			var result = Task.Run(() => SaveExportAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller alows projects and ressources search
	/// </summary>
	public partial class FastPlanningClient : ClientBase, Interfaces.IFastPlanningClient
	{		

		/// <summary>
		/// This controller alows projects and ressources search
		/// </summary>
		public FastPlanningClient() : base()
		{
		}

		/// <summary>
		/// This controller alows projects and ressources search
		/// </summary>
		public FastPlanningClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Returns projects list, 
		/// if put OnlyProjectThatCanAddTasks to true and user don't have the access CanCreateTaskOnFamilyProject only show projects that are not connect to a family
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsAsyncMsg(DatesRangeRequest<FastPlaningGetProject> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<FastPlaningGetProject>>("api/v1/fastPlanning/getProjects", param);
		}

		/// <summary>
		/// Returns projects list, 
		/// if put OnlyProjectThatCanAddTasks to true and user don't have the access CanCreateTaskOnFamilyProject only show projects that are not connect to a family
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsAsync(DatesRangeRequest<FastPlaningGetProject> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<FastPlaningGetProject>>("api/v1/fastPlanning/getProjects", param);
		}

		/// <summary>
		/// Returns projects list, 
		/// if put OnlyProjectThatCanAddTasks to true and user don't have the access CanCreateTaskOnFamilyProject only show projects that are not connect to a family
		/// </summary>
		public virtual List<SimpleProjectWithDates> GetProjects(DatesRangeRequest<FastPlaningGetProject> param)
		{
			var result = Task.Run(() => GetProjectsAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SimpleProjectWithDates>>().Result;
			 		}

		/// <summary>
		/// Returns 2 lists of users avalible for dates
		/// </summary>
		/// <param name="args">Contains users already in project and other avalible users</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRessourcesAsyncMsg(DatesRangeRequest<GetRessourcesRequest> args)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<GetRessourcesRequest>>("api/v1/fastPlanning/getRessources", args);
		}

		/// <summary>
		/// Returns 2 lists of users avalible for dates
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRessourcesAsync(DatesRangeRequest<GetRessourcesRequest> args)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<GetRessourcesRequest>>("api/v1/fastPlanning/getRessources", args);
		}

		/// <summary>
		/// Returns 2 lists of users avalible for dates
		/// </summary>
		public virtual RessourcesForNewProject GetRessources(DatesRangeRequest<GetRessourcesRequest> args)
		{
			var result = Task.Run(() => GetRessourcesAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<RessourcesForNewProject>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckIfPlanifAsyncMsg(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/fastPlanning/checkIfPlanif", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckIfPlanifAsync(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/fastPlanning/checkIfPlanif", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult CheckIfPlanif(PlanParams Params)
		{
			var result = Task.Run(() => CheckIfPlanifAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Saves in bulk planification for a user and selected project /task.
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveAllPlanningRessourcesAsyncMsg(PlanBulkParams param)
		{
			return await HttpClient.PostAsJsonAsync<PlanBulkParams>("api/v1/fastPlanning/saveAllPlanningRessources", param);
		}

		/// <summary>
		/// Saves in bulk planification for a user and selected project /task.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveAllPlanningRessourcesAsync(PlanBulkParams param)
		{
			return await HttpClient.PostAsJsonAsync<PlanBulkParams>("api/v1/fastPlanning/saveAllPlanningRessources", param);
		}

		/// <summary>
		/// Saves in bulk planification for a user and selected project /task.
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess SaveAllPlanningRessources(PlanBulkParams param)
		{
			var result = Task.Run(() => SaveAllPlanningRessourcesAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Saves planification for list of users and selected project /task.
		/// </summary>
		/// <param name="fromImport"></param>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SavePlanningRessourcesAsyncMsg(Nullable<Boolean> fromImport,PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/fastPlanning/savePlanningRessources?fromImport=" + fromImport, Params);
		}

		/// <summary>
		/// Saves planification for list of users and selected project /task.
		/// </summary>
		/// <param name="fromImport"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SavePlanningRessourcesAsync(Nullable<Boolean> fromImport,PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/fastPlanning/savePlanningRessources?fromImport=" + fromImport, Params);
		}

		/// <summary>
		/// Saves planification for list of users and selected project /task.
		/// </summary>
		/// <param name="fromImport"></param>
		public virtual UpdateResult SavePlanningRessources(Nullable<Boolean> fromImport,PlanParams Params)
		{
			var result = Task.Run(() => SavePlanningRessourcesAsyncMsg(fromImport, Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class FeesClient : ClientBase, Interfaces.IFeesClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public FeesClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public FeesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Get list of fee, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ListAsyncMsg(Int32 projectId,Nullable<Int32> taskId)
		{
			return await HttpClient.GetAsync("api/v1/projects/fees?projectId=" + projectId + "&taskId=" + taskId);
		}

		/// <summary>
		/// Get list of fee, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ListAsync(Int32 projectId,Nullable<Int32> taskId)
		{
			return await HttpClient.GetAsync("api/v1/projects/fees?projectId=" + projectId + "&taskId=" + taskId);
		}

		/// <summary>
		/// Get list of fee, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="taskId"></param>
		public virtual List<Fee> List(Int32 projectId,Nullable<Int32> taskId)
		{
			var result = Task.Run(() => ListAsyncMsg(projectId, taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Fee>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="fee"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddAsyncAsyncMsg(Int32 projectId,Fee fee)
		{
			return await HttpClient.PostAsJsonAsync<Fee>("api/v1/projects/fees?projectId=" + projectId, fee);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddAsyncAsync(Int32 projectId,Fee fee)
		{
			return await HttpClient.PostAsJsonAsync<Fee>("api/v1/projects/fees?projectId=" + projectId, fee);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual Fee AddAsync(Int32 projectId,Fee fee)
		{
			var result = Task.Run(() => AddAsyncAsyncMsg(projectId, fee)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Fee>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="fee"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateAsyncAsyncMsg(Int32 projectId,Fee fee)
		{
			return await HttpClient.PutAsJsonAsync<Fee>("api/v1/projects/fees?projectId=" + projectId, fee);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateAsyncAsync(Int32 projectId,Fee fee)
		{
			return await HttpClient.PutAsJsonAsync<Fee>("api/v1/projects/fees?projectId=" + projectId, fee);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual Fee UpdateAsync(Int32 projectId,Fee fee)
		{
			var result = Task.Run(() => UpdateAsyncAsyncMsg(projectId, fee)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Fee>().Result;
			 		}

		/// <summary>
		/// Add or insert a fee using external ids. Use for integrations
		/// </summary>
		/// <param name="projectExternalId">External id of the project</param>
		/// <param name="fee">Fee with data to update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateExternalAsyncAsyncMsg(String projectExternalId,Fee fee)
		{
			return await HttpClient.PostAsJsonAsync<Fee>("api/v1/projects/fees/external?projectExternalId=" + projectExternalId, fee);
		}

		/// <summary>
		/// Add or insert a fee using external ids. Use for integrations
		/// </summary>
		/// <param name="projectExternalId">External id of the project</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateExternalAsyncAsync(String projectExternalId,Fee fee)
		{
			return await HttpClient.PostAsJsonAsync<Fee>("api/v1/projects/fees/external?projectExternalId=" + projectExternalId, fee);
		}

		/// <summary>
		/// Add or insert a fee using external ids. Use for integrations
		/// </summary>
		/// <param name="projectExternalId">External id of the project</param>
		public virtual Fee AddOrUpdateExternalAsync(String projectExternalId,Fee fee)
		{
			var result = Task.Run(() => AddOrUpdateExternalAsyncAsyncMsg(projectExternalId, fee)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Fee>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fees"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateBatchOldAsyncMsg(List<Fee> fees)
		{
			return await HttpClient.PutAsJsonAsync<List<Fee>>("api/v1/projects/fees", fees);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateBatchOldAsync(List<Fee> fees)
		{
			return await HttpClient.PutAsJsonAsync<List<Fee>>("api/v1/projects/fees", fees);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<Fee> AddOrUpdateBatchOld(List<Fee> fees)
		{
			var result = Task.Run(() => AddOrUpdateBatchOldAsyncMsg(fees)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Fee>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fees"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateBatchAsyncMsg(List<Fee> fees)
		{
			return await HttpClient.PutAsJsonAsync<List<Fee>>("api/v2/projects/fees", fees);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateBatchAsync(List<Fee> fees)
		{
			return await HttpClient.PutAsJsonAsync<List<Fee>>("api/v2/projects/fees", fees);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ResponseContainer<Fee>> AddOrUpdateBatch(List<Fee> fees)
		{
			var result = Task.Run(() => AddOrUpdateBatchAsyncMsg(fees)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ResponseContainer<Fee>>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="feeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteAsyncAsyncMsg(Int32 projectId,Guid feeId)
		{
			return await HttpClient.DeleteAsync("api/v1/projects/fees?projectId=" + projectId + "&feeId=" + feeId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="feeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteAsyncAsync(Int32 projectId,Guid feeId)
		{
			return await HttpClient.DeleteAsync("api/v1/projects/fees?projectId=" + projectId + "&feeId=" + feeId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="feeId"></param>
		public virtual void DeleteAsync(Int32 projectId,Guid feeId)
		{
			var result = Task.Run(() => DeleteAsyncAsyncMsg(projectId, feeId)).Result;		 
			 
			EnsureSuccess(result);
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class FormClient : ClientBase, Interfaces.IFormClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public FormClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public FormClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadDocumentAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/UploadDocument", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadDocumentAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/UploadDocument", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId UploadDocument()
		{
			var result = Task.Run(() => UploadDocumentAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadDocumentQtyAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/UploadDocumentQty", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadDocumentQtyAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/UploadDocumentQty", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId UploadDocumentQty()
		{
			var result = Task.Run(() => UploadDocumentQtyAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fileToRemove"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RemoveDocumentAsyncMsg(Int32 fileToRemove)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/RemoveDocument/" + fileToRemove, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fileToRemove"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveDocumentAsync(Int32 fileToRemove)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/RemoveDocument/" + fileToRemove, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fileToRemove"></param>
		public virtual UpdateResult RemoveDocument(Int32 fileToRemove)
		{
			var result = Task.Run(() => RemoveDocumentAsyncMsg(fileToRemove)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFormValuesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/form/GetFormValues");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFormValuesAsync()
		{
			return await HttpClient.GetAsync("api/v1/form/GetFormValues");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<FormValueReturn> GetFormValues()
		{
			var result = Task.Run(() => GetFormValuesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<FormValueReturn>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFormsByCompIdAsyncMsg(Int32 compId,String strinGuid)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/GetFormsByCompId?compId=" + compId + "&strinGuid=" + strinGuid, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFormsByCompIdAsync(Int32 compId,String strinGuid)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/GetFormsByCompId?compId=" + compId + "&strinGuid=" + strinGuid, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>
		public virtual FormReturn GetFormsByCompId(Int32 compId,String strinGuid)
		{
			var result = Task.Run(() => GetFormsByCompIdAsyncMsg(compId, strinGuid)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<FormReturn>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ValidFormValueAsyncMsg(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/ValidFormValue", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ValidFormValueAsync(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/ValidFormValue", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId ValidFormValue(FormApiParm param)
		{
			var result = Task.Run(() => ValidFormValueAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RejectFormValueAsyncMsg(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/RejectFormValue", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RejectFormValueAsync(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/RejectFormValue", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithGui RejectFormValue(FormApiParm param)
		{
			var result = Task.Run(() => RejectFormValueAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithGui>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RemoveFormValueAsyncMsg(Int32 compId,String strinGuid)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/RemoveFormValue/" + compId + "/" + strinGuid, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveFormValueAsync(Int32 compId,String strinGuid)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/form/RemoveFormValue/" + compId + "/" + strinGuid, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="strinGuid"></param>
		public virtual UpdateResult RemoveFormValue(Int32 compId,String strinGuid)
		{
			var result = Task.Run(() => RemoveFormValueAsyncMsg(compId, strinGuid)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SendNotifSubmitAsyncMsg(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/SendNotifSubmit", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SendNotifSubmitAsync(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/SendNotifSubmit", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithGui SendNotifSubmit(FormApiParm param)
		{
			var result = Task.Run(() => SendNotifSubmitAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithGui>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SubmitFormValueAsyncMsg(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/SubmitFormValue", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SubmitFormValueAsync(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/SubmitFormValue", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual SubmitFormReturn SubmitFormValue(FormApiParm param)
		{
			var result = Task.Run(() => SubmitFormValueAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<SubmitFormReturn>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SendNotifSaveAsyncMsg(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/SendNotifSave", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SendNotifSaveAsync(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/SendNotifSave", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithGui SendNotifSave(FormApiParm param)
		{
			var result = Task.Run(() => SendNotifSaveAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithGui>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveFormValueAsyncMsg(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/SaveFormValue", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveFormValueAsync(FormApiParm param)
		{
			return await HttpClient.PostAsJsonAsync<FormApiParm>("api/v1/form/SaveFormValue", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithGui SaveFormValue(FormApiParm param)
		{
			var result = Task.Run(() => SaveFormValueAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithGui>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This is an internal "helper" controller.
	/// </summary>
	public partial class HelperWebClient : ClientBase, Interfaces.IHelperWebClient
	{		

		/// <summary>
		/// This is an internal "helper" controller.
		/// </summary>
		public HelperWebClient() : base()
		{
		}

		/// <summary>
		/// This is an internal "helper" controller.
		/// </summary>
		public HelperWebClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GenerateApiTokenAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/helper/generateApiKey");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateApiTokenAsync()
		{
			return await HttpClient.GetAsync("api/v1/helper/generateApiKey");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateApiToken()
		{
			var result = Task.Run(() => GenerateApiTokenAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="v"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UnsubscribeAllEmailAsyncMsg(Boolean v)
		{
			return await HttpClient.GetAsync("api/v1/helper/unsubscribe?v=" + v);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="v"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UnsubscribeAllEmailAsync(Boolean v)
		{
			return await HttpClient.GetAsync("api/v1/helper/unsubscribe?v=" + v);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="v"></param>
		public virtual Boolean UnsubscribeAllEmail(Boolean v)
		{
			var result = Task.Run(() => UnsubscribeAllEmailAsyncMsg(v)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This APIs are for skill managment and titles of users
	/// </summary>
	public partial class HumanRessourcesClient : ClientBase, Interfaces.IHumanRessourcesClient
	{		

		/// <summary>
		/// This APIs are for skill managment and titles of users
		/// </summary>
		public HumanRessourcesClient() : base()
		{
		}

		/// <summary>
		/// This APIs are for skill managment and titles of users
		/// </summary>
		public HumanRessourcesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Updates order of titles, if this option is enabled in company settings
		/// </summary>
		/// <param name="neworder"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTitlesOrderAsyncMsg(Dictionary<Int32, Int32> neworder)
		{
			return await HttpClient.PostAsJsonAsync<Dictionary<Int32, Int32>>("api/v1/rh/updateTitlesOrder", neworder);
		}

		/// <summary>
		/// Updates order of titles, if this option is enabled in company settings
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTitlesOrderAsync(Dictionary<Int32, Int32> neworder)
		{
			return await HttpClient.PostAsJsonAsync<Dictionary<Int32, Int32>>("api/v1/rh/updateTitlesOrder", neworder);
		}

		/// <summary>
		/// Updates order of titles, if this option is enabled in company settings
		/// </summary>
		public virtual UpdateResult UpdateTitlesOrder(Dictionary<Int32, Int32> neworder)
		{
			var result = Task.Run(() => UpdateTitlesOrderAsyncMsg(neworder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Returns the list of all available titles
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllTitlesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/rh/titles");
		}

		/// <summary>
		/// Returns the list of all available titles
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllTitlesAsync()
		{
			return await HttpClient.GetAsync("api/v1/rh/titles");
		}

		/// <summary>
		/// Returns the list of all available titles
		/// </summary>
		public virtual List<OccupationJS> GetAllTitles()
		{
			var result = Task.Run(() => GetAllTitlesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<OccupationJS>>().Result;
			 		}

		/// <summary>
		/// Returns list of all avalible levels for skills
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllSkillLevelsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/rh/skillLevels");
		}

		/// <summary>
		/// Returns list of all avalible levels for skills
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllSkillLevelsAsync()
		{
			return await HttpClient.GetAsync("api/v1/rh/skillLevels");
		}

		/// <summary>
		/// Returns list of all avalible levels for skills
		/// </summary>
		public virtual List<SkillLevelJs> GetAllSkillLevels()
		{
			var result = Task.Run(() => GetAllSkillLevelsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SkillLevelJs>>().Result;
			 		}

		/// <summary>
		/// Check If Can Delete Ressource
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckCanDeleteRessourceAsyncMsg(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/rh/checkCanDeleteRessource?ressourceId=" + ressourceId);
		}

		/// <summary>
		/// Check If Can Delete Ressource
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckCanDeleteRessourceAsync(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/rh/checkCanDeleteRessource?ressourceId=" + ressourceId);
		}

		/// <summary>
		/// Check If Can Delete Ressource
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual Boolean CheckCanDeleteRessource(Int32 ressourceId)
		{
			var result = Task.Run(() => CheckCanDeleteRessourceAsyncMsg(ressourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Delets one level of skill
		/// </summary>
		/// <param name="skillLevelId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteSkillLevelAsyncMsg(Int32 skillLevelId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skillLevels/" + skillLevelId);
		}

		/// <summary>
		/// Delets one level of skill
		/// </summary>
		/// <param name="skillLevelId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSkillLevelAsync(Int32 skillLevelId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skillLevels/" + skillLevelId);
		}

		/// <summary>
		/// Delets one level of skill
		/// </summary>
		/// <param name="skillLevelId"></param>
		public virtual UpdateResult DeleteSkillLevel(Int32 skillLevelId)
		{
			var result = Task.Run(() => DeleteSkillLevelAsyncMsg(skillLevelId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates order of all levels of skill
		/// </summary>
		/// <param name="newOrder"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeSkillLevelsOrderAsyncMsg(Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/rh/skillLevels/ChangeOrder", newOrder);
		}

		/// <summary>
		/// Updates order of all levels of skill
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeSkillLevelsOrderAsync(Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/rh/skillLevels/ChangeOrder", newOrder);
		}

		/// <summary>
		/// Updates order of all levels of skill
		/// </summary>
		public virtual UpdateResult ChangeSkillLevelsOrder(Int32[] newOrder)
		{
			var result = Task.Run(() => ChangeSkillLevelsOrderAsyncMsg(newOrder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a new skill level or updates existing
		/// </summary>
		/// <param name="skillLevel"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrEditSkillLevelAsyncMsg(SkillLevelJs skillLevel)
		{
			return await HttpClient.PostAsJsonAsync<SkillLevelJs>("api/v1/rh/skillLevels/addOrEdit", skillLevel);
		}

		/// <summary>
		/// Creates a new skill level or updates existing
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrEditSkillLevelAsync(SkillLevelJs skillLevel)
		{
			return await HttpClient.PostAsJsonAsync<SkillLevelJs>("api/v1/rh/skillLevels/addOrEdit", skillLevel);
		}

		/// <summary>
		/// Creates a new skill level or updates existing
		/// </summary>
		public virtual UpdateResultWithId AddOrEditSkillLevel(SkillLevelJs skillLevel)
		{
			var result = Task.Run(() => AddOrEditSkillLevelAsyncMsg(skillLevel)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns the list of all skills
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllSkillsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/rh/skills");
		}

		/// <summary>
		/// Returns the list of all skills
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllSkillsAsync()
		{
			return await HttpClient.GetAsync("api/v1/rh/skills");
		}

		/// <summary>
		/// Returns the list of all skills
		/// </summary>
		public virtual List<SkillJs> GetAllSkills()
		{
			var result = Task.Run(() => GetAllSkillsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SkillJs>>().Result;
			 		}

		/// <summary>
		/// Deletes one skill
		/// </summary>
		/// <param name="skillId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteSkillAsyncMsg(Int32 skillId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skills/" + skillId);
		}

		/// <summary>
		/// Deletes one skill
		/// </summary>
		/// <param name="skillId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSkillAsync(Int32 skillId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skills/" + skillId);
		}

		/// <summary>
		/// Deletes one skill
		/// </summary>
		/// <param name="skillId"></param>
		public virtual UpdateResult DeleteSkill(Int32 skillId)
		{
			var result = Task.Run(() => DeleteSkillAsyncMsg(skillId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Resource Skills
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="skills"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateResourceSkillsAsyncMsg(Int32 userId,List<SkillJs> skills)
		{
			return await HttpClient.PostAsJsonAsync<List<SkillJs>>("api/v1/rh/updateResourceSkills/" + userId, skills);
		}

		/// <summary>
		/// Update Resource Skills
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateResourceSkillsAsync(Int32 userId,List<SkillJs> skills)
		{
			return await HttpClient.PostAsJsonAsync<List<SkillJs>>("api/v1/rh/updateResourceSkills/" + userId, skills);
		}

		/// <summary>
		/// Update Resource Skills
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult UpdateResourceSkills(Int32 userId,List<SkillJs> skills)
		{
			var result = Task.Run(() => UpdateResourceSkillsAsyncMsg(userId, skills)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deletes resource skill
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="skillId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteResourceSkillAsyncMsg(Int32 userId,Int32 skillId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skillsResource/" + userId + "/" + skillId);
		}

		/// <summary>
		/// Deletes resource skill
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="skillId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteResourceSkillAsync(Int32 userId,Int32 skillId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skillsResource/" + userId + "/" + skillId);
		}

		/// <summary>
		/// Deletes resource skill
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="skillId"></param>
		public virtual UpdateResult DeleteResourceSkill(Int32 userId,Int32 skillId)
		{
			var result = Task.Run(() => DeleteResourceSkillAsyncMsg(userId, skillId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates order of skills
		/// </summary>
		/// <param name="newOrder">Ids of all skills. The order will be preserved</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeSkillsOrderAsyncMsg(Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/rh/skills/ChangeOrder", newOrder);
		}

		/// <summary>
		/// Updates order of skills
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeSkillsOrderAsync(Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/rh/skills/ChangeOrder", newOrder);
		}

		/// <summary>
		/// Updates order of skills
		/// </summary>
		public virtual UpdateResult ChangeSkillsOrder(Int32[] newOrder)
		{
			var result = Task.Run(() => ChangeSkillsOrderAsyncMsg(newOrder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a new skill, or updates existing
		/// </summary>
		/// <param name="skill"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrEditSkillAsyncMsg(SkillJs skill)
		{
			return await HttpClient.PostAsJsonAsync<SkillJs>("api/v1/rh/skills/addOrEdit", skill);
		}

		/// <summary>
		/// Creates a new skill, or updates existing
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrEditSkillAsync(SkillJs skill)
		{
			return await HttpClient.PostAsJsonAsync<SkillJs>("api/v1/rh/skills/addOrEdit", skill);
		}

		/// <summary>
		/// Creates a new skill, or updates existing
		/// </summary>
		public virtual UpdateResultWithId AddOrEditSkill(SkillJs skill)
		{
			var result = Task.Run(() => AddOrEditSkillAsyncMsg(skill)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Creates a new title
		/// </summary>
		/// <param name="title"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateTitileAsyncMsg(OccupationJS title)
		{
			return await HttpClient.PostAsJsonAsync<OccupationJS>("api/v1/rh/titles/createTitle", title);
		}

		/// <summary>
		/// Creates a new title
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateTitileAsync(OccupationJS title)
		{
			return await HttpClient.PostAsJsonAsync<OccupationJS>("api/v1/rh/titles/createTitle", title);
		}

		/// <summary>
		/// Creates a new title
		/// </summary>
		public virtual UpdateResultWithId CreateTitile(OccupationJS title)
		{
			var result = Task.Run(() => CreateTitileAsyncMsg(title)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// send email
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SendEmailAsyncMsg(String email)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/rh/ressources/sendEmail?email=" + email, default(HttpResponseMessage));
		}

		/// <summary>
		/// send email
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SendEmailAsync(String email)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/rh/ressources/sendEmail?email=" + email, default(HttpResponseMessage));
		}

		/// <summary>
		/// send email
		/// </summary>
		/// <param name="email"></param>
		public virtual UpdateResult SendEmail(String email)
		{
			var result = Task.Run(() => SendEmailAsyncMsg(email)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Save setting Resource
		/// </summary>
		/// <param name="setting"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveSettingResourceAsyncMsg(SettingResource setting)
		{
			return await HttpClient.PostAsJsonAsync<SettingResource>("api/v1/rh/titles/SaveSettingResource", setting);
		}

		/// <summary>
		/// Save setting Resource
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveSettingResourceAsync(SettingResource setting)
		{
			return await HttpClient.PostAsJsonAsync<SettingResource>("api/v1/rh/titles/SaveSettingResource", setting);
		}

		/// <summary>
		/// Save setting Resource
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess SaveSettingResource(SettingResource setting)
		{
			var result = Task.Run(() => SaveSettingResourceAsyncMsg(setting)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Updates a title
		/// </summary>
		/// <param name="titleId"></param>
		/// <param name="title"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTitleAsyncMsg(Int32 titleId,OccupationJS title)
		{
			return await HttpClient.PutAsJsonAsync<OccupationJS>("api/v1/rh/titles/updateTitile/" + titleId, title);
		}

		/// <summary>
		/// Updates a title
		/// </summary>
		/// <param name="titleId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTitleAsync(Int32 titleId,OccupationJS title)
		{
			return await HttpClient.PutAsJsonAsync<OccupationJS>("api/v1/rh/titles/updateTitile/" + titleId, title);
		}

		/// <summary>
		/// Updates a title
		/// </summary>
		/// <param name="titleId"></param>
		public virtual UpdateResult UpdateTitle(Int32 titleId,OccupationJS title)
		{
			var result = Task.Run(() => UpdateTitleAsyncMsg(titleId, title)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deletes one title
		/// </summary>
		/// <param name="titleId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTitileAsyncMsg(Int32 titleId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/titles/deleteTitile/" + titleId);
		}

		/// <summary>
		/// Deletes one title
		/// </summary>
		/// <param name="titleId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTitileAsync(Int32 titleId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/titles/deleteTitile/" + titleId);
		}

		/// <summary>
		/// Deletes one title
		/// </summary>
		/// <param name="titleId"></param>
		public virtual UpdateResult DeleteTitile(Int32 titleId)
		{
			var result = Task.Run(() => DeleteTitileAsyncMsg(titleId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="data">All fields are optional except UserId</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckUpdateEmployeeAsyncMsg(Int32 ressourceId,RessourceUpdate data)
		{
			return await HttpClient.PutAsJsonAsync<RessourceUpdate>("api/v1/ressources/checkUpdateEmployee/" + ressourceId, data);
		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckUpdateEmployeeAsync(Int32 ressourceId,RessourceUpdate data)
		{
			return await HttpClient.PutAsJsonAsync<RessourceUpdate>("api/v1/ressources/checkUpdateEmployee/" + ressourceId, data);
		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResult CheckUpdateEmployee(Int32 ressourceId,RessourceUpdate data)
		{
			var result = Task.Run(() => CheckUpdateEmployeeAsyncMsg(ressourceId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="data">All fields are optional except UserId</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateEmployeeAsyncMsg(Int32 ressourceId,RessourceUpdate data)
		{
			return await HttpClient.PutAsJsonAsync<RessourceUpdate>("api/v1/ressources/updateEmployee/" + ressourceId, data);
		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateEmployeeAsync(Int32 ressourceId,RessourceUpdate data)
		{
			return await HttpClient.PutAsJsonAsync<RessourceUpdate>("api/v1/ressources/updateEmployee/" + ressourceId, data);
		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResultWithId UpdateEmployee(Int32 ressourceId,RessourceUpdate data)
		{
			var result = Task.Run(() => UpdateEmployeeAsyncMsg(ressourceId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Updates or creates a list of users
		/// </summary>
		/// <param name="users">List of users to insert or update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateOrAddEmployesOldAsyncMsg(List<ApiRessource> users)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiRessource>>("api/v1/ressources/updateEmployes", users);
		}

		/// <summary>
		/// Updates or creates a list of users
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateOrAddEmployesOldAsync(List<ApiRessource> users)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiRessource>>("api/v1/ressources/updateEmployes", users);
		}

		/// <summary>
		/// Updates or creates a list of users
		/// </summary>
		public virtual UpdateResultWithId UpdateOrAddEmployesOld(List<ApiRessource> users)
		{
			var result = Task.Run(() => UpdateOrAddEmployesOldAsyncMsg(users)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="users"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateOrAddEmployesAsyncMsg(List<ApiRessource> users)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiRessource>>("api/v2/ressources/updateEmployes", users);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateOrAddEmployesAsync(List<ApiRessource> users)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiRessource>>("api/v2/ressources/updateEmployes", users);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ResponseContainer<ApiRessource>> UpdateOrAddEmployes(List<ApiRessource> users)
		{
			var result = Task.Run(() => UpdateOrAddEmployesAsyncMsg(users)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ResponseContainer<ApiRessource>>>().Result;
			 		}

		/// <summary>
		/// Get Managers
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetManagersAsyncMsg(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/ressources/getManagers/" + userId);
		}

		/// <summary>
		/// Get Managers
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetManagersAsync(Int32 userId)
		{
			return await HttpClient.GetAsync("api/v1/ressources/getManagers/" + userId);
		}

		/// <summary>
		/// Get Managers
		/// </summary>
		/// <param name="userId"></param>
		public virtual Int32[] GetManagers(Int32 userId)
		{
			var result = Task.Run(() => GetManagersAsyncMsg(userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Int32[]>().Result;
			 		}

		/// <summary>
		/// Save New Positions
		/// </summary>
		/// <param name="newPositions"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveNewPositionsAsyncMsg(NewPositions newPositions)
		{
			return await HttpClient.PostAsJsonAsync<NewPositions>("api/v1/ressources/saveNewPositions", newPositions);
		}

		/// <summary>
		/// Save New Positions
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveNewPositionsAsync(NewPositions newPositions)
		{
			return await HttpClient.PostAsJsonAsync<NewPositions>("api/v1/ressources/saveNewPositions", newPositions);
		}

		/// <summary>
		/// Save New Positions
		/// </summary>
		public virtual UpdateResult SaveNewPositions(NewPositions newPositions)
		{
			var result = Task.Run(() => SaveNewPositionsAsyncMsg(newPositions)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Save New Directions
		/// </summary>
		/// <param name="newDirections"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveNewDirectionsAsyncMsg(NewDirections newDirections)
		{
			return await HttpClient.PostAsJsonAsync<NewDirections>("api/v1/ressources/saveNewDirections", newDirections);
		}

		/// <summary>
		/// Save New Directions
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveNewDirectionsAsync(NewDirections newDirections)
		{
			return await HttpClient.PostAsJsonAsync<NewDirections>("api/v1/ressources/saveNewDirections", newDirections);
		}

		/// <summary>
		/// Save New Directions
		/// </summary>
		public virtual UpdateResult SaveNewDirections(NewDirections newDirections)
		{
			var result = Task.Run(() => SaveNewDirectionsAsyncMsg(newDirections)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Save New Roles
		/// </summary>
		/// <param name="newRoles"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveNewRolesAsyncMsg(NewRoles newRoles)
		{
			return await HttpClient.PostAsJsonAsync<NewRoles>("api/v1/ressources/saveNewRoles", newRoles);
		}

		/// <summary>
		/// Save New Roles
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveNewRolesAsync(NewRoles newRoles)
		{
			return await HttpClient.PostAsJsonAsync<NewRoles>("api/v1/ressources/saveNewRoles", newRoles);
		}

		/// <summary>
		/// Save New Roles
		/// </summary>
		public virtual UpdateResult SaveNewRoles(NewRoles newRoles)
		{
			var result = Task.Run(() => SaveNewRolesAsyncMsg(newRoles)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// delete User
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteUserAsyncMsg(Int32 userId)
		{
			return await HttpClient.DeleteAsync("api/v1/ressources/deleteUser/" + userId);
		}

		/// <summary>
		/// delete User
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteUserAsync(Int32 userId)
		{
			return await HttpClient.DeleteAsync("api/v1/ressources/deleteUser/" + userId);
		}

		/// <summary>
		/// delete User
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult DeleteUser(Int32 userId)
		{
			var result = Task.Run(() => DeleteUserAsyncMsg(userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Reactivates user.
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReactivateUserAsyncMsg(Int32 userId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/ressources/reactivateUser/" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Reactivates user.
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReactivateUserAsync(Int32 userId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/ressources/reactivateUser/" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Reactivates user.
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult ReactivateUser(Int32 userId)
		{
			var result = Task.Run(() => ReactivateUserAsyncMsg(userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ImportsClient : ClientBase, Interfaces.IImportsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ImportsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ImportsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="exportType"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFieldsForAsyncMsg(ObjectType exportType)
		{
			return await HttpClient.GetAsync("api/v1/imports/fields/" + exportType);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="exportType"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFieldsForAsync(ObjectType exportType)
		{
			return await HttpClient.GetAsync("api/v1/imports/fields/" + exportType);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="exportType"></param>
		public virtual List<ColumnInfo> GetFieldsFor(ObjectType exportType)
		{
			var result = Task.Run(() => GetFieldsForAsyncMsg(exportType)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ColumnInfo>>().Result;
			 		}

		/// <summary>
		/// Add an import
		/// </summary>
		/// <param name="import">Import to add</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddImportAsyncMsg(ApiImport import)
		{
			return await HttpClient.PostAsJsonAsync<ApiImport>("api/v1/imports", import);
		}

		/// <summary>
		/// Add an import
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddImportAsync(ApiImport import)
		{
			return await HttpClient.PostAsJsonAsync<ApiImport>("api/v1/imports", import);
		}

		/// <summary>
		/// Add an import
		/// </summary>
		public virtual ApiImport AddImport(ApiImport import)
		{
			var result = Task.Run(() => AddImportAsyncMsg(import)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ApiImport>().Result;
			 		}

		/// <summary>
		/// Update an import configuration, report and status
		/// </summary>
		/// <param name="importId">Id of the import to update</param>
		/// <param name="import">Values to update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateImportAsyncMsg(Guid importId,ApiImport import)
		{
			return await HttpClient.PutAsJsonAsync<ApiImport>("api/v1/imports?importId=" + importId, import);
		}

		/// <summary>
		/// Update an import configuration, report and status
		/// </summary>
		/// <param name="importId">Id of the import to update</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateImportAsync(Guid importId,ApiImport import)
		{
			return await HttpClient.PutAsJsonAsync<ApiImport>("api/v1/imports?importId=" + importId, import);
		}

		/// <summary>
		/// Update an import configuration, report and status
		/// </summary>
		/// <param name="importId">Id of the import to update</param>
		public virtual ApiImport UpdateImport(Guid importId,ApiImport import)
		{
			var result = Task.Run(() => UpdateImportAsyncMsg(importId, import)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ApiImport>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ListImportsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/imports");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ListImportsAsync()
		{
			return await HttpClient.GetAsync("api/v1/imports");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ApiImport> ListImports()
		{
			var result = Task.Run(() => ListImportsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ApiImport>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller alowss to configure and execute integrations
	/// </summary>
	public partial class IntegrationsClient : ClientBase, Interfaces.IIntegrationsClient
	{		

		/// <summary>
		/// This controller alowss to configure and execute integrations
		/// </summary>
		public IntegrationsClient() : base()
		{
		}

		/// <summary>
		/// This controller alowss to configure and execute integrations
		/// </summary>
		public IntegrationsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ImportFicheContributionAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/importFicheContribution", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ImportFicheContributionAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/importFicheContribution", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId ImportFicheContribution()
		{
			var result = Task.Run(() => ImportFicheContributionAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AssignOracleProjetAsyncMsg(String oracleId,Int32 BeeyeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/assignOracleProjet?oracleId=" + oracleId + "&BeeyeId=" + BeeyeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AssignOracleProjetAsync(String oracleId,Int32 BeeyeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/assignOracleProjet?oracleId=" + oracleId + "&BeeyeId=" + BeeyeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>
		public virtual UpdateResult AssignOracleProjet(String oracleId,Int32 BeeyeId)
		{
			var result = Task.Run(() => AssignOracleProjetAsyncMsg(oracleId, BeeyeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AssignOracleRessourceAsyncMsg(String oracleId,Int32 BeeyeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/assignOracleRessource?oracleId=" + oracleId + "&BeeyeId=" + BeeyeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AssignOracleRessourceAsync(String oracleId,Int32 BeeyeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/assignOracleRessource?oracleId=" + oracleId + "&BeeyeId=" + BeeyeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="oracleId"></param>
		/// <param name="BeeyeId"></param>
		public virtual UpdateResult AssignOracleRessource(String oracleId,Int32 BeeyeId)
		{
			var result = Task.Run(() => AssignOracleRessourceAsyncMsg(oracleId, BeeyeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadGrGpDataAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/uploadGrGpData", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadGrGpDataAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/uploadGrGpData", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual GtGpImportResult UploadGrGpData()
		{
			var result = Task.Run(() => UploadGrGpDataAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<GtGpImportResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> WipeAsyncMsg()
		{
			return await HttpClient.DeleteAsync("api/v1/connect/wipe");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> WipeAsync()
		{
			return await HttpClient.DeleteAsync("api/v1/connect/wipe");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult Wipe()
		{
			var result = Task.Run(() => WipeAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cfId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateGtGpCustomFieldAsyncMsg(Int32 cfId)
		{
			return await HttpClient.GetAsync("api/v1/connect/UpdateProjectIdField/" + cfId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cfId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateGtGpCustomFieldAsync(Int32 cfId)
		{
			return await HttpClient.GetAsync("api/v1/connect/UpdateProjectIdField/" + cfId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cfId"></param>
		public virtual UpdateResult UpdateGtGpCustomField(Int32 cfId)
		{
			var result = Task.Run(() => UpdateGtGpCustomFieldAsyncMsg(cfId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get Lucca integration configuration
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLuccaConfigAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/connect/GetLuccaConfig");
		}

		/// <summary>
		/// Get Lucca integration configuration
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLuccaConfigAsync()
		{
			return await HttpClient.GetAsync("api/v1/connect/GetLuccaConfig");
		}

		/// <summary>
		/// Get Lucca integration configuration
		/// </summary>
		public virtual LuccaConfig GetLuccaConfig()
		{
			var result = Task.Run(() => GetLuccaConfigAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<LuccaConfig>().Result;
			 		}

		/// <summary>
		/// Get Lucca errors
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLuccaErrorsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/connect/GetLuccaErrors");
		}

		/// <summary>
		/// Get Lucca errors
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLuccaErrorsAsync()
		{
			return await HttpClient.GetAsync("api/v1/connect/GetLuccaErrors");
		}

		/// <summary>
		/// Get Lucca errors
		/// </summary>
		public virtual List<LuccaError> GetLuccaErrors()
		{
			var result = Task.Run(() => GetLuccaErrorsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<LuccaError>>().Result;
			 		}

		/// <summary>
		/// Save Lucca integration configuration
		/// </summary>
		/// <param name="conf"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveLuccaConfigAsyncMsg(LuccaConfig conf)
		{
			return await HttpClient.PostAsJsonAsync<LuccaConfig>("api/v1/connect/SaveLuccaConfig", conf);
		}

		/// <summary>
		/// Save Lucca integration configuration
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveLuccaConfigAsync(LuccaConfig conf)
		{
			return await HttpClient.PostAsJsonAsync<LuccaConfig>("api/v1/connect/SaveLuccaConfig", conf);
		}

		/// <summary>
		/// Save Lucca integration configuration
		/// </summary>
		public virtual UpdateResult SaveLuccaConfig(LuccaConfig conf)
		{
			var result = Task.Run(() => SaveLuccaConfigAsyncMsg(conf)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Verifies if Lucca configuration is good and Lucca APIs can be called
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckLuccaConnexionAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/connect/checkLuccaConnexion");
		}

		/// <summary>
		/// Verifies if Lucca configuration is good and Lucca APIs can be called
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckLuccaConnexionAsync()
		{
			return await HttpClient.GetAsync("api/v1/connect/checkLuccaConnexion");
		}

		/// <summary>
		/// Verifies if Lucca configuration is good and Lucca APIs can be called
		/// </summary>
		public virtual UpdateResult CheckLuccaConnexion()
		{
			var result = Task.Run(() => CheckLuccaConnexionAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Initiates Lucca import for selected users and dates
		/// </summary>
		/// <param name="luccaImportRequest"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ProcessLuccaImportAsyncMsg(DatesRangeRequest<LuccaImportParams> luccaImportRequest)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<LuccaImportParams>>("api/v1/connect/processLuccaImport", luccaImportRequest);
		}

		/// <summary>
		/// Initiates Lucca import for selected users and dates
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ProcessLuccaImportAsync(DatesRangeRequest<LuccaImportParams> luccaImportRequest)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<LuccaImportParams>>("api/v1/connect/processLuccaImport", luccaImportRequest);
		}

		/// <summary>
		/// Initiates Lucca import for selected users and dates
		/// </summary>
		public virtual UpdateResult ProcessLuccaImport(DatesRangeRequest<LuccaImportParams> luccaImportRequest)
		{
			var result = Task.Run(() => ProcessLuccaImportAsyncMsg(luccaImportRequest)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="errorId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteLuccaErrorAsyncMsg(Int32 errorId)
		{
			return await HttpClient.DeleteAsync("api/v1/connect/deleteLuccaError/" + errorId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="errorId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteLuccaErrorAsync(Int32 errorId)
		{
			return await HttpClient.DeleteAsync("api/v1/connect/deleteLuccaError/" + errorId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="errorId"></param>
		public virtual UpdateResult DeleteLuccaError(Int32 errorId)
		{
			var result = Task.Run(() => DeleteLuccaErrorAsyncMsg(errorId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteAllLuccaErrorsAsyncMsg()
		{
			return await HttpClient.DeleteAsync("api/v1/connect/deleteLuccaErrors");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteAllLuccaErrorsAsync()
		{
			return await HttpClient.DeleteAsync("api/v1/connect/deleteLuccaErrors");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult DeleteAllLuccaErrors()
		{
			var result = Task.Run(() => DeleteAllLuccaErrorsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetGTGPConfigAsyncMsg(Int32 compId)
		{
			return await HttpClient.GetAsync("api/v1/connect/GetGTGPConfig/" + compId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetGTGPConfigAsync(Int32 compId)
		{
			return await HttpClient.GetAsync("api/v1/connect/GetGTGPConfig/" + compId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		public virtual GtGpConfig GetGTGPConfig(Int32 compId)
		{
			var result = Task.Run(() => GetGTGPConfigAsyncMsg(compId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<GtGpConfig>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="cfId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateGtGpConfigAsyncMsg(Int32 compId,Int32 cfId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/UpdateGtGpConfig/" + compId + "/" + cfId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="cfId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateGtGpConfigAsync(Int32 compId,Int32 cfId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/UpdateGtGpConfig/" + compId + "/" + cfId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="cfId"></param>
		public virtual UpdateResult UpdateGtGpConfig(Int32 compId,Int32 cfId)
		{
			var result = Task.Run(() => UpdateGtGpConfigAsyncMsg(compId, cfId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="type"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ForceSyncAsyncMsg(IntegrationType type)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/ForceSync?type=" + type, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="type"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ForceSyncAsync(IntegrationType type)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/ForceSync?type=" + type, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="type"></param>
		public virtual UpdateResult ForceSync(IntegrationType type)
		{
			var result = Task.Run(() => ForceSyncAsyncMsg(type)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="compExternalId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConfigurationsAsyncMsg(Nullable<Int32> compId,String compExternalId)
		{
			return await HttpClient.GetAsync("api/v1/integrations/" + compId + "?compExternalId=" + compExternalId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="compExternalId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConfigurationsAsync(Nullable<Int32> compId,String compExternalId)
		{
			return await HttpClient.GetAsync("api/v1/integrations/" + compId + "?compExternalId=" + compExternalId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="compExternalId"></param>
		public virtual List<IntegrationConfigurationBasic> GetConfigurations(Nullable<Int32> compId,String compExternalId)
		{
			var result = Task.Run(() => GetConfigurationsAsyncMsg(compId, compExternalId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<IntegrationConfigurationBasic>>().Result;
			 		}

		/// <summary>
		/// Reexecute a Lucca requests in error
		/// </summary>
		/// <param name="errorId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RerunLuccaAsyncMsg(Int32 errorId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/RerunLucca/" + errorId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Reexecute a Lucca requests in error
		/// </summary>
		/// <param name="errorId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RerunLuccaAsync(Int32 errorId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/connect/RerunLucca/" + errorId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Reexecute a Lucca requests in error
		/// </summary>
		/// <param name="errorId"></param>
		public virtual UpdateResult RerunLucca(Int32 errorId)
		{
			var result = Task.Run(() => RerunLuccaAsyncMsg(errorId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="newConfiguration"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateConfigurationsSellsyAsyncMsg(Int32 compId,IntegrationConfigurationSellsy newConfiguration)
		{
			return await HttpClient.PostAsJsonAsync<IntegrationConfigurationSellsy>("api/v1/integrations/" + compId, newConfiguration);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateConfigurationsSellsyAsync(Int32 compId,IntegrationConfigurationSellsy newConfiguration)
		{
			return await HttpClient.PostAsJsonAsync<IntegrationConfigurationSellsy>("api/v1/integrations/" + compId, newConfiguration);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="compId"></param>
		public virtual UpdateResult UpdateConfigurationsSellsy(Int32 compId,IntegrationConfigurationSellsy newConfiguration)
		{
			var result = Task.Run(() => UpdateConfigurationsSellsyAsyncMsg(compId, newConfiguration)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="datesRangeRequest"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GenerateSellsyInvoiceAsyncMsg(DatesRangeRequest<Int32> datesRangeRequest)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/integrations/sellsy/generateInvoice", datesRangeRequest);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateSellsyInvoiceAsync(DatesRangeRequest<Int32> datesRangeRequest)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/integrations/sellsy/generateInvoice", datesRangeRequest);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult GenerateSellsyInvoice(DatesRangeRequest<Int32> datesRangeRequest)
		{
			var result = Task.Run(() => GenerateSellsyInvoiceAsyncMsg(datesRangeRequest)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class InvoicesClient : ClientBase, Interfaces.IInvoicesClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public InvoicesClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public InvoicesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Deletes existing invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteInvoiceAsyncMsg(Int32 invoiceId)
		{
			return await HttpClient.DeleteAsync("api/v1/invoices/deleteInvoice?invoiceId=" + invoiceId);
		}

		/// <summary>
		/// Deletes existing invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteInvoiceAsync(Int32 invoiceId)
		{
			return await HttpClient.DeleteAsync("api/v1/invoices/deleteInvoice?invoiceId=" + invoiceId);
		}

		/// <summary>
		/// Deletes existing invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual UpdateResult DeleteInvoice(Int32 invoiceId)
		{
			var result = Task.Run(() => DeleteInvoiceAsyncMsg(invoiceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Gets detailled information about one invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetInvoiceDetailsAsyncMsg(Int32 invoiceId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/" + invoiceId);
		}

		/// <summary>
		/// Gets detailled information about one invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetInvoiceDetailsAsync(Int32 invoiceId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/" + invoiceId);
		}

		/// <summary>
		/// Gets detailled information about one invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual Invoiced GetInvoiceDetails(Int32 invoiceId)
		{
			var result = Task.Run(() => GetInvoiceDetailsAsyncMsg(invoiceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Invoiced>().Result;
			 		}

		/// <summary>
		/// Add files to a invoiced. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddFilesToInvoiceAsyncMsg(Int32 invoiceId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/invoices/addFilesToInvoice/" + invoiceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add files to a invoiced. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddFilesToInvoiceAsync(Int32 invoiceId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/invoices/addFilesToInvoice/" + invoiceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add files to a invoiced. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual UpdateResultWithId AddFilesToInvoice(Int32 invoiceId)
		{
			var result = Task.Run(() => AddFilesToInvoiceAsyncMsg(invoiceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns the list of files for an invoiced
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFilesListForInvoiceAsyncMsg(Int32 invoiceId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/getFilesListForInvoice/" + invoiceId);
		}

		/// <summary>
		/// Returns the list of files for an invoiced
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFilesListForInvoiceAsync(Int32 invoiceId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/getFilesListForInvoice/" + invoiceId);
		}

		/// <summary>
		/// Returns the list of files for an invoiced
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual List<UploadedFile> GetFilesListForInvoice(Int32 invoiceId)
		{
			var result = Task.Run(() => GetFilesListForInvoiceAsyncMsg(invoiceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UploadedFile>>().Result;
			 		}

		/// <summary>
		/// Gets all invoices for a project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllInvoicesForProjectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/getInvoicesForProject/" + projectId);
		}

		/// <summary>
		/// Gets all invoices for a project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllInvoicesForProjectAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/getInvoicesForProject/" + projectId);
		}

		/// <summary>
		/// Gets all invoices for a project
		/// </summary>
		/// <param name="projectId"></param>
		public virtual List<Invoiced> GetAllInvoicesForProject(Int32 projectId)
		{
			var result = Task.Run(() => GetAllInvoicesForProjectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Invoiced>>().Result;
			 		}

		/// <summary>
		/// Returns all the invoices for all the projects
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllInvoicesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/invoices");
		}

		/// <summary>
		/// Returns all the invoices for all the projects
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllInvoicesAsync()
		{
			return await HttpClient.GetAsync("api/v1/invoices");
		}

		/// <summary>
		/// Returns all the invoices for all the projects
		/// </summary>
		public virtual List<Invoiced> GetAllInvoices()
		{
			var result = Task.Run(() => GetAllInvoicesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Invoiced>>().Result;
			 		}

		/// <summary>
		/// Updates invoice status (paied / not paied)
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <param name="newValue"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdatePaiedStatusAsyncMsg(Int32 invoiceId,Boolean newValue)
		{
			return await HttpClient.PutAsJsonAsync<Boolean>("api/v1/invoices/updatePaiedStatus/" + invoiceId, newValue);
		}

		/// <summary>
		/// Updates invoice status (paied / not paied)
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdatePaiedStatusAsync(Int32 invoiceId,Boolean newValue)
		{
			return await HttpClient.PutAsJsonAsync<Boolean>("api/v1/invoices/updatePaiedStatus/" + invoiceId, newValue);
		}

		/// <summary>
		/// Updates invoice status (paied / not paied)
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual UpdateResult UpdatePaiedStatus(Int32 invoiceId,Boolean newValue)
		{
			var result = Task.Run(() => UpdatePaiedStatusAsyncMsg(invoiceId, newValue)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update list of invoiced information
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateListInvoicedAsyncMsg(RequestSelectedBulkAction data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedBulkAction>("api/v1/invoices/updateListInvoiced", data);
		}

		/// <summary>
		/// Update list of invoiced information
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateListInvoicedAsync(RequestSelectedBulkAction data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedBulkAction>("api/v1/invoices/updateListInvoiced", data);
		}

		/// <summary>
		/// Update list of invoiced information
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess UpdateListInvoiced(RequestSelectedBulkAction data)
		{
			var result = Task.Run(() => UpdateListInvoicedAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Creates a new invoice if id is 0 or negatif.
		/// Udates existing invoice if id > 0
		/// </summary>
		/// <param name="invoice"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateInvoiceAsyncMsg(Invoiced invoice)
		{
			return await HttpClient.PostAsJsonAsync<Invoiced>("api/v1/invoices/createOrUpdateInvoice", invoice);
		}

		/// <summary>
		/// Creates a new invoice if id is 0 or negatif.
		/// Udates existing invoice if id > 0
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateInvoiceAsync(Invoiced invoice)
		{
			return await HttpClient.PostAsJsonAsync<Invoiced>("api/v1/invoices/createOrUpdateInvoice", invoice);
		}

		/// <summary>
		/// Creates a new invoice if id is 0 or negatif.
		/// Udates existing invoice if id > 0
		/// </summary>
		public virtual UpdateResultWithId CreateOrUpdateInvoice(Invoiced invoice)
		{
			var result = Task.Run(() => CreateOrUpdateInvoiceAsyncMsg(invoice)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Insert or update a list of invoices
		/// </summary>
		/// <param name="invoices"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateInvoicesOldAsyncMsg(List<Invoiced> invoices)
		{
			return await HttpClient.PostAsJsonAsync<List<Invoiced>>("api/v1/invoices/createOrUpdateInvoices", invoices);
		}

		/// <summary>
		/// Insert or update a list of invoices
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateInvoicesOldAsync(List<Invoiced> invoices)
		{
			return await HttpClient.PostAsJsonAsync<List<Invoiced>>("api/v1/invoices/createOrUpdateInvoices", invoices);
		}

		/// <summary>
		/// Insert or update a list of invoices
		/// </summary>
		public virtual UpdateResultWithId CreateOrUpdateInvoicesOld(List<Invoiced> invoices)
		{
			var result = Task.Run(() => CreateOrUpdateInvoicesOldAsyncMsg(invoices)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Insert or update a list of invoices
		/// </summary>
		/// <param name="invoices"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateInvoicesAsyncMsg(List<Invoiced> invoices)
		{
			return await HttpClient.PostAsJsonAsync<List<Invoiced>>("api/v2/invoices/createOrUpdateInvoices", invoices);
		}

		/// <summary>
		/// Insert or update a list of invoices
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateInvoicesAsync(List<Invoiced> invoices)
		{
			return await HttpClient.PostAsJsonAsync<List<Invoiced>>("api/v2/invoices/createOrUpdateInvoices", invoices);
		}

		/// <summary>
		/// Insert or update a list of invoices
		/// </summary>
		public virtual List<ResponseContainer<Invoiced>> CreateOrUpdateInvoices(List<Invoiced> invoices)
		{
			var result = Task.Run(() => CreateOrUpdateInvoicesAsyncMsg(invoices)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ResponseContainer<Invoiced>>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Dashboard and KPI data
	/// </summary>
	public partial class KpiClient : ClientBase, Interfaces.IKpiClient
	{		

		/// <summary>
		/// Dashboard and KPI data
		/// </summary>
		public KpiClient() : base()
		{
		}

		/// <summary>
		/// Dashboard and KPI data
		/// </summary>
		public KpiClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// get the dashboard info of a Project Success
		/// </summary>
		/// <param name="request">the Project Success info</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectSuccessByProjectAsyncMsg(DatesRangeFilteredRequest<ProjectSuccessComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ProjectSuccessComponent>>("api/v1/kpi/GetProjectSuccessByProject", request);
		}

		/// <summary>
		/// get the dashboard info of a Project Success
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectSuccessByProjectAsync(DatesRangeFilteredRequest<ProjectSuccessComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ProjectSuccessComponent>>("api/v1/kpi/GetProjectSuccessByProject", request);
		}

		/// <summary>
		/// get the dashboard info of a Project Success
		/// </summary>
		public virtual List<ProjectSuccessReturn> GetProjectSuccessByProject(DatesRangeFilteredRequest<ProjectSuccessComponent> request)
		{
			var result = Task.Run(() => GetProjectSuccessByProjectAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectSuccessReturn>>().Result;
			 		}

		/// <summary>
		/// get the dashboard info of a Project Success Pie
		/// </summary>
		/// <param name="request">the Project Success Pie info</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectSuccessPieAsyncMsg(DatesRangeFilteredRequest<ProjectSuccessPieComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ProjectSuccessPieComponent>>("api/v1/kpi/GetProjectSuccessPie", request);
		}

		/// <summary>
		/// get the dashboard info of a Project Success Pie
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectSuccessPieAsync(DatesRangeFilteredRequest<ProjectSuccessPieComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ProjectSuccessPieComponent>>("api/v1/kpi/GetProjectSuccessPie", request);
		}

		/// <summary>
		/// get the dashboard info of a Project Success Pie
		/// </summary>
		public virtual Int32[] GetProjectSuccessPie(DatesRangeFilteredRequest<ProjectSuccessPieComponent> request)
		{
			var result = Task.Run(() => GetProjectSuccessPieAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Int32[]>().Result;
			 		}

		/// <summary>
		/// get the dashboard info of a Single Number CustomFields
		/// </summary>
		/// <param name="request">the Single Number CustomFields info</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSingleValueCustomFieldKpiAsyncMsg(DatesRangeFilteredRequest<KpiSingleNumberCustomFields> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<KpiSingleNumberCustomFields>>("api/v1/kpi/GetSingleValueCustomFieldKpi", request);
		}

		/// <summary>
		/// get the dashboard info of a Single Number CustomFields
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSingleValueCustomFieldKpiAsync(DatesRangeFilteredRequest<KpiSingleNumberCustomFields> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<KpiSingleNumberCustomFields>>("api/v1/kpi/GetSingleValueCustomFieldKpi", request);
		}

		/// <summary>
		/// get the dashboard info of a Single Number CustomFields
		/// </summary>
		public virtual KpiSingleNumberCustomFieldsValue GetSingleValueCustomFieldKpi(DatesRangeFilteredRequest<KpiSingleNumberCustomFields> request)
		{
			var result = Task.Run(() => GetSingleValueCustomFieldKpiAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<KpiSingleNumberCustomFieldsValue>().Result;
			 		}

		/// <summary>
		/// Save the DashBoard
		/// </summary>
		/// <param name="request">the DashBoard info</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveDashBoardAsyncMsg(DatesRangeFilteredRequest<GraphInfo> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<GraphInfo>>("api/v1/kpi/SaveDashBoard", request);
		}

		/// <summary>
		/// Save the DashBoard
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveDashBoardAsync(DatesRangeFilteredRequest<GraphInfo> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<GraphInfo>>("api/v1/kpi/SaveDashBoard", request);
		}

		/// <summary>
		/// Save the DashBoard
		/// </summary>
		public virtual UpdateResultWithId SaveDashBoard(DatesRangeFilteredRequest<GraphInfo> request)
		{
			var result = Task.Run(() => SaveDashBoardAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Save the filter for DashBoard
		/// </summary>
		/// <param name="request">the filter with dates</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveFiltersDashBoardAsyncMsg(DatesRangeFilteredRequest<Int32> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Int32>>("api/v1/kpi/SaveFiltersDashBoard", request);
		}

		/// <summary>
		/// Save the filter for DashBoard
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveFiltersDashBoardAsync(DatesRangeFilteredRequest<Int32> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Int32>>("api/v1/kpi/SaveFiltersDashBoard", request);
		}

		/// <summary>
		/// Save the filter for DashBoard
		/// </summary>
		public virtual UpdateResult SaveFiltersDashBoard(DatesRangeFilteredRequest<Int32> request)
		{
			var result = Task.Run(() => SaveFiltersDashBoardAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Delete save dashboard
		/// </summary>
		/// <param name="id">Id of the dashboard</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteDashboardAsyncMsg(Int32 id)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/kpi/DeleteDashboard?id=" + id, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete save dashboard
		/// </summary>
		/// <param name="id">Id of the dashboard</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteDashboardAsync(Int32 id)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/kpi/DeleteDashboard?id=" + id, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete save dashboard
		/// </summary>
		/// <param name="id">Id of the dashboard</param>
		public virtual UpdateResult DeleteDashboard(Int32 id)
		{
			var result = Task.Run(() => DeleteDashboardAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Shared Dashboard
		/// </summary>
		/// <param name="request">param</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateSharedDashboardAsyncMsg(ShareDashboardParam request)
		{
			return await HttpClient.PostAsJsonAsync<ShareDashboardParam>("api/v1/kpi/UpdateSharedDashboard", request);
		}

		/// <summary>
		/// Update Shared Dashboard
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateSharedDashboardAsync(ShareDashboardParam request)
		{
			return await HttpClient.PostAsJsonAsync<ShareDashboardParam>("api/v1/kpi/UpdateSharedDashboard", request);
		}

		/// <summary>
		/// Update Shared Dashboard
		/// </summary>
		public virtual UpdateResult UpdateSharedDashboard(ShareDashboardParam request)
		{
			var result = Task.Run(() => UpdateSharedDashboardAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get Shared Dashboard
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSharedDashboardAsyncMsg(String id)
		{
			return await HttpClient.GetAsync("api/v1/kpi/GetSharedDashboard?id=" + id);
		}

		/// <summary>
		/// Get Shared Dashboard
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSharedDashboardAsync(String id)
		{
			return await HttpClient.GetAsync("api/v1/kpi/GetSharedDashboard?id=" + id);
		}

		/// <summary>
		/// Get Shared Dashboard
		/// </summary>
		/// <param name="id"></param>
		public virtual SharedDashboard GetSharedDashboard(String id)
		{
			var result = Task.Run(() => GetSharedDashboardAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<SharedDashboard>().Result;
			 		}

		/// <summary>
		/// Get Shared Dashboards List
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSharedDashboardsListAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/kpi/GetSharedDashboardsList");
		}

		/// <summary>
		/// Get Shared Dashboards List
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSharedDashboardsListAsync()
		{
			return await HttpClient.GetAsync("api/v1/kpi/GetSharedDashboardsList");
		}

		/// <summary>
		/// Get Shared Dashboards List
		/// </summary>
		public virtual List<SharedDashboard> GetSharedDashboardsList()
		{
			var result = Task.Run(() => GetSharedDashboardsListAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SharedDashboard>>().Result;
			 		}

		/// <summary>
		/// Delete Shared Dashboard
		/// </summary>
		/// <param name="Id">id</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteSharedDashboardAsyncMsg(String Id)
		{
			return await HttpClient.DeleteAsync("api/v1/kpi/DeleteSharedDashboard?Id=" + Id);
		}

		/// <summary>
		/// Delete Shared Dashboard
		/// </summary>
		/// <param name="Id">id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSharedDashboardAsync(String Id)
		{
			return await HttpClient.DeleteAsync("api/v1/kpi/DeleteSharedDashboard?Id=" + Id);
		}

		/// <summary>
		/// Delete Shared Dashboard
		/// </summary>
		/// <param name="Id">id</param>
		public virtual UpdateResult DeleteSharedDashboard(String Id)
		{
			var result = Task.Run(() => DeleteSharedDashboardAsyncMsg(Id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Share Dashboard
		/// </summary>
		/// <param name="request">param</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ShareDashboardAsyncMsg(ShareDashboardParam request)
		{
			return await HttpClient.PostAsJsonAsync<ShareDashboardParam>("api/v1/kpi/ShareDashboard", request);
		}

		/// <summary>
		/// Share Dashboard
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ShareDashboardAsync(ShareDashboardParam request)
		{
			return await HttpClient.PostAsJsonAsync<ShareDashboardParam>("api/v1/kpi/ShareDashboard", request);
		}

		/// <summary>
		/// Share Dashboard
		/// </summary>
		public virtual UpdateResult ShareDashboard(ShareDashboardParam request)
		{
			var result = Task.Run(() => ShareDashboardAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get a dashboard with id
		/// </summary>
		/// <param name="id">Id of the dashboard</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDashboardAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/kpi/GetDashboard?id=" + id);
		}

		/// <summary>
		/// Get a dashboard with id
		/// </summary>
		/// <param name="id">Id of the dashboard</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDashboardAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/kpi/GetDashboard?id=" + id);
		}

		/// <summary>
		/// Get a dashboard with id
		/// </summary>
		/// <param name="id">Id of the dashboard</param>
		public virtual List<BaseDashboardComponent> GetDashboard(Int32 id)
		{
			var result = Task.Run(() => GetDashboardAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<BaseDashboardComponent>>().Result;
			 		}

		/// <summary>
		/// Return data grouped by title
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCapacityGraphByPosteAsyncMsg(DatesRangeFilteredRequest<GraphCapacityByOccupation> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<GraphCapacityByOccupation>>("api/v1/kpi/GetCapacityGraphByPoste", request);
		}

		/// <summary>
		/// Return data grouped by title
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCapacityGraphByPosteAsync(DatesRangeFilteredRequest<GraphCapacityByOccupation> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<GraphCapacityByOccupation>>("api/v1/kpi/GetCapacityGraphByPoste", request);
		}

		/// <summary>
		/// Return data grouped by title
		/// </summary>
		public virtual GraphCapacityByOccupationValue GetCapacityGraphByPoste(DatesRangeFilteredRequest<GraphCapacityByOccupation> request)
		{
			var result = Task.Run(() => GetCapacityGraphByPosteAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<GraphCapacityByOccupationValue>().Result;
			 		}

		/// <summary>
		/// Returns capacity data based on request data
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCapacityGraphAsyncMsg(DatesRangeFilteredRequest<CapacityGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<CapacityGraphComponent>>("api/v1/kpi/GetCapacityGraph", request);
		}

		/// <summary>
		/// Returns capacity data based on request data
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCapacityGraphAsync(DatesRangeFilteredRequest<CapacityGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<CapacityGraphComponent>>("api/v1/kpi/GetCapacityGraph", request);
		}

		/// <summary>
		/// Returns capacity data based on request data
		/// </summary>
		public virtual CapacityGraphComponentResults GetCapacityGraph(DatesRangeFilteredRequest<CapacityGraphComponent> request)
		{
			var result = Task.Run(() => GetCapacityGraphAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<CapacityGraphComponentResults>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRatioGraphAsyncMsg(DatesRangeFilteredRequest<RatioGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RatioGraphComponent>>("api/v1/kpi/GetRatioGraph", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRatioGraphAsync(DatesRangeFilteredRequest<RatioGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RatioGraphComponent>>("api/v1/kpi/GetRatioGraph", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual TimeByCustomFieldReturnType GetRatioGraph(DatesRangeFilteredRequest<RatioGraphComponent> request)
		{
			var result = Task.Run(() => GetRatioGraphAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeByCustomFieldReturnType>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetComparisonGraphAsyncMsg(DatesRangeFilteredRequest<ComparisonGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ComparisonGraphComponent>>("api/v1/kpi/GetComparisonGraph", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetComparisonGraphAsync(DatesRangeFilteredRequest<ComparisonGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ComparisonGraphComponent>>("api/v1/kpi/GetComparisonGraph", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ComparisonGraphReturnType> GetComparisonGraph(DatesRangeFilteredRequest<ComparisonGraphComponent> request)
		{
			var result = Task.Run(() => GetComparisonGraphAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ComparisonGraphReturnType>>().Result;
			 		}

		/// <summary>
		/// A helper method
		/// </summary>
		/// <param name="startDate"></param>
		/// <param name="endDate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimeByCustomFieldGraphInternalAsyncMsg(DateTime startDate,DateTime endDate)
		{
			return await HttpClient.GetAsync("api/Kpi?startDate=" + startDate.ToString("o") + "&endDate=" + endDate.ToString("o"));
		}

		/// <summary>
		/// A helper method
		/// </summary>
		/// <param name="startDate"></param>
		/// <param name="endDate"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimeByCustomFieldGraphInternalAsync(DateTime startDate,DateTime endDate)
		{
			return await HttpClient.GetAsync("api/Kpi?startDate=" + startDate.ToString("o") + "&endDate=" + endDate.ToString("o"));
		}

		/// <summary>
		/// A helper method
		/// </summary>
		/// <param name="startDate"></param>
		/// <param name="endDate"></param>
		public virtual TimeByCustomFieldReturnType GetTimeByCustomFieldGraphInternal(DateTime startDate,DateTime endDate)
		{
			var result = Task.Run(() => GetTimeByCustomFieldGraphInternalAsyncMsg(startDate, endDate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeByCustomFieldReturnType>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class LoginClient : ClientBase, Interfaces.ILoginClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public LoginClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public LoginClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Method used to login with a provided API key.
		/// Login information is stored in the cookies.
		/// </summary>
		/// <param name="apiKey">Authentication key for the company</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ApiLoginAsyncMsg(String apiKey)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/auth/apiLogin?apiKey=" + apiKey, default(HttpResponseMessage));
		}

		/// <summary>
		/// Method used to login with a provided API key.
		/// Login information is stored in the cookies.
		/// </summary>
		/// <param name="apiKey">Authentication key for the company</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ApiLoginAsync(String apiKey)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/auth/apiLogin?apiKey=" + apiKey, default(HttpResponseMessage));
		}

		/// <summary>
		/// Method used to login with a provided API key.
		/// Login information is stored in the cookies.
		/// </summary>
		/// <param name="apiKey">Authentication key for the company</param>
		public virtual UpdateResultWithId ApiLogin(String apiKey)
		{
			var result = Task.Run(() => ApiLoginAsyncMsg(apiKey)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="credentials"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UserLoginAsyncMsg(LoginParams credentials)
		{
			return await HttpClient.PostAsJsonAsync<LoginParams>("api/v1/auth/userLogin", credentials);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UserLoginAsync(LoginParams credentials)
		{
			return await HttpClient.PostAsJsonAsync<LoginParams>("api/v1/auth/userLogin", credentials);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId UserLogin(LoginParams credentials)
		{
			var result = Task.Run(() => UserLoginAsyncMsg(credentials)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> IsLoggedAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/auth/isLoged");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> IsLoggedAsync()
		{
			return await HttpClient.GetAsync("api/v1/auth/isLoged");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId IsLogged()
		{
			var result = Task.Run(() => IsLoggedAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> LogOutAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/auth/logOut");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LogOutAsync()
		{
			return await HttpClient.GetAsync("api/v1/auth/logOut");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean LogOut()
		{
			var result = Task.Run(() => LogOutAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ResetPasswordAsyncMsg(String email)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/auth/resetPassword", email);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ResetPasswordAsync(String email)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/auth/resetPassword", email);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult ResetPassword(String email)
		{
			var result = Task.Run(() => ResetPasswordAsyncMsg(email)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class MobileAuthClient : ClientBase, Interfaces.IMobileAuthClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public MobileAuthClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public MobileAuthClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/mobileauth/microsoft");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAsync()
		{
			return await HttpClient.GetAsync("api/v1/mobileauth/microsoft");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void Get()
		{
			var result = Task.Run(() => GetAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class NotificationClient : ClientBase, Interfaces.INotificationClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public NotificationClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public NotificationClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// enable or disable the notification Submit Subscription
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleSubmitSubscriptionAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleSubmitSubscription", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable or disable the notification Submit Subscription
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleSubmitSubscriptionAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleSubmitSubscription", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable or disable the notification Submit Subscription
		/// </summary>
		public virtual UpdateResultWithId ToggleSubmitSubscription()
		{
			var result = Task.Run(() => ToggleSubmitSubscriptionAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// enable or disable the notification Reject Subscription
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleRejectedSubscriptionAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleRejectedSubscription", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable or disable the notification Reject Subscription
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleRejectedSubscriptionAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleRejectedSubscription", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable or disable the notification Reject Subscription
		/// </summary>
		public virtual UpdateResultWithId ToggleRejectedSubscription()
		{
			var result = Task.Run(() => ToggleRejectedSubscriptionAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// enable/disable the notification Edited Planning
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleEditedPlanningAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleEditedPlanning", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Edited Planning
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleEditedPlanningAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleEditedPlanning", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Edited Planning
		/// </summary>
		public virtual UpdateResultWithId ToggleEditedPlanning()
		{
			var result = Task.Run(() => ToggleEditedPlanningAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// enable/disable the notification Validated Comments Timesheet
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleValidatedCommentsTimesheetAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleValidatedCommentsTimesheet", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Validated Comments Timesheet
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleValidatedCommentsTimesheetAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleValidatedCommentsTimesheet", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Validated Comments Timesheet
		/// </summary>
		public virtual UpdateResultWithId ToggleValidatedCommentsTimesheet()
		{
			var result = Task.Run(() => ToggleValidatedCommentsTimesheetAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// enable/disable the notification Validated Subscription
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleValidatedSubscriptionAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleValidatedSubscription", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Validated Subscription
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleValidatedSubscriptionAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleValidatedSubscription", default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Validated Subscription
		/// </summary>
		public virtual UpdateResultWithId ToggleValidatedSubscription()
		{
			var result = Task.Run(() => ToggleValidatedSubscriptionAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// enable/disable the notification Task Subscription
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleTaskSubscriptionAsyncMsg(Int32 taskId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleTaskSubscription?taskId=" + taskId, default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Task Subscription
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleTaskSubscriptionAsync(Int32 taskId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleTaskSubscription?taskId=" + taskId, default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Task Subscription
		/// </summary>
		/// <param name="taskId"></param>
		public virtual UpdateResultWithId ToggleTaskSubscription(Int32 taskId)
		{
			var result = Task.Run(() => ToggleTaskSubscriptionAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// enable/disable the notification Project Type Subscription
		/// </summary>
		/// <param name="projectTypeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleProjectTypeSubscriptionAsyncMsg(Int32 projectTypeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleProjectTypeSubscription?projectTypeId=" + projectTypeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Project Type Subscription
		/// </summary>
		/// <param name="projectTypeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleProjectTypeSubscriptionAsync(Int32 projectTypeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/notification/ToggleProjectTypeSubscription?projectTypeId=" + projectTypeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// enable/disable the notification Project Type Subscription
		/// </summary>
		/// <param name="projectTypeId"></param>
		public virtual UpdateResultWithId ToggleProjectTypeSubscription(Int32 projectTypeId)
		{
			var result = Task.Run(() => ToggleProjectTypeSubscriptionAsyncMsg(projectTypeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Get User Notifications List
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUserNotificationsListAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/notification/GetUserNotificationsList");
		}

		/// <summary>
		/// Get User Notifications List
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserNotificationsListAsync()
		{
			return await HttpClient.GetAsync("api/v1/notification/GetUserNotificationsList");
		}

		/// <summary>
		/// Get User Notifications List
		/// </summary>
		public virtual UserNotificationsList GetUserNotificationsList()
		{
			var result = Task.Run(() => GetUserNotificationsListAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UserNotificationsList>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIs for getting and saving planning by project
	/// </summary>
	public partial class PlanningClient : ClientBase, Interfaces.IPlanningClient
	{		

		/// <summary>
		/// APIs for getting and saving planning by project
		/// </summary>
		public PlanningClient() : base()
		{
		}

		/// <summary>
		/// APIs for getting and saving planning by project
		/// </summary>
		public PlanningClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTaskPlanningAsyncMsg(Nullable<Int32> projectId,Nullable<Int32> resourceId,Nullable<Int32> taskId)
		{
			return await HttpClient.GetAsync("api/v1/planning/crud?projectId=" + projectId + "&resourceId=" + resourceId + "&taskId=" + taskId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTaskPlanningAsync(Nullable<Int32> projectId,Nullable<Int32> resourceId,Nullable<Int32> taskId)
		{
			return await HttpClient.GetAsync("api/v1/planning/crud?projectId=" + projectId + "&resourceId=" + resourceId + "&taskId=" + taskId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual List<TaskPlanning> GetTaskPlanning(Nullable<Int32> projectId,Nullable<Int32> resourceId,Nullable<Int32> taskId)
		{
			var result = Task.Run(() => GetTaskPlanningAsyncMsg(projectId, resourceId, taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskPlanning>>().Result;
			 		}

		/// <summary>
		/// Get projects or ressources planning.
		/// </summary>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlanningAsyncMsg(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning", search);
		}

		/// <summary>
		/// Get projects or ressources planning.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlanningAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning", search);
		}

		/// <summary>
		/// Get projects or ressources planning.
		/// </summary>
		public virtual PlanningResult GetPlanning(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetPlanningAsyncMsg(search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PlanningResult>().Result;
			 		}

		/// <summary>
		/// Delete Plannings Views
		/// </summary>
		/// <param name="viewId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeletePlanningViewAsyncMsg(Int32 viewId)
		{
			return await HttpClient.DeleteAsync("api/v1/planning/deletePlanningView?viewId=" + viewId);
		}

		/// <summary>
		/// Delete Plannings Views
		/// </summary>
		/// <param name="viewId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeletePlanningViewAsync(Int32 viewId)
		{
			return await HttpClient.DeleteAsync("api/v1/planning/deletePlanningView?viewId=" + viewId);
		}

		/// <summary>
		/// Delete Plannings Views
		/// </summary>
		/// <param name="viewId"></param>
		public virtual UpdateResult DeletePlanningView(Int32 viewId)
		{
			var result = Task.Run(() => DeletePlanningViewAsyncMsg(viewId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SavePreferencesPlannificationAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/planning/savePreferencesPlannification", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SavePreferencesPlannificationAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/planning/savePreferencesPlannification", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SavePreferencesPlannification()
		{
			var result = Task.Run(() => SavePreferencesPlannificationAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// Change planning View order, need to know when is a planning normal/conflict
		/// </summary>
		/// <param name="normal"></param>
		/// <param name="conflict"></param>
		/// <param name="newOrder"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangePlanningOrderAsyncMsg(Boolean normal,Boolean conflict,Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/planning/ChangePlanningOrder/" + normal + "/" + conflict, newOrder);
		}

		/// <summary>
		/// Change planning View order, need to know when is a planning normal/conflict
		/// </summary>
		/// <param name="normal"></param>
		/// <param name="conflict"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangePlanningOrderAsync(Boolean normal,Boolean conflict,Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/planning/ChangePlanningOrder/" + normal + "/" + conflict, newOrder);
		}

		/// <summary>
		/// Change planning View order, need to know when is a planning normal/conflict
		/// </summary>
		/// <param name="normal"></param>
		/// <param name="conflict"></param>
		public virtual UpdateResult ChangePlanningOrder(Boolean normal,Boolean conflict,Int32[] newOrder)
		{
			var result = Task.Run(() => ChangePlanningOrderAsyncMsg(normal, conflict, newOrder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddNewPlanningViewAsyncMsg(DatesRangeFilteredRequestPagination<UserPreferencesPlanningParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesPlanningParam>>("api/v1/planning/addNewPlanningView", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddNewPlanningViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesPlanningParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesPlanningParam>>("api/v1/planning/addNewPlanningView", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId AddNewPlanningView(DatesRangeFilteredRequestPagination<UserPreferencesPlanningParam> param)
		{
			var result = Task.Run(() => AddNewPlanningViewAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Delete Plannings Views
		/// </summary>
		/// <param name="viewsIdList"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeletePlanningViewsAsyncMsg(List<Int32> viewsIdList)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/planning/deletePlanningsViews", viewsIdList);
		}

		/// <summary>
		/// Delete Plannings Views
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeletePlanningViewsAsync(List<Int32> viewsIdList)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/planning/deletePlanningsViews", viewsIdList);
		}

		/// <summary>
		/// Delete Plannings Views
		/// </summary>
		public virtual UpdateResult DeletePlanningViews(List<Int32> viewsIdList)
		{
			var result = Task.Run(() => DeletePlanningViewsAsyncMsg(viewsIdList)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get sum planif.
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllPlanifRealAsyncMsg(Int32 companyId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/planning/api/v1/planning/GetAllPlanifReal?companyId=" + companyId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Get sum planif.
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllPlanifRealAsync(Int32 companyId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/planning/api/v1/planning/GetAllPlanifReal?companyId=" + companyId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Get sum planif.
		/// </summary>
		/// <param name="companyId"></param>
		public virtual List<Double> GetAllPlanifReal(Int32 companyId)
		{
			var result = Task.Run(() => GetAllPlanifRealAsyncMsg(companyId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Double>>().Result;
			 		}

		/// <summary>
		/// Get projects or ressources planning for graph.
		/// </summary>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlanifGraphAsyncMsg(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetPlanifGraph", search);
		}

		/// <summary>
		/// Get projects or ressources planning for graph.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlanifGraphAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetPlanifGraph", search);
		}

		/// <summary>
		/// Get projects or ressources planning for graph.
		/// </summary>
		public virtual List<Double> GetPlanifGraph(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetPlanifGraphAsyncMsg(search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Double>>().Result;
			 		}

		/// <summary>
		/// Get if their is planning for a RESSOURCE
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetIfRessHavePlanifAsyncMsg(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetIfRessHavePlanif?ressourceId=" + ressourceId, search);
		}

		/// <summary>
		/// Get if their is planning for a RESSOURCE
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetIfRessHavePlanifAsync(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetIfRessHavePlanif?ressourceId=" + ressourceId, search);
		}

		/// <summary>
		/// Get if their is planning for a RESSOURCE
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual Boolean GetIfRessHavePlanif(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetIfRessHavePlanifAsyncMsg(ressourceId, search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="userId">Id of project or ressource</param>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlanningByIdAsyncMsg(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/" + userId, search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="userId">Id of project or ressource</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlanningByIdAsync(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/" + userId, search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="userId">Id of project or ressource</param>
		public virtual PlanningResult GetPlanningById(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetPlanningByIdAsyncMsg(userId, search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PlanningResult>().Result;
			 		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdatePlanningDatesAsyncMsg(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<GetPlanningParams>>("api/v1/planning/api/v1/planning/UpdatePlanningDates?rId=" + rId + "&UsePercantages=" + UsePercantages, data);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdatePlanningDatesAsync(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<GetPlanningParams>>("api/v1/planning/api/v1/planning/UpdatePlanningDates?rId=" + rId + "&UsePercantages=" + UsePercantages, data);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>
		public virtual UpdateResult UpdatePlanningDates(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data)
		{
			var result = Task.Run(() => UpdatePlanningDatesAsyncMsg(rId, UsePercantages, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="UserId"></param>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleProjectsListProjectNotCloseAsyncMsg(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetAvalibleProjectsListProjectNotClose?UserId=" + UserId, search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="UserId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleProjectsListProjectNotCloseAsync(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetAvalibleProjectsListProjectNotClose?UserId=" + UserId, search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="UserId"></param>
		public virtual List<ProjectJS> GetAvalibleProjectsListProjectNotClose(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetAvalibleProjectsListProjectNotCloseAsyncMsg(UserId, search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// Get project list
		/// </summary>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleProjectsListAsyncMsg(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetAvalibleProjectsList", search);
		}

		/// <summary>
		/// Get project list
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleProjectsListAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetAvalibleProjectsList", search);
		}

		/// <summary>
		/// Get project list
		/// </summary>
		public virtual List<ProjectJS> GetAvalibleProjectsList(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetAvalibleProjectsListAsyncMsg(search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// Deletes ALL planification for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ClearProjectPlanningAsyncMsg(Int32 projectId,Boolean clearTasks)
		{
			return await HttpClient.DeleteAsync("api/v1/planning/" + projectId + "/" + clearTasks);
		}

		/// <summary>
		/// Deletes ALL planification for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ClearProjectPlanningAsync(Int32 projectId,Boolean clearTasks)
		{
			return await HttpClient.DeleteAsync("api/v1/planning/" + projectId + "/" + clearTasks);
		}

		/// <summary>
		/// Deletes ALL planification for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>
		public virtual UpdateResult ClearProjectPlanning(Int32 projectId,Boolean clearTasks)
		{
			var result = Task.Run(() => ClearProjectPlanningAsyncMsg(projectId, clearTasks)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Returns combiend (Project and tasks) planning
		/// Pagination is by top level item (Project or ressource)
		/// </summary>
		/// <param name="requestData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCombienedPlanningAsyncMsg(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/GetCombienedPlanning", requestData);
		}

		/// <summary>
		/// Returns combiend (Project and tasks) planning
		/// Pagination is by top level item (Project or ressource)
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCombienedPlanningAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/GetCombienedPlanning", requestData);
		}

		/// <summary>
		/// Returns combiend (Project and tasks) planning
		/// Pagination is by top level item (Project or ressource)
		/// </summary>
		public virtual PlanningResponse GetCombienedPlanning(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData)
		{
			var result = Task.Run(() => GetCombienedPlanningAsyncMsg(requestData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PlanningResponse>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="requestData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvailabilityAsyncMsg(GetPlanningLineRequest requestData)
		{
			return await HttpClient.PostAsJsonAsync<GetPlanningLineRequest>("api/v1/planning/GetAvailability", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvailabilityAsync(GetPlanningLineRequest requestData)
		{
			return await HttpClient.PostAsJsonAsync<GetPlanningLineRequest>("api/v1/planning/GetAvailability", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual PlanningResponse GetAvailability(GetPlanningLineRequest requestData)
		{
			var result = Task.Run(() => GetAvailabilityAsyncMsg(requestData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PlanningResponse>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningByTasksClient : ClientBase, Interfaces.IPlanningByTasksClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public PlanningByTasksClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public PlanningByTasksClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Creates recurrent planning for a selcted project, task and list of resources
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveRecurenceAsyncMsg(DatesRangeRequest<RecurentPlanParams> Params)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RecurentPlanParams>>("api/v1/task-planning/SaveRecurence", Params);
		}

		/// <summary>
		/// Creates recurrent planning for a selcted project, task and list of resources
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveRecurenceAsync(DatesRangeRequest<RecurentPlanParams> Params)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RecurentPlanParams>>("api/v1/task-planning/SaveRecurence", Params);
		}

		/// <summary>
		/// Creates recurrent planning for a selcted project, task and list of resources
		/// </summary>
		public virtual UpdateResult SaveRecurence(DatesRangeRequest<RecurentPlanParams> Params)
		{
			var result = Task.Run(() => SaveRecurenceAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		/// <param name="requestObject"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlanningsAsyncMsg(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestPlanningTasks>>("api/v1/task-planning/GetPlannings", requestObject);
		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlanningsAsync(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestPlanningTasks>>("api/v1/task-planning/GetPlannings", requestObject);
		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		public virtual TaskPlanningResult GetPlannings(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			var result = Task.Run(() => GetPlanningsAsyncMsg(requestObject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TaskPlanningResult>().Result;
			 		}

		/// <summary>
		/// Updates the current "view by" mode for planning
		/// </summary>
		/// <param name="viewBy"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveViewByAsyncMsg(Int32 viewBy)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/SaveViewBy?viewBy=" + viewBy);
		}

		/// <summary>
		/// Updates the current "view by" mode for planning
		/// </summary>
		/// <param name="viewBy"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveViewByAsync(Int32 viewBy)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/SaveViewBy?viewBy=" + viewBy);
		}

		/// <summary>
		/// Updates the current "view by" mode for planning
		/// </summary>
		/// <param name="viewBy"></param>
		public virtual void SaveViewBy(Int32 viewBy)
		{
			var result = Task.Run(() => SaveViewByAsyncMsg(viewBy)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <param name="requestObject"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsForDatesAsyncMsg(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestPlanningTasks>>("api/v1/task-planning/GetProjectsForDates", requestObject);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsForDatesAsync(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestPlanningTasks>>("api/v1/task-planning/GetProjectsForDates", requestObject);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		public virtual List<ProjectContainer> GetProjectsForDates(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			var result = Task.Run(() => GetProjectsForDatesAsyncMsg(requestObject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectContainer>>().Result;
			 		}

		/// <summary>
		/// Get basic project info for planning
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectForPlanningAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetProjectForPlanning/" + projectId);
		}

		/// <summary>
		/// Get basic project info for planning
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectForPlanningAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetProjectForPlanning/" + projectId);
		}

		/// <summary>
		/// Get basic project info for planning
		/// </summary>
		/// <param name="projectId"></param>
		public virtual ProjectContainer GetProjectForPlanning(Int32 projectId)
		{
			var result = Task.Run(() => GetProjectForPlanningAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectContainer>().Result;
			 		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRealHoursForTaskAsyncMsg(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetRealHoursForTask/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRealHoursForTaskAsync(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetRealHoursForTask/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>
		public virtual Double GetRealHoursForTask(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetRealHoursForTaskAsyncMsg(taskId, resourceId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Double>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlannedHoursForTaskAsyncMsg(Int32 taskId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetPlannedHoursForTask/" + taskId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlannedHoursForTaskAsync(Int32 taskId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetPlannedHoursForTask/" + taskId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		public virtual Double GetPlannedHoursForTask(Int32 taskId)
		{
			var result = Task.Run(() => GetPlannedHoursForTaskAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Double>().Result;
			 		}

		/// <summary>
		/// Get the available hours for a project, excluding task hours for this project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvailableHoursForTaskAsyncMsg(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetAvailableHoursForTask/" + projectId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Get the available hours for a project, excluding task hours for this project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvailableHoursForTaskAsync(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetAvailableHoursForTask/" + projectId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Get the available hours for a project, excluding task hours for this project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		public virtual Double GetAvailableHoursForTask(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetAvailableHoursForTaskAsyncMsg(projectId, resourceId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Double>().Result;
			 		}

		/// <summary>
		/// Save multiple task plannings, handles deletions and changes
		/// </summary>
		/// <param name="plannings"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveChangesToPlanningsAsyncMsg(TaskPlanningsToSave plannings)
		{
			return await HttpClient.PostAsJsonAsync<TaskPlanningsToSave>("api/v1/task-planning/SaveChangesToPlannings", plannings);
		}

		/// <summary>
		/// Save multiple task plannings, handles deletions and changes
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveChangesToPlanningsAsync(TaskPlanningsToSave plannings)
		{
			return await HttpClient.PostAsJsonAsync<TaskPlanningsToSave>("api/v1/task-planning/SaveChangesToPlannings", plannings);
		}

		/// <summary>
		/// Save multiple task plannings, handles deletions and changes
		/// </summary>
		public virtual UpdateResult SaveChangesToPlannings(TaskPlanningsToSave plannings)
		{
			var result = Task.Run(() => SaveChangesToPlanningsAsyncMsg(plannings)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Declares one day of planning done as not done and remove hour in the timesheet. The StartDate should be used for the day of planning.
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReversePlanningAsDoneAsyncMsg(DatesRangeRequest<RequestDeclareDone> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestDeclareDone>>("api/v1/task-planning/ReversePlanningAsDone", dates);
		}

		/// <summary>
		/// Declares one day of planning done as not done and remove hour in the timesheet. The StartDate should be used for the day of planning.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReversePlanningAsDoneAsync(DatesRangeRequest<RequestDeclareDone> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestDeclareDone>>("api/v1/task-planning/ReversePlanningAsDone", dates);
		}

		/// <summary>
		/// Declares one day of planning done as not done and remove hour in the timesheet. The StartDate should be used for the day of planning.
		/// </summary>
		public virtual UpdateResult ReversePlanningAsDone(DatesRangeRequest<RequestDeclareDone> dates)
		{
			var result = Task.Run(() => ReversePlanningAsDoneAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Declares one day of planning as "Done" and fills time in their timesheets. The StartDate should be used for the day of planning.
		/// If plannign doesn't exist, does nothing
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeclarePlanningAsDoneAsyncMsg(DatesRangeRequest<RequestDeclareDone> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestDeclareDone>>("api/v1/task-planning/declareAsFinished", dates);
		}

		/// <summary>
		/// Declares one day of planning as "Done" and fills time in their timesheets. The StartDate should be used for the day of planning.
		/// If plannign doesn't exist, does nothing
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeclarePlanningAsDoneAsync(DatesRangeRequest<RequestDeclareDone> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestDeclareDone>>("api/v1/task-planning/declareAsFinished", dates);
		}

		/// <summary>
		/// Declares one day of planning as "Done" and fills time in their timesheets. The StartDate should be used for the day of planning.
		/// If plannign doesn't exist, does nothing
		/// </summary>
		public virtual UpdateResult DeclarePlanningAsDone(DatesRangeRequest<RequestDeclareDone> dates)
		{
			var result = Task.Run(() => DeclarePlanningAsDoneAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deleting one task planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeletePlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/DeletePlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Deleting one task planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeletePlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/DeletePlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Deleting one task planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual UpdateResult DeletePlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => DeletePlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Set up default workspaces: Home, Office, Client
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SetupDefaultWorkSpacesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/task-planning/SetupDefaultWorkSpaces");
		}

		/// <summary>
		/// Set up default workspaces: Home, Office, Client
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SetupDefaultWorkSpacesAsync()
		{
			return await HttpClient.GetAsync("api/v1/task-planning/SetupDefaultWorkSpaces");
		}

		/// <summary>
		/// Set up default workspaces: Home, Office, Client
		/// </summary>
		public virtual UpdateResult SetupDefaultWorkSpaces()
		{
			var result = Task.Run(() => SetupDefaultWorkSpacesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get the default work place
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDefaultAllWorkSpaceAsyncMsg(Int32 taskId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetDefaultAllWorkSpace/" + taskId);
		}

		/// <summary>
		/// Get the default work place
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDefaultAllWorkSpaceAsync(Int32 taskId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetDefaultAllWorkSpace/" + taskId);
		}

		/// <summary>
		/// Get the default work place
		/// </summary>
		/// <param name="taskId"></param>
		public virtual Int32 GetDefaultAllWorkSpace(Int32 taskId)
		{
			var result = Task.Run(() => GetDefaultAllWorkSpaceAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Int32>().Result;
			 		}

		/// <summary>
		/// Gets a list tasks for a project
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllTasksAsyncMsg(DatesRangeRequest<Int32> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/task-planning/GetAllTasks", param);
		}

		/// <summary>
		/// Gets a list tasks for a project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllTasksAsync(DatesRangeRequest<Int32> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/task-planning/GetAllTasks", param);
		}

		/// <summary>
		/// Gets a list tasks for a project
		/// </summary>
		public virtual List<ProjectTaskMinimal> GetAllTasks(DatesRangeRequest<Int32> param)
		{
			var result = Task.Run(() => GetAllTasksAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTaskMinimal>>().Result;
			 		}

		/// <summary>
		/// Gets a list of workspaces for the company
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllWorkSpacesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetAllWorkSpaces");
		}

		/// <summary>
		/// Gets a list of workspaces for the company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllWorkSpacesAsync()
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetAllWorkSpaces");
		}

		/// <summary>
		/// Gets a list of workspaces for the company
		/// </summary>
		public virtual List<TaskPlanningWorkSpace> GetAllWorkSpaces()
		{
			var result = Task.Run(() => GetAllWorkSpacesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskPlanningWorkSpace>>().Result;
			 		}

		/// <summary>
		/// Save multiple workspaces
		/// </summary>
		/// <param name="workSpaces"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveAllWorkSpacesAsyncMsg(List<TaskPlanningWorkSpace> workSpaces)
		{
			return await HttpClient.PostAsJsonAsync<List<TaskPlanningWorkSpace>>("api/v1/task-planning/SaveAllWorkSpaces", workSpaces);
		}

		/// <summary>
		/// Save multiple workspaces
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveAllWorkSpacesAsync(List<TaskPlanningWorkSpace> workSpaces)
		{
			return await HttpClient.PostAsJsonAsync<List<TaskPlanningWorkSpace>>("api/v1/task-planning/SaveAllWorkSpaces", workSpaces);
		}

		/// <summary>
		/// Save multiple workspaces
		/// </summary>
		public virtual UpdateResult SaveAllWorkSpaces(List<TaskPlanningWorkSpace> workSpaces)
		{
			var result = Task.Run(() => SaveAllWorkSpacesAsyncMsg(workSpaces)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates the workspace for a given planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateWorkSpaceForPlanningAsyncMsg(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/UpdateWorkSpaceForPlanning/" + taskId + "/" + resourceId + "/" + workspaceId, dates);
		}

		/// <summary>
		/// Updates the workspace for a given planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateWorkSpaceForPlanningAsync(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/UpdateWorkSpaceForPlanning/" + taskId + "/" + resourceId + "/" + workspaceId, dates);
		}

		/// <summary>
		/// Updates the workspace for a given planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>
		public virtual UpdateResult UpdateWorkSpaceForPlanning(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			var result = Task.Run(() => UpdateWorkSpaceForPlanningAsyncMsg(resourceId, taskId, workspaceId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Locks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> LockTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/LockTaskPlanning/" + taskId + "/" + resourceId + "/" + view, dates);
		}

		/// <summary>
		/// Locks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LockTaskPlanningAsync(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/LockTaskPlanning/" + taskId + "/" + resourceId + "/" + view, dates);
		}

		/// <summary>
		/// Locks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>
		public virtual UpdateResult LockTaskPlanning(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => LockTaskPlanningAsyncMsg(resourceId, taskId, view, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Unlocks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UnlockTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/UnlockTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Unlocks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UnlockTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/UnlockTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Unlocks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual UpdateResult UnlockTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => UnlockTaskPlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Gets whether a task planning is locked and by who
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLockTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetLockTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Gets whether a task planning is locked and by who
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLockTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetLockTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Gets whether a task planning is locked and by who
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual UpdateResult GetLockTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetLockTaskPlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Gets a list of comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCommentsForTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetCommentsForTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Gets a list of comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCommentsForTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetCommentsForTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Gets a list of comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual List<TaskPlanningComment> GetCommentsForTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			var result = Task.Run(() => GetCommentsForTaskPlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskPlanningComment>>().Result;
			 		}

		/// <summary>
		/// Adds a comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddCommentForTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/AddCommentForTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Adds a comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddCommentForTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/AddCommentForTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Adds a comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual UpdateResultWithId AddCommentForTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => AddCommentForTaskPlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Edits a comments for a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		/// <param name="newText"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> EditCommentForTaskPlanningAsyncMsg(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/task-planning/EditCommentForTaskPlanning/" + commentId, newText);
		}

		/// <summary>
		/// Edits a comments for a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> EditCommentForTaskPlanningAsync(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/task-planning/EditCommentForTaskPlanning/" + commentId, newText);
		}

		/// <summary>
		/// Edits a comments for a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult EditCommentForTaskPlanning(Int32 commentId,String newText)
		{
			var result = Task.Run(() => EditCommentForTaskPlanningAsyncMsg(commentId, newText)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deletes a comments from a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCommentForTaskPlanningAsyncMsg(Int32 commentId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/DeleteCommentForTaskPlanning/" + commentId);
		}

		/// <summary>
		/// Deletes a comments from a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCommentForTaskPlanningAsync(Int32 commentId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/DeleteCommentForTaskPlanning/" + commentId);
		}

		/// <summary>
		/// Deletes a comments from a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult DeleteCommentForTaskPlanning(Int32 commentId)
		{
			var result = Task.Run(() => DeleteCommentForTaskPlanningAsyncMsg(commentId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictsForRessourceAsyncMsg(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflictsForRessource/" + ressourceId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictsForRessourceAsync(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflictsForRessource/" + ressourceId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual ConflictsManagmentEntity GetConflictsForRessource(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			var result = Task.Run(() => GetConflictsForRessourceAsyncMsg(ressourceId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ConflictsManagmentEntity>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictsForProjectAsyncMsg(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflictsForProject/" + projectId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictsForProjectAsync(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflictsForProject/" + projectId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual ConflictsManagmentEntity GetConflictsForProject(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			var result = Task.Run(() => GetConflictsForProjectAsyncMsg(projectId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ConflictsManagmentEntity>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetBaselineAsyncMsg(Int32 ProjetId,Int32 RessourceId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/task-planning/GetBaseline?ProjetId=" + ProjetId + "&RessourceId=" + RessourceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBaselineAsync(Int32 ProjetId,Int32 RessourceId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/task-planning/GetBaseline?ProjetId=" + ProjetId + "&RessourceId=" + RessourceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>
		public virtual Double GetBaseline(Int32 ProjetId,Int32 RessourceId)
		{
			var result = Task.Run(() => GetBaselineAsyncMsg(ProjetId, RessourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Double>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictsAsyncMsg(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflicts", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictsAsync(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflicts", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictsManagmentEntity> GetConflicts(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			var result = Task.Run(() => GetConflictsAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ConflictsManagmentEntity>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cardId"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateUnitPlaningAsyncMsg(Int32 cardId,ConflictsPlanning data)
		{
			return await HttpClient.PostAsJsonAsync<ConflictsPlanning>("api/v1/task-planning/updateUnitPlaning/" + cardId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cardId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateUnitPlaningAsync(Int32 cardId,ConflictsPlanning data)
		{
			return await HttpClient.PostAsJsonAsync<ConflictsPlanning>("api/v1/task-planning/updateUnitPlaning/" + cardId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cardId"></param>
		public virtual UpdateResultWithId UpdateUnitPlaning(Int32 cardId,ConflictsPlanning data)
		{
			var result = Task.Run(() => UpdateUnitPlaningAsyncMsg(cardId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictsByProjectAsyncMsg(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.GetAsync("api/PlanningByTasks");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictsByProjectAsync(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.GetAsync("api/PlanningByTasks");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictsManagmentEntity> GetConflictsByProject(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			var result = Task.Run(() => GetConflictsByProjectAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ConflictsManagmentEntity>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ProfileImageClient : ClientBase, Interfaces.IProfileImageClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ProfileImageClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ProfileImageClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Upload UserFile
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadUserFileAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile-image/UploadUserFile", default(HttpResponseMessage));
		}

		/// <summary>
		/// Upload UserFile
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadUserFileAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile-image/UploadUserFile", default(HttpResponseMessage));
		}

		/// <summary>
		/// Upload UserFile
		/// </summary>
		public virtual UpdateResult UploadUserFile()
		{
			var result = Task.Run(() => UploadUserFileAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update profile image for the logged-in user
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadNewImageAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile-image/UploadNewImage", default(HttpResponseMessage));
		}

		/// <summary>
		/// Update profile image for the logged-in user
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadNewImageAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile-image/UploadNewImage", default(HttpResponseMessage));
		}

		/// <summary>
		/// Update profile image for the logged-in user
		/// </summary>
		public virtual UpdateResult UploadNewImage()
		{
			var result = Task.Run(() => UploadNewImageAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteImageAsyncMsg()
		{
			return await HttpClient.DeleteAsync("api/v1/profile-image/DeleteImage");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteImageAsync()
		{
			return await HttpClient.DeleteAsync("api/v1/profile-image/DeleteImage");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult DeleteImage()
		{
			var result = Task.Run(() => DeleteImageAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectManagementClient : ClientBase, Interfaces.IProjectManagementClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ProjectManagementClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ProjectManagementClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Takes a list of projects and queues them for automated planning
		/// All existing planification will be deleted
		/// Performs checks on validity of projects and acess rights of user
		/// filters are for potential future usage
		/// </summary>
		/// <param name="projects"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> QueueProjectsForPlanningAsyncMsg(DatesRangeFilteredRequest<Int32[]> projects)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Int32[]>>("api/v1/proj-management/queueProjectsForPlanning", projects);
		}

		/// <summary>
		/// Takes a list of projects and queues them for automated planning
		/// All existing planification will be deleted
		/// Performs checks on validity of projects and acess rights of user
		/// filters are for potential future usage
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> QueueProjectsForPlanningAsync(DatesRangeFilteredRequest<Int32[]> projects)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Int32[]>>("api/v1/proj-management/queueProjectsForPlanning", projects);
		}

		/// <summary>
		/// Takes a list of projects and queues them for automated planning
		/// All existing planification will be deleted
		/// Performs checks on validity of projects and acess rights of user
		/// filters are for potential future usage
		/// </summary>
		public virtual UpdateResult QueueProjectsForPlanning(DatesRangeFilteredRequest<Int32[]> projects)
		{
			var result = Task.Run(() => QueueProjectsForPlanningAsyncMsg(projects)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get max value for a period, use in the project sheet for the graph
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="GraphDateMode"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetGraphMaxAsyncMsg(Int32 projId,Int32 GraphDateMode)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetGraphMax/" + projId + "/" + GraphDateMode);
		}

		/// <summary>
		/// Get max value for a period, use in the project sheet for the graph
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="GraphDateMode"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetGraphMaxAsync(Int32 projId,Int32 GraphDateMode)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetGraphMax/" + projId + "/" + GraphDateMode);
		}

		/// <summary>
		/// Get max value for a period, use in the project sheet for the graph
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="GraphDateMode"></param>
		public virtual ProjectGraphMax GetGraphMax(Int32 projId,Int32 GraphDateMode)
		{
			var result = Task.Run(() => GetGraphMaxAsyncMsg(projId, GraphDateMode)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectGraphMax>().Result;
			 		}

		/// <summary>
		/// Returns the list of fields used for project creation when dynamic names are enabled
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFieldsUsedForProjectCreationAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetFieldsUsedForProjectCreation");
		}

		/// <summary>
		/// Returns the list of fields used for project creation when dynamic names are enabled
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFieldsUsedForProjectCreationAsync()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetFieldsUsedForProjectCreation");
		}

		/// <summary>
		/// Returns the list of fields used for project creation when dynamic names are enabled
		/// </summary>
		public virtual List<ProjectDynamicNameField> GetFieldsUsedForProjectCreation()
		{
			var result = Task.Run(() => GetFieldsUsedForProjectCreationAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectDynamicNameField>>().Result;
			 		}

		/// <summary>
		/// From a project list return project that use some type of data for due date
		/// </summary>
		/// <param name="datesRangeRequestProjectsDueDate">Contain, All the object id that was change. And All the type of nomenclature due date link we want to check, DateComparisonType. If IsClientUpdate is true id are id from clients if false id come from projects</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsDueDateUseAsyncMsg(DatesRangeRequestProjectsDueDate datesRangeRequestProjectsDueDate)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequestProjectsDueDate>("api/v1/proj-management/GetProjectsDueDateUse", datesRangeRequestProjectsDueDate);
		}

		/// <summary>
		/// From a project list return project that use some type of data for due date
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsDueDateUseAsync(DatesRangeRequestProjectsDueDate datesRangeRequestProjectsDueDate)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequestProjectsDueDate>("api/v1/proj-management/GetProjectsDueDateUse", datesRangeRequestProjectsDueDate);
		}

		/// <summary>
		/// From a project list return project that use some type of data for due date
		/// </summary>
		public virtual List<ListItemInt> GetProjectsDueDateUse(DatesRangeRequestProjectsDueDate datesRangeRequestProjectsDueDate)
		{
			var result = Task.Run(() => GetProjectsDueDateUseAsyncMsg(datesRangeRequestProjectsDueDate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ListItemInt>>().Result;
			 		}

		/// <summary>
		/// From a list of projects ids update the due date of the tasks in the projects
		/// </summary>
		/// <param name="projectsIds">All the projects ids that need to be update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectsDueDateAsyncMsg(List<Int32> projectsIds)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/proj-management/UpdateProjectsDueDate", projectsIds);
		}

		/// <summary>
		/// From a list of projects ids update the due date of the tasks in the projects
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectsDueDateAsync(List<Int32> projectsIds)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/proj-management/UpdateProjectsDueDate", projectsIds);
		}

		/// <summary>
		/// From a list of projects ids update the due date of the tasks in the projects
		/// </summary>
		public virtual UpdateResult UpdateProjectsDueDate(List<Int32> projectsIds)
		{
			var result = Task.Run(() => UpdateProjectsDueDateAsyncMsg(projectsIds)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get resource of a project
		/// </summary>
		/// <param name="projId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectRessourcesAsyncMsg(Int32 projId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetProjectRessources?projId=" + projId);
		}

		/// <summary>
		/// Get resource of a project
		/// </summary>
		/// <param name="projId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectRessourcesAsync(Int32 projId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetProjectRessources?projId=" + projId);
		}

		/// <summary>
		/// Get resource of a project
		/// </summary>
		/// <param name="projId"></param>
		public virtual List<RessourceStats> GetProjectRessources(Int32 projId)
		{
			var result = Task.Run(() => GetProjectRessourcesAsyncMsg(projId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<RessourceStats>>().Result;
			 		}

		/// <summary>
		/// Delete objective
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="objId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteObjectiveAsyncMsg(Int32 projId,Int32 objId)
		{
			return await HttpClient.DeleteAsync("api/v1/proj-management/DeleteObjective?projId=" + projId + "&objId=" + objId);
		}

		/// <summary>
		/// Delete objective
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="objId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteObjectiveAsync(Int32 projId,Int32 objId)
		{
			return await HttpClient.DeleteAsync("api/v1/proj-management/DeleteObjective?projId=" + projId + "&objId=" + objId);
		}

		/// <summary>
		/// Delete objective
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="objId"></param>
		public virtual UpdateResult DeleteObjective(Int32 projId,Int32 objId)
		{
			var result = Task.Run(() => DeleteObjectiveAsyncMsg(projId, objId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get mandatory field for creating project, depend of the activity Families selected
		/// </summary>
		/// <param name="activityFamiliesId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetMandatoryFieldsAsyncMsg(Guid activityFamiliesId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetMandatoryFields/" + activityFamiliesId);
		}

		/// <summary>
		/// Get mandatory field for creating project, depend of the activity Families selected
		/// </summary>
		/// <param name="activityFamiliesId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetMandatoryFieldsAsync(Guid activityFamiliesId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetMandatoryFields/" + activityFamiliesId);
		}

		/// <summary>
		/// Get mandatory field for creating project, depend of the activity Families selected
		/// </summary>
		/// <param name="activityFamiliesId"></param>
		public virtual MandatoryFields GetMandatoryFields(Guid activityFamiliesId)
		{
			var result = Task.Run(() => GetMandatoryFieldsAsyncMsg(activityFamiliesId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<MandatoryFields>().Result;
			 		}

		/// <summary>
		/// Get All Expensses, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="prId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllExpenssesAsyncMsg(Int32 prId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetAllExpensses?prId=" + prId);
		}

		/// <summary>
		/// Get All Expensses, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="prId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllExpenssesAsync(Int32 prId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetAllExpensses?prId=" + prId);
		}

		/// <summary>
		/// Get All Expensses, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="prId"></param>
		public virtual List<Expense> GetAllExpensses(Int32 prId)
		{
			var result = Task.Run(() => GetAllExpenssesAsyncMsg(prId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Expense>>().Result;
			 		}

		/// <summary>
		/// Get Project Success
		/// </summary>
		/// <param name="prId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectSuccessAsyncMsg(Int32 prId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetProjectSuccess?prId=" + prId);
		}

		/// <summary>
		/// Get Project Success
		/// </summary>
		/// <param name="prId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectSuccessAsync(Int32 prId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetProjectSuccess?prId=" + prId);
		}

		/// <summary>
		/// Get Project Success
		/// </summary>
		/// <param name="prId"></param>
		public virtual ProjectSuccess GetProjectSuccess(Int32 prId)
		{
			var result = Task.Run(() => GetProjectSuccessAsyncMsg(prId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectSuccess>().Result;
			 		}

		/// <summary>
		/// Get All Resources Responsible For Task
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllResourcesResponsibleForTaskAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetAllResourcesResponsibleForTask");
		}

		/// <summary>
		/// Get All Resources Responsible For Task
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllResourcesResponsibleForTaskAsync()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetAllResourcesResponsibleForTask");
		}

		/// <summary>
		/// Get All Resources Responsible For Task
		/// </summary>
		public virtual List<EmployeJS> GetAllResourcesResponsibleForTask()
		{
			var result = Task.Run(() => GetAllResourcesResponsibleForTaskAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS>>().Result;
			 		}

		/// <summary>
		/// Get All Resources Responsible For Project
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllResourcesResponsibleForProjectAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetAllResourcesResponsibleForProject");
		}

		/// <summary>
		/// Get All Resources Responsible For Project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllResourcesResponsibleForProjectAsync()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetAllResourcesResponsibleForProject");
		}

		/// <summary>
		/// Get All Resources Responsible For Project
		/// </summary>
		public virtual List<EmployeJS> GetAllResourcesResponsibleForProject()
		{
			var result = Task.Run(() => GetAllResourcesResponsibleForProjectAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS>>().Result;
			 		}

		/// <summary>
		/// Save responsable project
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="responsableId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveResponsableAsyncMsg(Int32 projId,Int32 responsableId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/SaveResponsable?projId=" + projId + "&responsableId=" + responsableId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Save responsable project
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="responsableId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveResponsableAsync(Int32 projId,Int32 responsableId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/SaveResponsable?projId=" + projId + "&responsableId=" + responsableId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Save responsable project
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="responsableId"></param>
		public virtual UpdateResult SaveResponsable(Int32 projId,Int32 responsableId)
		{
			var result = Task.Run(() => SaveResponsableAsyncMsg(projId, responsableId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Budget
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="projectGagne"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveBudgetAsyncMsg(Int32 projId,Double projectGagne)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/SaveBudget?projId=" + projId + "&projectGagne=" + projectGagne, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Budget
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="projectGagne"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveBudgetAsync(Int32 projId,Double projectGagne)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/SaveBudget?projId=" + projId + "&projectGagne=" + projectGagne, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Budget
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="projectGagne"></param>
		public virtual UpdateResult SaveBudget(Int32 projId,Double projectGagne)
		{
			var result = Task.Run(() => SaveBudgetAsyncMsg(projId, projectGagne)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Planned Expenses
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="projectPrevu"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SavePlannedExpensesAsyncMsg(Int32 projId,Double projectPrevu)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/SavePlannedExpenses?projId=" + projId + "&projectPrevu=" + projectPrevu, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Planned Expenses
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="projectPrevu"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SavePlannedExpensesAsync(Int32 projId,Double projectPrevu)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/SavePlannedExpenses?projId=" + projId + "&projectPrevu=" + projectPrevu, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Planned Expenses
		/// </summary>
		/// <param name="projId"></param>
		/// <param name="projectPrevu"></param>
		public virtual UpdateResult SavePlannedExpenses(Int32 projId,Double projectPrevu)
		{
			var result = Task.Run(() => SavePlannedExpensesAsyncMsg(projId, projectPrevu)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get project list where i am the responsable
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetMyProjectsListAsyncMsg(DatesRangeRequestBase dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequestBase>("api/v1/proj-management/GetMyProjectsList", dates);
		}

		/// <summary>
		/// Get project list where i am the responsable
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetMyProjectsListAsync(DatesRangeRequestBase dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequestBase>("api/v1/proj-management/GetMyProjectsList", dates);
		}

		/// <summary>
		/// Get project list where i am the responsable
		/// </summary>
		public virtual List<ProjectJS> GetMyProjectsList(DatesRangeRequestBase dates)
		{
			var result = Task.Run(() => GetMyProjectsListAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDocumentsForprojectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/files/" + projectId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDocumentsForprojectAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/files/" + projectId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual List<UploadedFile> GetDocumentsForproject(Int32 projectId)
		{
			var result = Task.Run(() => GetDocumentsForprojectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UploadedFile>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fileToRemove"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RemoveDocumentAsyncMsg(Int32 fileToRemove)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/RemoveDocument/" + fileToRemove, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fileToRemove"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveDocumentAsync(Int32 fileToRemove)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/RemoveDocument/" + fileToRemove, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fileToRemove"></param>
		public virtual UpdateResult RemoveDocument(Int32 fileToRemove)
		{
			var result = Task.Run(() => RemoveDocumentAsyncMsg(fileToRemove)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadDocumentAsyncMsg(Int32 projectId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UploadDocument/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadDocumentAsync(Int32 projectId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UploadDocument/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResultWithId UploadDocument(Int32 projectId)
		{
			var result = Task.Run(() => UploadDocumentAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="isImport"></param>
		/// <param name="newProjList"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateAllNewProjectAsyncMsg(Boolean isImport,List<ProjectJS> newProjList)
		{
			return await HttpClient.PostAsJsonAsync<List<ProjectJS>>("api/v1/proj-management/CreateAllNewProject?isImport=" + isImport, newProjList);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="isImport"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateAllNewProjectAsync(Boolean isImport,List<ProjectJS> newProjList)
		{
			return await HttpClient.PostAsJsonAsync<List<ProjectJS>>("api/v1/proj-management/CreateAllNewProject?isImport=" + isImport, newProjList);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="isImport"></param>
		public virtual UpdateResultWithId CreateAllNewProject(Boolean isImport,List<ProjectJS> newProjList)
		{
			var result = Task.Run(() => CreateAllNewProjectAsyncMsg(isImport, newProjList)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="isImport"></param>
		/// <param name="projects"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateProjectsByBatchAsyncMsg(Boolean isImport,List<ProjectJS> projects)
		{
			return await HttpClient.PostAsJsonAsync<List<ProjectJS>>("api/v1/proj-management/createBatch?isImport=" + isImport, projects);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="isImport"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateProjectsByBatchAsync(Boolean isImport,List<ProjectJS> projects)
		{
			return await HttpClient.PostAsJsonAsync<List<ProjectJS>>("api/v1/proj-management/createBatch?isImport=" + isImport, projects);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="isImport"></param>
		public virtual UpdateResultWithId CreateProjectsByBatch(Boolean isImport,List<ProjectJS> projects)
		{
			var result = Task.Run(() => CreateProjectsByBatchAsyncMsg(isImport, projects)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="name"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectNameAsyncMsg(Int32 projectId,String name)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UpdateProjectName?projectId=" + projectId + "&name=" + name, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectNameAsync(Int32 projectId,String name)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UpdateProjectName?projectId=" + projectId + "&name=" + name, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="name"></param>
		public virtual UpdateResult UpdateProjectName(Int32 projectId,String name)
		{
			var result = Task.Run(() => UpdateProjectNameAsyncMsg(projectId, name)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectsIdList"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteProjectsAsyncMsg(Int32[] projectsIdList)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/proj-management/DeleteProjects", projectsIdList);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteProjectsAsync(Int32[] projectsIdList)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/proj-management/DeleteProjects", projectsIdList);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult DeleteProjects(Int32[] projectsIdList)
		{
			var result = Task.Run(() => DeleteProjectsAsyncMsg(projectsIdList)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteProjectAsyncMsg(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/proj-management/DeleteProject?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteProjectAsync(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/proj-management/DeleteProject?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult DeleteProject(Int32 id)
		{
			var result = Task.Run(() => DeleteProjectAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetManagedProjectsByDateAsyncMsg(DatesRangeFilteredRequest<RequestProjectManaged> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestProjectManaged>>("api/v1/proj-management/getManagedProjectsByDate", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetManagedProjectsByDateAsync(DatesRangeFilteredRequest<RequestProjectManaged> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestProjectManaged>>("api/v1/proj-management/getManagedProjectsByDate", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectJS> GetManagedProjectsByDate(DatesRangeFilteredRequest<RequestProjectManaged> data)
		{
			var result = Task.Run(() => GetManagedProjectsByDateAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectInfoMinimalAsyncMsg(Int32 projectId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/getProjectInfoMinimal/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectInfoMinimalAsync(Int32 projectId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/getProjectInfoMinimal/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual ProjectJS GetProjectInfoMinimal(Int32 projectId)
		{
			var result = Task.Run(() => GetProjectInfoMinimalAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectJS>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="requestData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetGeneralInfoAsyncMsg(DatesRangeRequest<Int32> requestData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/proj-management/getGeneralInfo", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetGeneralInfoAsync(DatesRangeRequest<Int32> requestData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/proj-management/getGeneralInfo", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectInfo GetGeneralInfo(DatesRangeRequest<Int32> requestData)
		{
			var result = Task.Run(() => GetGeneralInfoAsyncMsg(requestData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectInfo>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="requestData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFinancialInfoAsyncMsg(DatesRangeRequest<Int32> requestData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/proj-management/getFinancialInfo", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFinancialInfoAsync(DatesRangeRequest<Int32> requestData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/proj-management/getFinancialInfo", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual FinancialInfo GetFinancialInfo(DatesRangeRequest<Int32> requestData)
		{
			var result = Task.Run(() => GetFinancialInfoAsyncMsg(requestData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<FinancialInfo>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="requestData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetManagedProjectsAsyncMsg(RequestProjectManagedForUser requestData)
		{
			return await HttpClient.PostAsJsonAsync<RequestProjectManagedForUser>("api/v1/proj-management/getManagedProjectsForUser", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetManagedProjectsAsync(RequestProjectManagedForUser requestData)
		{
			return await HttpClient.PostAsJsonAsync<RequestProjectManagedForUser>("api/v1/proj-management/getManagedProjectsForUser", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectJS> GetManagedProjects(RequestProjectManagedForUser requestData)
		{
			var result = Task.Run(() => GetManagedProjectsAsyncMsg(requestData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// Create quick project
		/// </summary>
		/// <param name="tocreate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ProjectQuickCreateAsyncMsg(ProjectQuickCreate tocreate)
		{
			return await HttpClient.PostAsJsonAsync<ProjectQuickCreate>("api/v1/proj-management/projectQuickCreate", tocreate);
		}

		/// <summary>
		/// Create quick project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ProjectQuickCreateAsync(ProjectQuickCreate tocreate)
		{
			return await HttpClient.PostAsJsonAsync<ProjectQuickCreate>("api/v1/proj-management/projectQuickCreate", tocreate);
		}

		/// <summary>
		/// Create quick project
		/// </summary>
		public virtual UpdateResultWithId ProjectQuickCreate(ProjectQuickCreate tocreate)
		{
			var result = Task.Run(() => ProjectQuickCreateAsyncMsg(tocreate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Add Activitys from nomenclature to Project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="activitysId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddActivitysToProjectAsyncMsg(Int32 projectId,Guid[] activitysId)
		{
			return await HttpClient.PostAsJsonAsync<Guid[]>("api/v1/proj-management/addActivitysToProject/" + projectId, activitysId);
		}

		/// <summary>
		/// Add Activitys from nomenclature to Project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddActivitysToProjectAsync(Int32 projectId,Guid[] activitysId)
		{
			return await HttpClient.PostAsJsonAsync<Guid[]>("api/v1/proj-management/addActivitysToProject/" + projectId, activitysId);
		}

		/// <summary>
		/// Add Activitys from nomenclature to Project
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResultMultiErrorSuccess AddActivitysToProject(Int32 projectId,Guid[] activitysId)
		{
			var result = Task.Run(() => AddActivitysToProjectAsyncMsg(projectId, activitysId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Create project
		/// </summary>
		/// <param name="newProject"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateNewProjectAsyncMsg(ProjectJS newProject)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJS>("api/v1/proj-management/createNewProject", newProject);
		}

		/// <summary>
		/// Create project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateNewProjectAsync(ProjectJS newProject)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJS>("api/v1/proj-management/createNewProject", newProject);
		}

		/// <summary>
		/// Create project
		/// </summary>
		public virtual UpdateResultWithId CreateNewProject(ProjectJS newProject)
		{
			var result = Task.Run(() => CreateNewProjectAsyncMsg(newProject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CopyProjectsAsyncMsg(ReplanProjectsRequest data)
		{
			return await HttpClient.PostAsJsonAsync<ReplanProjectsRequest>("api/v1/proj-management/CopyProjects", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CopyProjectsAsync(ReplanProjectsRequest data)
		{
			return await HttpClient.PostAsJsonAsync<ReplanProjectsRequest>("api/v1/proj-management/CopyProjects", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId CopyProjects(ReplanProjectsRequest data)
		{
			var result = Task.Run(() => CopyProjectsAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns a list of avalible users between two dates with capacity
		/// If request object is true : group by team instead of title
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossibledRessourcesWithCapacityAsyncMsg(DatesRangeRequest<Boolean> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Boolean>>("api/v1/proj-management/GetPossibledRessourcesWithCapacity", dates);
		}

		/// <summary>
		/// Returns a list of avalible users between two dates with capacity
		/// If request object is true : group by team instead of title
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossibledRessourcesWithCapacityAsync(DatesRangeRequest<Boolean> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Boolean>>("api/v1/proj-management/GetPossibledRessourcesWithCapacity", dates);
		}

		/// <summary>
		/// Returns a list of avalible users between two dates with capacity
		/// If request object is true : group by team instead of title
		/// </summary>
		public virtual RessourcesForNewProject GetPossibledRessourcesWithCapacity(DatesRangeRequest<Boolean> dates)
		{
			var result = Task.Run(() => GetPossibledRessourcesWithCapacityAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<RessourcesForNewProject>().Result;
			 		}

		/// <summary>
		/// Adds multiple users to multiples projects
		/// If uer is already afected to a project, he won't be added
		/// </summary>
		/// <param name="assignMultiples">List of users and projects</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddUsersToProjectsAsyncMsg(AssignMultiples assignMultiples)
		{
			return await HttpClient.PostAsJsonAsync<AssignMultiples>("api/v1/proj-management/AddUsersToProjects", assignMultiples);
		}

		/// <summary>
		/// Adds multiple users to multiples projects
		/// If uer is already afected to a project, he won't be added
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddUsersToProjectsAsync(AssignMultiples assignMultiples)
		{
			return await HttpClient.PostAsJsonAsync<AssignMultiples>("api/v1/proj-management/AddUsersToProjects", assignMultiples);
		}

		/// <summary>
		/// Adds multiple users to multiples projects
		/// If uer is already afected to a project, he won't be added
		/// </summary>
		public virtual UpdateResult AddUsersToProjects(AssignMultiples assignMultiples)
		{
			var result = Task.Run(() => AddUsersToProjectsAsyncMsg(assignMultiples)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Add to project ressource if not in the project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddUserToProjectAsyncMsg(Int32 projectId,Int32 userId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/AddUserToProject?projectId=" + projectId + "&userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add to project ressource if not in the project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddUserToProjectAsync(Int32 projectId,Int32 userId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/AddUserToProject?projectId=" + projectId + "&userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add to project ressource if not in the project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="userId"></param>
		public virtual UpdateResult AddUserToProject(Int32 projectId,Int32 userId)
		{
			var result = Task.Run(() => AddUserToProjectAsyncMsg(projectId, userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a new project with custom fields values (optional)
		/// </summary>
		/// <param name="project">Project to create</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateProjectWithCustomFieldsAsyncMsg(ProjectJS project)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJS>("api/v1/proj-management/CreateProjectWithCustomFields", project);
		}

		/// <summary>
		/// Creates a new project with custom fields values (optional)
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateProjectWithCustomFieldsAsync(ProjectJS project)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJS>("api/v1/proj-management/CreateProjectWithCustomFields", project);
		}

		/// <summary>
		/// Creates a new project with custom fields values (optional)
		/// </summary>
		public virtual UpdateResultWithId CreateProjectWithCustomFields(ProjectJS project)
		{
			var result = Task.Run(() => CreateProjectWithCustomFieldsAsyncMsg(project)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		/// <param name="requestObject"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsRessourcesAsyncMsg(DatesRangeRequest<RequestProjectResources> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestProjectResources>>("api/v1/proj-management/GetProjectsRessources", requestObject);
		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsRessourcesAsync(DatesRangeRequest<RequestProjectResources> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestProjectResources>>("api/v1/proj-management/GetProjectsRessources", requestObject);
		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		public virtual ProjectJS GetProjectsRessources(DatesRangeRequest<RequestProjectResources> requestObject)
		{
			var result = Task.Run(() => GetProjectsRessourcesAsyncMsg(requestObject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectJS>().Result;
			 		}

		/// <summary>
		/// Get All tasks for a project, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTasksForProjectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetTasksForProject/" + projectId);
		}

		/// <summary>
		/// Get All tasks for a project, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTasksForProjectAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetTasksForProject/" + projectId);
		}

		/// <summary>
		/// Get All tasks for a project, if the task is reccurence add due date to the name of the task
		/// </summary>
		/// <param name="projectId"></param>
		public virtual List<ProjectTaskMinimal> GetTasksForProject(Int32 projectId)
		{
			var result = Task.Run(() => GetTasksForProjectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTaskMinimal>>().Result;
			 		}

		/// <summary>
		/// Gets all actions done on a project
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLastActivityForProjectAsyncMsg(DatesRangeRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("GetLastActivityForProject", data);
		}

		/// <summary>
		/// Gets all actions done on a project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLastActivityForProjectAsync(DatesRangeRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("GetLastActivityForProject", data);
		}

		/// <summary>
		/// Gets all actions done on a project
		/// </summary>
		public virtual List<ActivityLine> GetLastActivityForProject(DatesRangeRequest<Int32> data)
		{
			var result = Task.Run(() => GetLastActivityForProjectAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ActivityLine>>().Result;
			 		}

		/// <summary>
		/// Returns a list of all projects in the company and values of custom fields
		/// </summary>
		/// <param name="requestObject">Dates range. The parameter indicates if custom fields should be included</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllProjectsWithCustomFieldsAsyncMsg(DatesRangeFilteredRequest<Boolean> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/proj-management/GetAllProjectsWithCustomFields", requestObject);
		}

		/// <summary>
		/// Returns a list of all projects in the company and values of custom fields
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllProjectsWithCustomFieldsAsync(DatesRangeFilteredRequest<Boolean> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/proj-management/GetAllProjectsWithCustomFields", requestObject);
		}

		/// <summary>
		/// Returns a list of all projects in the company and values of custom fields
		/// </summary>
		public virtual List<ProjectJS> GetAllProjectsWithCustomFields(DatesRangeFilteredRequest<Boolean> requestObject)
		{
			var result = Task.Run(() => GetAllProjectsWithCustomFieldsAsyncMsg(requestObject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// Change the activity Family of a projects
		/// </summary>
		/// <param name="familyId"></param>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeActivityFamilyAsyncMsg(Guid familyId,Int32 projectId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/ChangeActivityFamily/" + familyId + "/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Change the activity Family of a projects
		/// </summary>
		/// <param name="familyId"></param>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeActivityFamilyAsync(Guid familyId,Int32 projectId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/ChangeActivityFamily/" + familyId + "/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Change the activity Family of a projects
		/// </summary>
		/// <param name="familyId"></param>
		/// <param name="projectId"></param>
		public virtual UpdateResultWithId ChangeActivityFamily(Guid familyId,Int32 projectId)
		{
			var result = Task.Run(() => ChangeActivityFamilyAsyncMsg(familyId, projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Updates multiple projects
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateListProjectsAsyncMsg(RequestSelectedProjects data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedProjects>("api/v1/proj-management/UpdateListProjects", data);
		}

		/// <summary>
		/// Updates multiple projects
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateListProjectsAsync(RequestSelectedProjects data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedProjects>("api/v1/proj-management/UpdateListProjects", data);
		}

		/// <summary>
		/// Updates multiple projects
		/// </summary>
		public virtual UpdateResult UpdateListProjects(RequestSelectedProjects data)
		{
			var result = Task.Run(() => UpdateListProjectsAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates client
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="fondDeFinancement">client id</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateFondDeFinancementAsyncMsg(Int32 projectId,Int32 fondDeFinancement)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UpdateFondDeFinancement?projectId=" + projectId + "&fondDeFinancement=" + fondDeFinancement, default(HttpResponseMessage));
		}

		/// <summary>
		/// Updates client
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="fondDeFinancement">client id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateFondDeFinancementAsync(Int32 projectId,Int32 fondDeFinancement)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UpdateFondDeFinancement?projectId=" + projectId + "&fondDeFinancement=" + fondDeFinancement, default(HttpResponseMessage));
		}

		/// <summary>
		/// Updates client
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="fondDeFinancement">client id</param>
		public virtual UpdateResult UpdateFondDeFinancement(Int32 projectId,Int32 fondDeFinancement)
		{
			var result = Task.Run(() => UpdateFondDeFinancementAsyncMsg(projectId, fondDeFinancement)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates name project
		/// </summary>
		/// <param name="projectName"></param>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateNameAsyncMsg(String projectName,Int32 projectId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UpdateName?projectName=" + projectName + "&projectId=" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Updates name project
		/// </summary>
		/// <param name="projectName"></param>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateNameAsync(String projectName,Int32 projectId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UpdateName?projectName=" + projectName + "&projectId=" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Updates name project
		/// </summary>
		/// <param name="projectName"></param>
		/// <param name="projectId"></param>
		public virtual UpdateResult UpdateName(String projectName,Int32 projectId)
		{
			var result = Task.Run(() => UpdateNameAsyncMsg(projectName, projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates project
		/// </summary>
		/// <param name="newData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectInfoAsyncMsg(ProjectJSMainStats newData)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJSMainStats>("api/v1/proj-management/UpdateProjectInfo", newData);
		}

		/// <summary>
		/// Updates project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectInfoAsync(ProjectJSMainStats newData)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJSMainStats>("api/v1/proj-management/UpdateProjectInfo", newData);
		}

		/// <summary>
		/// Updates project
		/// </summary>
		public virtual UpdateResult UpdateProjectInfo(ProjectJSMainStats newData)
		{
			var result = Task.Run(() => UpdateProjectInfoAsyncMsg(newData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates project Millesime
		/// </summary>
		/// <param name="requestObjec">Start date == Millesimes, RequestObject == ProjectId</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectMillesimeAsyncMsg(DatesRangeFilteredRequest<Int32> requestObjec)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Int32>>("api/v1/proj-management/UpdateProjectMillesime", requestObjec);
		}

		/// <summary>
		/// Updates project Millesime
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectMillesimeAsync(DatesRangeFilteredRequest<Int32> requestObjec)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Int32>>("api/v1/proj-management/UpdateProjectMillesime", requestObjec);
		}

		/// <summary>
		/// Updates project Millesime
		/// </summary>
		public virtual UpdateResult UpdateProjectMillesime(DatesRangeFilteredRequest<Int32> requestObjec)
		{
			var result = Task.Run(() => UpdateProjectMillesimeAsyncMsg(requestObjec)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates project dates and name (If name is not empty. Only updates names if startdate and enddate are the sames as projects
		/// </summary>
		/// <param name="data">Only StartDate, EndDate and Name are used for this update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectDatesAndNameAsyncMsg(ProjectJSMainStats data)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJSMainStats>("api/v1/proj-management/UpdateProjectDatesAndName", data);
		}

		/// <summary>
		/// Updates project dates and name (If name is not empty. Only updates names if startdate and enddate are the sames as projects
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectDatesAndNameAsync(ProjectJSMainStats data)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJSMainStats>("api/v1/proj-management/UpdateProjectDatesAndName", data);
		}

		/// <summary>
		/// Updates project dates and name (If name is not empty. Only updates names if startdate and enddate are the sames as projects
		/// </summary>
		public virtual UpdateResult UpdateProjectDatesAndName(ProjectJSMainStats data)
		{
			var result = Task.Run(() => UpdateProjectDatesAndNameAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> OpenProjectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.PutAsJsonAsync("api/v1/proj-management/OpenProject/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> OpenProjectAsync(Int32 projectId)
		{
			return await HttpClient.PutAsJsonAsync("api/v1/proj-management/OpenProject/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResult OpenProject(Int32 projectId)
		{
			var result = Task.Run(() => OpenProjectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeDefaultWorkPlaceAsyncMsg(Int32 projectId,Int32 workPlaceId)
		{
			return await HttpClient.PutAsJsonAsync("api/v1/proj-management/ChangeDefaultWorkPlace/" + projectId + "/" + workPlaceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeDefaultWorkPlaceAsync(Int32 projectId,Int32 workPlaceId)
		{
			return await HttpClient.PutAsJsonAsync("api/v1/proj-management/ChangeDefaultWorkPlace/" + projectId + "/" + workPlaceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>
		public virtual UpdateResult ChangeDefaultWorkPlace(Int32 projectId,Int32 workPlaceId)
		{
			var result = Task.Run(() => ChangeDefaultWorkPlaceAsyncMsg(projectId, workPlaceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Closes OPENED project. 
		/// Ignores closed projects
		/// TODO : change name
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="deleteSurvey"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CloseProjectAsyncMsg(Int32 projectId,Boolean deleteSurvey)
		{
			return await HttpClient.PutAsJsonAsync<Boolean>("api/v1/proj-management/CloseProject/" + projectId, deleteSurvey);
		}

		/// <summary>
		/// Closes OPENED project. 
		/// Ignores closed projects
		/// TODO : change name
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CloseProjectAsync(Int32 projectId,Boolean deleteSurvey)
		{
			return await HttpClient.PutAsJsonAsync<Boolean>("api/v1/proj-management/CloseProject/" + projectId, deleteSurvey);
		}

		/// <summary>
		/// Closes OPENED project. 
		/// Ignores closed projects
		/// TODO : change name
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResult CloseProject(Int32 projectId,Boolean deleteSurvey)
		{
			var result = Task.Run(() => CloseProjectAsyncMsg(projectId, deleteSurvey)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateDatesAsyncMsg(ProjectJSMainStats newData)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJSMainStats>("api/v1/proj-management/UpdateDates", newData);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateDatesAsync(ProjectJSMainStats newData)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJSMainStats>("api/v1/proj-management/UpdateDates", newData);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult UpdateDates(ProjectJSMainStats newData)
		{
			var result = Task.Run(() => UpdateDatesAsyncMsg(newData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="projectTypeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectTypeIdAsyncMsg(Int32 projectId,Int32 projectTypeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UpdateProjectTypeId/" + projectId + "/" + projectTypeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="projectTypeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectTypeIdAsync(Int32 projectId,Int32 projectTypeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/UpdateProjectTypeId/" + projectId + "/" + projectTypeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="projectTypeId"></param>
		public virtual UpdateResult UpdateProjectTypeId(Int32 projectId,Int32 projectTypeId)
		{
			var result = Task.Run(() => UpdateProjectTypeIdAsyncMsg(projectId, projectTypeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossibledRessourcesAsyncMsg(DatesRangeFilteredRequest<Boolean> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/proj-management/GetPossibledRessources", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossibledRessourcesAsync(DatesRangeFilteredRequest<Boolean> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/proj-management/GetPossibledRessources", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<EmployeJS> GetPossibledRessources(DatesRangeFilteredRequest<Boolean> param)
		{
			var result = Task.Run(() => GetPossibledRessourcesAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossibledResponsablesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetPossibledResponsables");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossibledResponsablesAsync()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetPossibledResponsables");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<EmployeJS> GetPossibledResponsables()
		{
			var result = Task.Run(() => GetPossibledResponsablesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="prId"></param>
		/// <param name="val"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleProjectFavAsyncMsg(Int32 prId,Boolean val)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/ToggleProjectFav?prId=" + prId + "&val=" + val, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="prId"></param>
		/// <param name="val"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleProjectFavAsync(Int32 prId,Boolean val)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/ToggleProjectFav?prId=" + prId + "&val=" + val, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="prId"></param>
		/// <param name="val"></param>
		public virtual UpdateResult ToggleProjectFav(Int32 prId,Boolean val)
		{
			var result = Task.Run(() => ToggleProjectFavAsyncMsg(prId, val)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectDescriptionAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetProjectDescription?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectDescriptionAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetProjectDescription?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult GetProjectDescription(Int32 id)
		{
			var result = Task.Run(() => GetProjectDescriptionAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="description"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectDescriptionAsyncMsg(Int32 id,String description)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/proj-management/UpdateProjectDescription?id=" + id, description);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectDescriptionAsync(Int32 id,String description)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/proj-management/UpdateProjectDescription?id=" + id, description);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult UpdateProjectDescription(Int32 id,String description)
		{
			var result = Task.Run(() => UpdateProjectDescriptionAsyncMsg(id, description)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleProjectsListAsyncMsg(DatesRangeFilteredRequest<RequestProjectManaged> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestProjectManaged>>("api/v1/proj-management/GetAvalibleProjectsList", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleProjectsListAsync(DatesRangeFilteredRequest<RequestProjectManaged> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestProjectManaged>>("api/v1/proj-management/GetAvalibleProjectsList", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectJS> GetAvalibleProjectsList(DatesRangeFilteredRequest<RequestProjectManaged> param)
		{
			var result = Task.Run(() => GetAvalibleProjectsListAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleProjectsListNoDateAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetAvalibleProjectsListNoDate");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleProjectsListNoDateAsync()
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetAvalibleProjectsListNoDate");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectJS> GetAvalibleProjectsListNoDate()
		{
			var result = Task.Run(() => GetAvalibleProjectsListNoDateAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsForProjectAsyncMsg(Int32 projectId,Boolean noUnique)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetCustomFieldsForProject/" + projectId + "/" + noUnique);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsForProjectAsync(Int32 projectId,Boolean noUnique)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetCustomFieldsForProject/" + projectId + "/" + noUnique);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>
		public virtual List<CustomFieldJs> GetCustomFieldsForProject(Int32 projectId,Boolean noUnique)
		{
			var result = Task.Run(() => GetCustomFieldsForProjectAsyncMsg(projectId, noUnique)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsForRessourceAsyncMsg(Int32 ressourceId,Boolean noUnique)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetCustomFieldsForRessource/" + ressourceId + "/" + noUnique);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsForRessourceAsync(Int32 ressourceId,Boolean noUnique)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetCustomFieldsForRessource/" + ressourceId + "/" + noUnique);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="noUnique"></param>
		public virtual List<CustomFieldJs> GetCustomFieldsForRessource(Int32 ressourceId,Boolean noUnique)
		{
			var result = Task.Run(() => GetCustomFieldsForRessourceAsyncMsg(ressourceId, noUnique)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="pId"></param>
		/// <param name="rId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RemoveRessourceFromProjectAsyncMsg(Int32 pId,Int32 rId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/RemoveRessourceFromProject/" + pId + "/" + rId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="pId"></param>
		/// <param name="rId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveRessourceFromProjectAsync(Int32 pId,Int32 rId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/RemoveRessourceFromProject/" + pId + "/" + rId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="pId"></param>
		/// <param name="rId"></param>
		public virtual UpdateResultWithId RemoveRessourceFromProject(Int32 pId,Int32 rId)
		{
			var result = Task.Run(() => RemoveRessourceFromProjectAsyncMsg(pId, rId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// For a project/resource remove the bill Rate, if error or no bill rate to delete return -1
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RemoveProjectResourcesBillRateAsyncMsg(Int32 projectId,Int32 resourceId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/RemoveProjectResourcesBillRate/" + projectId + "/" + resourceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// For a project/resource remove the bill Rate, if error or no bill rate to delete return -1
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveProjectResourcesBillRateAsync(Int32 projectId,Int32 resourceId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/RemoveProjectResourcesBillRate/" + projectId + "/" + resourceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// For a project/resource remove the bill Rate, if error or no bill rate to delete return -1
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		public virtual Double RemoveProjectResourcesBillRate(Int32 projectId,Int32 resourceId)
		{
			var result = Task.Run(() => RemoveProjectResourcesBillRateAsyncMsg(projectId, resourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Double>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="rs"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectRessourcesAsyncMsg(Int32 projectId,List<RessourceStats> rs)
		{
			return await HttpClient.PostAsJsonAsync<List<RessourceStats>>("api/v1/proj-management/UpdateProjectRessources/" + projectId, rs);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectRessourcesAsync(Int32 projectId,List<RessourceStats> rs)
		{
			return await HttpClient.PostAsJsonAsync<List<RessourceStats>>("api/v1/proj-management/UpdateProjectRessources/" + projectId, rs);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResult UpdateProjectRessources(Int32 projectId,List<RessourceStats> rs)
		{
			var result = Task.Run(() => UpdateProjectRessourcesAsyncMsg(projectId, rs)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="objective"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddObjectiveAsyncMsg(ProjectObjective objective)
		{
			return await HttpClient.PostAsJsonAsync<ProjectObjective>("api/v1/proj-management/objective", objective);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddObjectiveAsync(ProjectObjective objective)
		{
			return await HttpClient.PostAsJsonAsync<ProjectObjective>("api/v1/proj-management/objective", objective);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId AddObjective(ProjectObjective objective)
		{
			var result = Task.Run(() => AddObjectiveAsyncMsg(objective)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projects"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateProjectsAsyncMsg(List<ApiProject> projects)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiProject>>("api/v1/proj-management/CreateOrUpdateProjects", projects);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateProjectsAsync(List<ApiProject> projects)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiProject>>("api/v1/proj-management/CreateOrUpdateProjects", projects);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId CreateOrUpdateProjects(List<ApiProject> projects)
		{
			var result = Task.Run(() => CreateOrUpdateProjectsAsyncMsg(projects)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Insert or update a list of projects without creating non existing resources linked
		/// </summary>
		/// <param name="projects"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateProjectsWithoutUsersOldAsyncMsg(List<ApiProject> projects)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiProject>>("api/v1/proj-management/CreateOrUpdateProjectsWithoutUsers", projects);
		}

		/// <summary>
		/// Insert or update a list of projects without creating non existing resources linked
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateProjectsWithoutUsersOldAsync(List<ApiProject> projects)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiProject>>("api/v1/proj-management/CreateOrUpdateProjectsWithoutUsers", projects);
		}

		/// <summary>
		/// Insert or update a list of projects without creating non existing resources linked
		/// </summary>
		public virtual UpdateResultWithId CreateOrUpdateProjectsWithoutUsersOld(List<ApiProject> projects)
		{
			var result = Task.Run(() => CreateOrUpdateProjectsWithoutUsersOldAsyncMsg(projects)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Insert or update a list of projects without creating non existing resources linked
		/// </summary>
		/// <param name="projects"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateProjectsWithoutUsersAsyncMsg(List<ApiProject> projects)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiProject>>("api/v2/proj-management/CreateOrUpdateProjectsWithoutUsers", projects);
		}

		/// <summary>
		/// Insert or update a list of projects without creating non existing resources linked
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateProjectsWithoutUsersAsync(List<ApiProject> projects)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiProject>>("api/v2/proj-management/CreateOrUpdateProjectsWithoutUsers", projects);
		}

		/// <summary>
		/// Insert or update a list of projects without creating non existing resources linked
		/// </summary>
		public virtual List<ResponseContainer<ApiProject>> CreateOrUpdateProjectsWithoutUsers(List<ApiProject> projects)
		{
			var result = Task.Run(() => CreateOrUpdateProjectsWithoutUsersAsyncMsg(projects)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ResponseContainer<ApiProject>>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIs for managing project states
	/// </summary>
	public partial class ProjectStatesClient : ClientBase, Interfaces.IProjectStatesClient
	{		

		/// <summary>
		/// APIs for managing project states
		/// </summary>
		public ProjectStatesClient() : base()
		{
		}

		/// <summary>
		/// APIs for managing project states
		/// </summary>
		public ProjectStatesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// The list of all avalible states with asociated colors
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllStatesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/projectStates/getAllStates");
		}

		/// <summary>
		/// The list of all avalible states with asociated colors
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllStatesAsync()
		{
			return await HttpClient.GetAsync("api/v1/projectStates/getAllStates");
		}

		/// <summary>
		/// The list of all avalible states with asociated colors
		/// </summary>
		public virtual List<ProjectState> GetAllStates()
		{
			var result = Task.Run(() => GetAllStatesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectState>>().Result;
			 		}

		/// <summary>
		/// Change a comment for already existing project state
		/// </summary>
		/// <param name="assignedStateId">Id of project state</param>
		/// <param name="comment">New comment</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateStateAsyncMsg(Int32 assignedStateId,String comment)
		{
			return await HttpClient.PutAsJsonAsync<String>("api/v1/projectStates/update/" + assignedStateId, comment);
		}

		/// <summary>
		/// Change a comment for already existing project state
		/// </summary>
		/// <param name="assignedStateId">Id of project state</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateStateAsync(Int32 assignedStateId,String comment)
		{
			return await HttpClient.PutAsJsonAsync<String>("api/v1/projectStates/update/" + assignedStateId, comment);
		}

		/// <summary>
		/// Change a comment for already existing project state
		/// </summary>
		/// <param name="assignedStateId">Id of project state</param>
		public virtual UpdateResult UpdateState(Int32 assignedStateId,String comment)
		{
			var result = Task.Run(() => UpdateStateAsyncMsg(assignedStateId, comment)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Add new project state to a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>
		/// <param name="comment">Coment. Can be empty</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddStateAsyncMsg(Int32 projectId,Int32 stateId,String comment)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/projectStates/update/" + projectId + "/" + stateId, comment);
		}

		/// <summary>
		/// Add new project state to a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddStateAsync(Int32 projectId,Int32 stateId,String comment)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/projectStates/update/" + projectId + "/" + stateId, comment);
		}

		/// <summary>
		/// Add new project state to a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>
		public virtual UpdateResultWithId AddState(Int32 projectId,Int32 stateId,String comment)
		{
			var result = Task.Run(() => AddStateAsyncMsg(projectId, stateId, comment)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Get the list of all states for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetStatesForProjectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/projectStates/" + projectId);
		}

		/// <summary>
		/// Get the list of all states for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetStatesForProjectAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/projectStates/" + projectId);
		}

		/// <summary>
		/// Get the list of all states for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		public virtual List<ProjectState> GetStatesForProject(Int32 projectId)
		{
			var result = Task.Run(() => GetStatesForProjectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectState>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSurveyClient : ClientBase, Interfaces.IProjectSurveyClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ProjectSurveyClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ProjectSurveyClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Send All Team
		/// </summary>
		/// <param name="pId"></param>
		/// <param name="sendToTeam"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SendAllTeamAsyncMsg(Int32 pId,Boolean sendToTeam)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-survey/SendAllTeam?pId=" + pId + "&sendToTeam=" + sendToTeam, default(HttpResponseMessage));
		}

		/// <summary>
		/// Send All Team
		/// </summary>
		/// <param name="pId"></param>
		/// <param name="sendToTeam"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SendAllTeamAsync(Int32 pId,Boolean sendToTeam)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-survey/SendAllTeam?pId=" + pId + "&sendToTeam=" + sendToTeam, default(HttpResponseMessage));
		}

		/// <summary>
		/// Send All Team
		/// </summary>
		/// <param name="pId"></param>
		/// <param name="sendToTeam"></param>
		public virtual UpdateResult SendAllTeam(Int32 pId,Boolean sendToTeam)
		{
			var result = Task.Run(() => SendAllTeamAsyncMsg(pId, sendToTeam)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Add Survey Question
		/// </summary>
		/// <param name="idSection"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddSurveyQuestionAsyncMsg(Int32 idSection)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-survey/AddSurveyQuestion?idSection=" + idSection, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add Survey Question
		/// </summary>
		/// <param name="idSection"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddSurveyQuestionAsync(Int32 idSection)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-survey/AddSurveyQuestion?idSection=" + idSection, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add Survey Question
		/// </summary>
		/// <param name="idSection"></param>
		public virtual UpdateResultWithId AddSurveyQuestion(Int32 idSection)
		{
			var result = Task.Run(() => AddSurveyQuestionAsyncMsg(idSection)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Delete Survey Section
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteSurveySectionAsyncMsg(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/proj-survey/DeleteSurveySection?id=" + id);
		}

		/// <summary>
		/// Delete Survey Section
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSurveySectionAsync(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/proj-survey/DeleteSurveySection?id=" + id);
		}

		/// <summary>
		/// Delete Survey Section
		/// </summary>
		/// <param name="id"></param>
		public virtual Boolean DeleteSurveySection(Int32 id)
		{
			var result = Task.Run(() => DeleteSurveySectionAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Send Email Survey
		/// </summary>
		/// <param name="prId"></param>
		/// <param name="sendToTeam"></param>
		/// <param name="haveSurveyAnswer"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SendEmailSurveyAsyncMsg(Int32 prId,Boolean sendToTeam,Boolean haveSurveyAnswer)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-survey/SendEmailSurvey?prId=" + prId + "&sendToTeam=" + sendToTeam + "&haveSurveyAnswer=" + haveSurveyAnswer, default(HttpResponseMessage));
		}

		/// <summary>
		/// Send Email Survey
		/// </summary>
		/// <param name="prId"></param>
		/// <param name="sendToTeam"></param>
		/// <param name="haveSurveyAnswer"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SendEmailSurveyAsync(Int32 prId,Boolean sendToTeam,Boolean haveSurveyAnswer)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-survey/SendEmailSurvey?prId=" + prId + "&sendToTeam=" + sendToTeam + "&haveSurveyAnswer=" + haveSurveyAnswer, default(HttpResponseMessage));
		}

		/// <summary>
		/// Send Email Survey
		/// </summary>
		/// <param name="prId"></param>
		/// <param name="sendToTeam"></param>
		/// <param name="haveSurveyAnswer"></param>
		public virtual Boolean SendEmailSurvey(Int32 prId,Boolean sendToTeam,Boolean haveSurveyAnswer)
		{
			var result = Task.Run(() => SendEmailSurveyAsyncMsg(prId, sendToTeam, haveSurveyAnswer)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Save Answer
		/// </summary>
		/// <param name="answer"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveAnswerAsyncMsg(List<ProjectSurveyQuestionAnswer> answer)
		{
			return await HttpClient.PostAsJsonAsync<List<ProjectSurveyQuestionAnswer>>("api/v1/proj-survey/SaveAnswer", answer);
		}

		/// <summary>
		/// Save Answer
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveAnswerAsync(List<ProjectSurveyQuestionAnswer> answer)
		{
			return await HttpClient.PostAsJsonAsync<List<ProjectSurveyQuestionAnswer>>("api/v1/proj-survey/SaveAnswer", answer);
		}

		/// <summary>
		/// Save Answer
		/// </summary>
		public virtual UpdateResult SaveAnswer(List<ProjectSurveyQuestionAnswer> answer)
		{
			var result = Task.Run(() => SaveAnswerAsyncMsg(answer)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get Project Survey Question Sections
		/// </summary>
		/// <param name="pId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectSurveyQuestionSectionsAsyncMsg(Int32 pId)
		{
			return await HttpClient.GetAsync("api/v1/proj-survey/GetProjectSurveyQuestionSections?pId=" + pId);
		}

		/// <summary>
		/// Get Project Survey Question Sections
		/// </summary>
		/// <param name="pId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectSurveyQuestionSectionsAsync(Int32 pId)
		{
			return await HttpClient.GetAsync("api/v1/proj-survey/GetProjectSurveyQuestionSections?pId=" + pId);
		}

		/// <summary>
		/// Get Project Survey Question Sections
		/// </summary>
		/// <param name="pId"></param>
		public virtual List<SurveySection> GetProjectSurveyQuestionSections(Int32 pId)
		{
			var result = Task.Run(() => GetProjectSurveyQuestionSectionsAsyncMsg(pId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SurveySection>>().Result;
			 		}

		/// <summary>
		/// Delete Survey
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteSurveyAsyncMsg(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/proj-survey/DeleteSurvey?id=" + id);
		}

		/// <summary>
		/// Delete Survey
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSurveyAsync(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/proj-survey/DeleteSurvey?id=" + id);
		}

		/// <summary>
		/// Delete Survey
		/// </summary>
		/// <param name="id"></param>
		public virtual Boolean DeleteSurvey(Int32 id)
		{
			var result = Task.Run(() => DeleteSurveyAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Update Question
		/// </summary>
		/// <param name="questionChange"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateQuestionAsyncMsg(ProjectSurveyQuestion questionChange)
		{
			return await HttpClient.PostAsJsonAsync<ProjectSurveyQuestion>("api/v1/proj-survey/UpdateQuestion", questionChange);
		}

		/// <summary>
		/// Update Question
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateQuestionAsync(ProjectSurveyQuestion questionChange)
		{
			return await HttpClient.PostAsJsonAsync<ProjectSurveyQuestion>("api/v1/proj-survey/UpdateQuestion", questionChange);
		}

		/// <summary>
		/// Update Question
		/// </summary>
		public virtual UpdateResult UpdateQuestion(ProjectSurveyQuestion questionChange)
		{
			var result = Task.Run(() => UpdateQuestionAsyncMsg(questionChange)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Section
		/// </summary>
		/// <param name="sectionChange"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateSectionAsyncMsg(ProjectSurveyQuestionSection sectionChange)
		{
			return await HttpClient.PostAsJsonAsync<ProjectSurveyQuestionSection>("api/v1/proj-survey/UpdateSection", sectionChange);
		}

		/// <summary>
		/// Update Section
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateSectionAsync(ProjectSurveyQuestionSection sectionChange)
		{
			return await HttpClient.PostAsJsonAsync<ProjectSurveyQuestionSection>("api/v1/proj-survey/UpdateSection", sectionChange);
		}

		/// <summary>
		/// Update Section
		/// </summary>
		public virtual UpdateResult UpdateSection(ProjectSurveyQuestionSection sectionChange)
		{
			var result = Task.Run(() => UpdateSectionAsyncMsg(sectionChange)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Add Survey Section
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddSurveySectionAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-survey/AddSurveySection", default(HttpResponseMessage));
		}

		/// <summary>
		/// Add Survey Section
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddSurveySectionAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-survey/AddSurveySection", default(HttpResponseMessage));
		}

		/// <summary>
		/// Add Survey Section
		/// </summary>
		public virtual UpdateResultWithId AddSurveySection()
		{
			var result = Task.Run(() => AddSurveySectionAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Save Survey Parametres
		/// </summary>
		/// <param name="toSave"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveSurveyParametresAsyncMsg(CompagnyGeneralParams toSave)
		{
			return await HttpClient.PostAsJsonAsync<CompagnyGeneralParams>("api/v1/proj-survey/SaveSurveyParametres", toSave);
		}

		/// <summary>
		/// Save Survey Parametres
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveSurveyParametresAsync(CompagnyGeneralParams toSave)
		{
			return await HttpClient.PostAsJsonAsync<CompagnyGeneralParams>("api/v1/proj-survey/SaveSurveyParametres", toSave);
		}

		/// <summary>
		/// Save Survey Parametres
		/// </summary>
		public virtual UpdateResult SaveSurveyParametres(CompagnyGeneralParams toSave)
		{
			var result = Task.Run(() => SaveSurveyParametresAsyncMsg(toSave)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get Survey Enable
		/// </summary>
		/// <param name="ProjectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSurveyEnableAsyncMsg(Int32 ProjectId)
		{
			return await HttpClient.GetAsync("api/v1/proj-survey/GetSurveyEnable?ProjectId=" + ProjectId);
		}

		/// <summary>
		/// Get Survey Enable
		/// </summary>
		/// <param name="ProjectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSurveyEnableAsync(Int32 ProjectId)
		{
			return await HttpClient.GetAsync("api/v1/proj-survey/GetSurveyEnable?ProjectId=" + ProjectId);
		}

		/// <summary>
		/// Get Survey Enable
		/// </summary>
		/// <param name="ProjectId"></param>
		public virtual SurveyState GetSurveyEnable(Int32 ProjectId)
		{
			var result = Task.Run(() => GetSurveyEnableAsyncMsg(ProjectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<SurveyState>().Result;
			 		}

		/// <summary>
		/// Get Survey Question Sections
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSurveyQuestionSectionsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/proj-survey/GetSurveyQuestionSections");
		}

		/// <summary>
		/// Get Survey Question Sections
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSurveyQuestionSectionsAsync()
		{
			return await HttpClient.GetAsync("api/v1/proj-survey/GetSurveyQuestionSections");
		}

		/// <summary>
		/// Get Survey Question Sections
		/// </summary>
		public virtual List<SurveySection> GetSurveyQuestionSections()
		{
			var result = Task.Run(() => GetSurveyQuestionSectionsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SurveySection>>().Result;
			 		}

		/// <summary>
		/// Get Aswer Question
		/// </summary>
		/// <param name="qId"></param>
		/// <param name="pId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAswerQuestionAsyncMsg(Int32 qId,Int32 pId)
		{
			return await HttpClient.GetAsync("api/v1/proj-survey/GetMyProjectsList?qId=" + qId + "&pId=" + pId);
		}

		/// <summary>
		/// Get Aswer Question
		/// </summary>
		/// <param name="qId"></param>
		/// <param name="pId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAswerQuestionAsync(Int32 qId,Int32 pId)
		{
			return await HttpClient.GetAsync("api/v1/proj-survey/GetMyProjectsList?qId=" + qId + "&pId=" + pId);
		}

		/// <summary>
		/// Get Aswer Question
		/// </summary>
		/// <param name="qId"></param>
		/// <param name="pId"></param>
		public virtual AswerQuestion GetAswerQuestion(Int32 qId,Int32 pId)
		{
			var result = Task.Run(() => GetAswerQuestionAsyncMsg(qId, pId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<AswerQuestion>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIs for managing project states
	/// </summary>
	public partial class ProjectTemplateClient : ClientBase, Interfaces.IProjectTemplateClient
	{		

		/// <summary>
		/// APIs for managing project states
		/// </summary>
		public ProjectTemplateClient() : base()
		{
		}

		/// <summary>
		/// APIs for managing project states
		/// </summary>
		public ProjectTemplateClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// The list of all template
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllTemplatesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/projectTemplate/getAllTemplates");
		}

		/// <summary>
		/// The list of all template
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllTemplatesAsync()
		{
			return await HttpClient.GetAsync("api/v1/projectTemplate/getAllTemplates");
		}

		/// <summary>
		/// The list of all template
		/// </summary>
		public virtual List<ProjectTemplate> GetAllTemplates()
		{
			var result = Task.Run(() => GetAllTemplatesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTemplate>>().Result;
			 		}

		/// <summary>
		/// The list of template for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTemplatesListAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/projectTemplate/getAllTemplates?projectId=" + projectId);
		}

		/// <summary>
		/// The list of template for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTemplatesListAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/projectTemplate/getAllTemplates?projectId=" + projectId);
		}

		/// <summary>
		/// The list of template for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		public virtual List<ProjectTemplate> GetTemplatesList(Int32 projectId)
		{
			var result = Task.Run(() => GetTemplatesListAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTemplate>>().Result;
			 		}

		/// <summary>
		/// Create template for project
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateTemplateAsyncMsg(ProjectTemplateParams param)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTemplateParams>("api/v1/projectTemplate/createTemplate", param);
		}

		/// <summary>
		/// Create template for project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateTemplateAsync(ProjectTemplateParams param)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTemplateParams>("api/v1/projectTemplate/createTemplate", param);
		}

		/// <summary>
		/// Create template for project
		/// </summary>
		public virtual ProjectTemplate CreateTemplate(ProjectTemplateParams param)
		{
			var result = Task.Run(() => CreateTemplateAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectTemplate>().Result;
			 		}

		/// <summary>
		/// Delete template for project
		/// </summary>
		/// <param name="tid">Guid of the template</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTemplateAsyncMsg(String tid)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/projectTemplate/deleteTemplate?tid=" + tid, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete template for project
		/// </summary>
		/// <param name="tid">Guid of the template</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTemplateAsync(String tid)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/projectTemplate/deleteTemplate?tid=" + tid, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete template for project
		/// </summary>
		/// <param name="tid">Guid of the template</param>
		public virtual UpdateResult DeleteTemplate(String tid)
		{
			var result = Task.Run(() => DeleteTemplateAsyncMsg(tid)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTypeClient : ClientBase, Interfaces.IProjectTypeClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ProjectTypeClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ProjectTypeClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveTypeProjectDynamicNameAsyncMsg(TypeProjectDynamic param)
		{
			return await HttpClient.PostAsJsonAsync<TypeProjectDynamic>("api/v1/projectType/SaveTypeProjectDynamicName", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveTypeProjectDynamicNameAsync(TypeProjectDynamic param)
		{
			return await HttpClient.PostAsJsonAsync<TypeProjectDynamic>("api/v1/projectType/SaveTypeProjectDynamicName", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess SaveTypeProjectDynamicName(TypeProjectDynamic param)
		{
			var result = Task.Run(() => SaveTypeProjectDynamicNameAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjectTypeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteProjectTypeAsyncMsg(Int32 ProjectTypeId)
		{
			return await HttpClient.DeleteAsync("api/v1/projectType/DeleteProjectType?ProjectTypeId=" + ProjectTypeId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjectTypeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteProjectTypeAsync(Int32 ProjectTypeId)
		{
			return await HttpClient.DeleteAsync("api/v1/projectType/DeleteProjectType?ProjectTypeId=" + ProjectTypeId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjectTypeId"></param>
		public virtual UpdateResultWithId DeleteProjectType(Int32 ProjectTypeId)
		{
			var result = Task.Run(() => DeleteProjectTypeAsyncMsg(ProjectTypeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="prjs"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectTypeAsyncMsg(ProjectTypeJS prjs)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTypeJS>("api/v1/projectType/UpdateProjectType", prjs);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectTypeAsync(ProjectTypeJS prjs)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTypeJS>("api/v1/projectType/UpdateProjectType", prjs);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId UpdateProjectType(ProjectTypeJS prjs)
		{
			var result = Task.Run(() => UpdateProjectTypeAsyncMsg(prjs)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="prjs"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectTypesAsyncMsg(List<ProjectTypeJS> prjs)
		{
			return await HttpClient.PostAsJsonAsync<List<ProjectTypeJS>>("api/v1/projectType/UpdateProjectTypes", prjs);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectTypesAsync(List<ProjectTypeJS> prjs)
		{
			return await HttpClient.PostAsJsonAsync<List<ProjectTypeJS>>("api/v1/projectType/UpdateProjectTypes", prjs);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId UpdateProjectTypes(List<ProjectTypeJS> prjs)
		{
			var result = Task.Run(() => UpdateProjectTypesAsyncMsg(prjs)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categorie"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateCategoryAsyncMsg(CustomFieldCategory categorie)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldCategory>("api/v1/projectType/UpdateCategory", categorie);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateCategoryAsync(CustomFieldCategory categorie)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldCategory>("api/v1/projectType/UpdateCategory", categorie);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId UpdateCategory(CustomFieldCategory categorie)
		{
			var result = Task.Run(() => UpdateCategoryAsyncMsg(categorie)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsCategpriesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFieldsCategpries");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsCategpriesAsync()
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFieldsCategpries");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldCategory> GetCustomFieldsCategpries()
		{
			var result = Task.Run(() => GetCustomFieldsCategpriesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldCategory>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldByIdAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFieldById?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldByIdAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFieldById?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual CustomFieldJs GetCustomFieldById(Int32 id)
		{
			var result = Task.Run(() => GetCustomFieldByIdAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<CustomFieldJs>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHiddens"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getAllCustomField"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsAsyncMsg(Boolean takeHiddens,Boolean takeCalculHard,Boolean getAllCustomField)
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFields?takeHiddens=" + takeHiddens + "&takeCalculHard=" + takeCalculHard + "&getAllCustomField=" + getAllCustomField);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHiddens"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getAllCustomField"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsAsync(Boolean takeHiddens,Boolean takeCalculHard,Boolean getAllCustomField)
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFields?takeHiddens=" + takeHiddens + "&takeCalculHard=" + takeCalculHard + "&getAllCustomField=" + getAllCustomField);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHiddens"></param>
		/// <param name="takeCalculHard"></param>
		/// <param name="getAllCustomField"></param>
		public virtual List<CustomFieldJs> GetCustomFields(Boolean takeHiddens,Boolean takeCalculHard,Boolean getAllCustomField)
		{
			var result = Task.Run(() => GetCustomFieldsAsyncMsg(takeHiddens, takeCalculHard, getAllCustomField)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCustomFieldCategoryAsyncMsg(Int32 categoryId)
		{
			return await HttpClient.DeleteAsync("api/v1/projectType/DeleteCustomFieldCategory?categoryId=" + categoryId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCustomFieldCategoryAsync(Int32 categoryId)
		{
			return await HttpClient.DeleteAsync("api/v1/projectType/DeleteCustomFieldCategory?categoryId=" + categoryId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryId"></param>
		public virtual UpdateResult DeleteCustomFieldCategory(Int32 categoryId)
		{
			var result = Task.Run(() => DeleteCustomFieldCategoryAsyncMsg(categoryId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="category"></param>
		/// <param name="isRessource"></param>
		/// <param name="isClient"></param>
		/// <param name="toReorder"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReorderFieldsAsyncMsg(Int32 category,Boolean isRessource,Boolean isClient,Dictionary<Int32, Int32> toReorder)
		{
			return await HttpClient.PostAsJsonAsync<Dictionary<Int32, Int32>>("api/v1/projectType/ReorderFields?category=" + category + "&isRessource=" + isRessource + "&isClient=" + isClient, toReorder);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="category"></param>
		/// <param name="isRessource"></param>
		/// <param name="isClient"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReorderFieldsAsync(Int32 category,Boolean isRessource,Boolean isClient,Dictionary<Int32, Int32> toReorder)
		{
			return await HttpClient.PostAsJsonAsync<Dictionary<Int32, Int32>>("api/v1/projectType/ReorderFields?category=" + category + "&isRessource=" + isRessource + "&isClient=" + isClient, toReorder);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="category"></param>
		/// <param name="isRessource"></param>
		/// <param name="isClient"></param>
		public virtual UpdateResult ReorderFields(Int32 category,Boolean isRessource,Boolean isClient,Dictionary<Int32, Int32> toReorder)
		{
			var result = Task.Run(() => ReorderFieldsAsyncMsg(category, isRessource, isClient, toReorder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCustomFieldAsyncMsg(Int32 fieldId,Boolean isRessourceCustom)
		{
			return await HttpClient.DeleteAsync("api/v1/projectType/DeleteCustomField?fieldId=" + fieldId + "&isRessourceCustom=" + isRessourceCustom);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCustomFieldAsync(Int32 fieldId,Boolean isRessourceCustom)
		{
			return await HttpClient.DeleteAsync("api/v1/projectType/DeleteCustomField?fieldId=" + fieldId + "&isRessourceCustom=" + isRessourceCustom);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fieldId"></param>
		/// <param name="isRessourceCustom"></param>
		public virtual UpdateResult DeleteCustomField(Int32 fieldId,Boolean isRessourceCustom)
		{
			var result = Task.Run(() => DeleteCustomFieldAsyncMsg(fieldId, isRessourceCustom)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCompanyTypesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCompanyTypes");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCompanyTypesAsync()
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCompanyTypes");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTypeJS> GetCompanyTypes()
		{
			var result = Task.Run(() => GetCompanyTypesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTypeJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="field"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> EditCustomFieldAsyncMsg(CustomFieldJs field)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldJs>("api/v1/projectType/EditCustomField", field);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> EditCustomFieldAsync(CustomFieldJs field)
		{
			return await HttpClient.PostAsJsonAsync<CustomFieldJs>("api/v1/projectType/EditCustomField", field);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId EditCustomField(CustomFieldJs field)
		{
			var result = Task.Run(() => EditCustomFieldAsyncMsg(field)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldRessourceByIdAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFieldRessourceById?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldRessourceByIdAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFieldRessourceById?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual CustomFieldJs GetCustomFieldRessourceById(Int32 id)
		{
			var result = Task.Run(() => GetCustomFieldRessourceByIdAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<CustomFieldJs>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldClientByIdAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFieldClientById?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldClientByIdAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCustomFieldClientById?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual CustomFieldJs GetCustomFieldClientById(Int32 id)
		{
			var result = Task.Run(() => GetCustomFieldClientByIdAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<CustomFieldJs>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCompanyTypesWithSubscribtionAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCompanyTypesWithSubscribtion");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCompanyTypesWithSubscribtionAsync()
		{
			return await HttpClient.GetAsync("api/v1/projectType/GetCompanyTypesWithSubscribtion");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTypeJS> GetCompanyTypesWithSubscribtion()
		{
			var result = Task.Run(() => GetCompanyTypesWithSubscribtionAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTypeJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectType"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateAsyncMsg(ProjectTypeJS projectType)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTypeJS>("api/ProjectType", projectType);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateAsync(ProjectTypeJS projectType)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTypeJS>("api/ProjectType", projectType);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId Create(ProjectTypeJS projectType)
		{
			var result = Task.Run(() => CreateAsyncMsg(projectType)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ListAsyncMsg()
		{
			return await HttpClient.GetAsync("api/ProjectType");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ListAsync()
		{
			return await HttpClient.GetAsync("api/ProjectType");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTypeJS> List()
		{
			var result = Task.Run(() => ListAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTypeJS>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class RapportsClient : ClientBase, Interfaces.IRapportsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public RapportsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public RapportsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// This API is lighter version of reports. Calculated fields are not included and filters are disabled, besides base filters
		/// Supported groupping : All projects
		/// </summary>
		/// <param name="searchOptions">Base filter options : columns, dates, views</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsNoFiltersAsyncMsg(SearchCriteriaRapports searchOptions)
		{
			return await HttpClient.PostAsJsonAsync<SearchCriteriaRapports>("api/v1/reports/GetprojectsNoFilters", searchOptions);
		}

		/// <summary>
		/// This API is lighter version of reports. Calculated fields are not included and filters are disabled, besides base filters
		/// Supported groupping : All projects
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsNoFiltersAsync(SearchCriteriaRapports searchOptions)
		{
			return await HttpClient.PostAsJsonAsync<SearchCriteriaRapports>("api/v1/reports/GetprojectsNoFilters", searchOptions);
		}

		/// <summary>
		/// This API is lighter version of reports. Calculated fields are not included and filters are disabled, besides base filters
		/// Supported groupping : All projects
		/// </summary>
		public virtual ProjectTypeStats GetProjectsNoFilters(SearchCriteriaRapports searchOptions)
		{
			var result = Task.Run(() => GetProjectsNoFiltersAsyncMsg(searchOptions)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectTypeStats>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddNewRapportViewAsyncMsg(DatesRangeFilteredRequestPagination<UserPreferencesRepportsParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesRepportsParam>>("addNewRapportView", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddNewRapportViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesRepportsParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesRepportsParam>>("addNewRapportView", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId AddNewRapportView(DatesRangeFilteredRequestPagination<UserPreferencesRepportsParam> param)
		{
			var result = Task.Run(() => AddNewRapportViewAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Delete Rapport View
		/// </summary>
		/// <param name="viewId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteRapportViewAsyncMsg(Int32 viewId)
		{
			return await HttpClient.DeleteAsync("DeleteRapportView?viewId=" + viewId);
		}

		/// <summary>
		/// Delete Rapport View
		/// </summary>
		/// <param name="viewId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteRapportViewAsync(Int32 viewId)
		{
			return await HttpClient.DeleteAsync("DeleteRapportView?viewId=" + viewId);
		}

		/// <summary>
		/// Delete Rapport View
		/// </summary>
		/// <param name="viewId"></param>
		public virtual UpdateResult DeleteRapportView(Int32 viewId)
		{
			var result = Task.Run(() => DeleteRapportViewAsyncMsg(viewId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Change Rapport View order
		/// </summary>
		/// <param name="rapportType"></param>
		/// <param name="newOrder"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeRepportsOrderAsyncMsg(Int32 rapportType,Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("ChangeRepportsOrder/" + rapportType, newOrder);
		}

		/// <summary>
		/// Change Rapport View order
		/// </summary>
		/// <param name="rapportType"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeRepportsOrderAsync(Int32 rapportType,Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("ChangeRepportsOrder/" + rapportType, newOrder);
		}

		/// <summary>
		/// Change Rapport View order
		/// </summary>
		/// <param name="rapportType"></param>
		public virtual UpdateResult ChangeRepportsOrder(Int32 rapportType,Int32[] newOrder)
		{
			var result = Task.Run(() => ChangeRepportsOrderAsyncMsg(rapportType, newOrder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get Projects By Categorie
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsByCategorieAsyncMsg(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SearchCriteriaRapports>>("GetProjectsByCategorie", dates);
		}

		/// <summary>
		/// Get Projects By Categorie
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsByCategorieAsync(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SearchCriteriaRapports>>("GetProjectsByCategorie", dates);
		}

		/// <summary>
		/// Get Projects By Categorie
		/// </summary>
		public virtual BaseRapport GetProjectsByCategorie(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			var result = Task.Run(() => GetProjectsByCategorieAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<BaseRapport>().Result;
			 		}

		/// <summary>
		/// Get tasks By Direction
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTasksByDirectionAsyncMsg(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SearchCriteriaRapports>>("GetTasksByDirection", dates);
		}

		/// <summary>
		/// Get tasks By Direction
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTasksByDirectionAsync(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SearchCriteriaRapports>>("GetTasksByDirection", dates);
		}

		/// <summary>
		/// Get tasks By Direction
		/// </summary>
		public virtual BaseRapport GetTasksByDirection(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			var result = Task.Run(() => GetTasksByDirectionAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<BaseRapport>().Result;
			 		}

		/// <summary>
		/// Get Surveys By Project
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSurveysByProjectAsyncMsg(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SearchCriteriaRapports>>("GetSurveysByProject", dates);
		}

		/// <summary>
		/// Get Surveys By Project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSurveysByProjectAsync(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SearchCriteriaRapports>>("GetSurveysByProject", dates);
		}

		/// <summary>
		/// Get Surveys By Project
		/// </summary>
		public virtual BaseRapport GetSurveysByProject(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			var result = Task.Run(() => GetSurveysByProjectAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<BaseRapport>().Result;
			 		}

		/// <summary>
		/// Get Task Custom By Id
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTaskCustomByIdAsyncMsg(Int32 taskId)
		{
			return await HttpClient.GetAsync("GetTaskCustomById/" + taskId);
		}

		/// <summary>
		/// Get Task Custom By Id
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTaskCustomByIdAsync(Int32 taskId)
		{
			return await HttpClient.GetAsync("GetTaskCustomById/" + taskId);
		}

		/// <summary>
		/// Get Task Custom By Id
		/// </summary>
		/// <param name="taskId"></param>
		public virtual List<CustomFieldJs> GetTaskCustomById(Int32 taskId)
		{
			var result = Task.Run(() => GetTaskCustomByIdAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// Get Possibles Columns Projects
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossiblesColumnsProjectsAsyncMsg()
		{
			return await HttpClient.GetAsync("GetPossiblesColumnsProjects");
		}

		/// <summary>
		/// Get Possibles Columns Projects
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossiblesColumnsProjectsAsync()
		{
			return await HttpClient.GetAsync("GetPossiblesColumnsProjects");
		}

		/// <summary>
		/// Get Possibles Columns Projects
		/// </summary>
		public virtual List<ColumnInfo> GetPossiblesColumnsProjects()
		{
			var result = Task.Run(() => GetPossiblesColumnsProjectsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ColumnInfo>>().Result;
			 		}

		/// <summary>
		/// Get Possibles Columns Ressources
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossiblesColumnsRessourcesAsyncMsg()
		{
			return await HttpClient.GetAsync("GetPossiblesColumnsRessources");
		}

		/// <summary>
		/// Get Possibles Columns Ressources
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossiblesColumnsRessourcesAsync()
		{
			return await HttpClient.GetAsync("GetPossiblesColumnsRessources");
		}

		/// <summary>
		/// Get Possibles Columns Ressources
		/// </summary>
		public virtual List<ColumnInfo> GetPossiblesColumnsRessources()
		{
			var result = Task.Run(() => GetPossiblesColumnsRessourcesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ColumnInfo>>().Result;
			 		}

		/// <summary>
		/// Get Possibles Columns Tasks
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossiblesColumnsTasksAsyncMsg()
		{
			return await HttpClient.GetAsync("GetPossiblesColumnsTasks");
		}

		/// <summary>
		/// Get Possibles Columns Tasks
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossiblesColumnsTasksAsync()
		{
			return await HttpClient.GetAsync("GetPossiblesColumnsTasks");
		}

		/// <summary>
		/// Get Possibles Columns Tasks
		/// </summary>
		public virtual List<ColumnInfo> GetPossiblesColumnsTasks()
		{
			var result = Task.Run(() => GetPossiblesColumnsTasksAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ColumnInfo>>().Result;
			 		}

		/// <summary>
		/// Get Possibles Columns Surveys
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossiblesColumnsSurveysAsyncMsg()
		{
			return await HttpClient.GetAsync("GetPossiblesColumnsSurveys");
		}

		/// <summary>
		/// Get Possibles Columns Surveys
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossiblesColumnsSurveysAsync()
		{
			return await HttpClient.GetAsync("GetPossiblesColumnsSurveys");
		}

		/// <summary>
		/// Get Possibles Columns Surveys
		/// </summary>
		public virtual List<ColumnInfo> GetPossiblesColumnsSurveys()
		{
			var result = Task.Run(() => GetPossiblesColumnsSurveysAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ColumnInfo>>().Result;
			 		}

		/// <summary>
		/// Delete Rapports Views
		/// </summary>
		/// <param name="viewsIdList"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteRapportsViewsAsyncMsg(List<Int32> viewsIdList)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("DeleteRapportsViews", viewsIdList);
		}

		/// <summary>
		/// Delete Rapports Views
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteRapportsViewsAsync(List<Int32> viewsIdList)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("DeleteRapportsViews", viewsIdList);
		}

		/// <summary>
		/// Delete Rapports Views
		/// </summary>
		public virtual UpdateResult DeleteRapportsViews(List<Int32> viewsIdList)
		{
			var result = Task.Run(() => DeleteRapportsViewsAsyncMsg(viewsIdList)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get simple Tasks List
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvailableTasksListAsyncMsg(DatesRangeFilteredRequest<Object> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Object>>("GetAvailableTasksList", param);
		}

		/// <summary>
		/// Get simple Tasks List
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvailableTasksListAsync(DatesRangeFilteredRequest<Object> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Object>>("GetAvailableTasksList", param);
		}

		/// <summary>
		/// Get simple Tasks List
		/// </summary>
		public virtual List<TaskFiltre> GetAvailableTasksList(DatesRangeFilteredRequest<Object> param)
		{
			var result = Task.Run(() => GetAvailableTasksListAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskFiltre>>().Result;
			 		}

		/// <summary>
		/// Update Default Sorting
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateDefaultSortingAsyncMsg(Int32 col,Boolean direction)
		{
			return await HttpClient.PostAsJsonAsync("UpdateDefaultSorting?col=" + col + "&direction=" + direction, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Default Sorting
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateDefaultSortingAsync(Int32 col,Boolean direction)
		{
			return await HttpClient.PostAsJsonAsync("UpdateDefaultSorting?col=" + col + "&direction=" + direction, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Default Sorting
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		public virtual UpdateResult UpdateDefaultSorting(Int32 col,Boolean direction)
		{
			var result = Task.Run(() => UpdateDefaultSortingAsyncMsg(col, direction)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Default Sorting Tasks
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateDefaultSortingTasksAsyncMsg(Int32 col,Boolean direction)
		{
			return await HttpClient.PostAsJsonAsync("UpdateDefaultSortingTasks?col=" + col + "&direction=" + direction, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Default Sorting Tasks
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateDefaultSortingTasksAsync(Int32 col,Boolean direction)
		{
			return await HttpClient.PostAsJsonAsync("UpdateDefaultSortingTasks?col=" + col + "&direction=" + direction, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Default Sorting Tasks
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		public virtual UpdateResult UpdateDefaultSortingTasks(Int32 col,Boolean direction)
		{
			var result = Task.Run(() => UpdateDefaultSortingTasksAsyncMsg(col, direction)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// UpdateDefaultSortingSurveys
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateDefaultSortingSurveysAsyncMsg(Int32 col,Boolean direction)
		{
			return await HttpClient.PostAsJsonAsync("UpdateDefaultSortingSurveys?col=" + col + "&direction=" + direction, default(HttpResponseMessage));
		}

		/// <summary>
		/// UpdateDefaultSortingSurveys
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateDefaultSortingSurveysAsync(Int32 col,Boolean direction)
		{
			return await HttpClient.PostAsJsonAsync("UpdateDefaultSortingSurveys?col=" + col + "&direction=" + direction, default(HttpResponseMessage));
		}

		/// <summary>
		/// UpdateDefaultSortingSurveys
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		public virtual UpdateResult UpdateDefaultSortingSurveys(Int32 col,Boolean direction)
		{
			var result = Task.Run(() => UpdateDefaultSortingSurveysAsyncMsg(col, direction)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// UpdateDefaultSortingRessources
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateDefaultSortingRessourcesAsyncMsg(Int32 col,Boolean direction)
		{
			return await HttpClient.PostAsJsonAsync("UpdateDefaultSortingRessources?col=" + col + "&direction=" + direction, default(HttpResponseMessage));
		}

		/// <summary>
		/// UpdateDefaultSortingRessources
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateDefaultSortingRessourcesAsync(Int32 col,Boolean direction)
		{
			return await HttpClient.PostAsJsonAsync("UpdateDefaultSortingRessources?col=" + col + "&direction=" + direction, default(HttpResponseMessage));
		}

		/// <summary>
		/// UpdateDefaultSortingRessources
		/// </summary>
		/// <param name="col"></param>
		/// <param name="direction"></param>
		public virtual UpdateResult UpdateDefaultSortingRessources(Int32 col,Boolean direction)
		{
			var result = Task.Run(() => UpdateDefaultSortingRessourcesAsyncMsg(col, direction)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// GetRessourcesByDirection
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRessourcesByDirectionAsyncMsg(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SearchCriteriaRapports>>("GetRessourcesByDirection", dates);
		}

		/// <summary>
		/// GetRessourcesByDirection
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRessourcesByDirectionAsync(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<SearchCriteriaRapports>>("GetRessourcesByDirection", dates);
		}

		/// <summary>
		/// GetRessourcesByDirection
		/// </summary>
		public virtual BaseRapport GetRessourcesByDirection(DatesRangeFilteredRequest<SearchCriteriaRapports> dates)
		{
			var result = Task.Run(() => GetRessourcesByDirectionAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<BaseRapport>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIs for managing real times 9aka timesheets)
	/// </summary>
	public partial class RealTimesClient : ClientBase, Interfaces.IRealTimesClient
	{		

		/// <summary>
		/// APIs for managing real times 9aka timesheets)
		/// </summary>
		public RealTimesClient() : base()
		{
		}

		/// <summary>
		/// APIs for managing real times 9aka timesheets)
		/// </summary>
		public RealTimesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Lists tiemsheets data for a specified project and data range
		/// Does not support filtering
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ListAsyncMsg(Int32 projectId,DatesRangeRequestBase dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequestBase>("api/v1/realtimes/projects/" + projectId, dates);
		}

		/// <summary>
		/// Lists tiemsheets data for a specified project and data range
		/// Does not support filtering
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ListAsync(Int32 projectId,DatesRangeRequestBase dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequestBase>("api/v1/realtimes/projects/" + projectId, dates);
		}

		/// <summary>
		/// Lists tiemsheets data for a specified project and data range
		/// Does not support filtering
		/// </summary>
		/// <param name="projectId"></param>
		public virtual List<RealtimeEntry> List(Int32 projectId,DatesRangeRequestBase dates)
		{
			var result = Task.Run(() => ListAsyncMsg(projectId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<RealtimeEntry>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIS for managing delivrables (Aka Tasks)
	/// </summary>
	public partial class RessourceClient : ClientBase, Interfaces.IRessourceClient
	{		

		/// <summary>
		/// APIS for managing delivrables (Aka Tasks)
		/// </summary>
		public RessourceClient() : base()
		{
		}

		/// <summary>
		/// APIS for managing delivrables (Aka Tasks)
		/// </summary>
		public RessourceClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Get User Info
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="includeData"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsergeneralInfoAsyncMsg(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/ressource?userId=" + userId + "&includeData=" + includeData, dates);
		}

		/// <summary>
		/// Get User Info
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="includeData"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsergeneralInfoAsync(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/ressource?userId=" + userId + "&includeData=" + includeData, dates);
		}

		/// <summary>
		/// Get User Info
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="includeData"></param>
		public virtual RessourceGeneralInformations GetUsergeneralInfo(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetUsergeneralInfoAsyncMsg(userId, includeData, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<RessourceGeneralInformations>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="resourceBulkUpdate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ResourceBulkUpdateAsyncMsg(ResourceBulkUpdate resourceBulkUpdate)
		{
			return await HttpClient.PostAsJsonAsync<ResourceBulkUpdate>("api/v1/ressource/bulkupdate", resourceBulkUpdate);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ResourceBulkUpdateAsync(ResourceBulkUpdate resourceBulkUpdate)
		{
			return await HttpClient.PostAsJsonAsync<ResourceBulkUpdate>("api/v1/ressource/bulkupdate", resourceBulkUpdate);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultMultiMessages ResourceBulkUpdate(ResourceBulkUpdate resourceBulkUpdate)
		{
			var result = Task.Run(() => ResourceBulkUpdateAsyncMsg(resourceBulkUpdate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiMessages>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPreferencesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/ressource/getPreferences");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPreferencesAsync()
		{
			return await HttpClient.GetAsync("api/v1/ressource/getPreferences");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Object GetPreferences()
		{
			var result = Task.Run(() => GetPreferencesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Object>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userInfo"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateUserAsyncMsg(EmployeJS userInfo)
		{
			return await HttpClient.PostAsJsonAsync<EmployeJS>("api/v1/ressource/create", userInfo);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateUserAsync(EmployeJS userInfo)
		{
			return await HttpClient.PostAsJsonAsync<EmployeJS>("api/v1/ressource/create", userInfo);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId CreateUser(EmployeJS userInfo)
		{
			var result = Task.Run(() => CreateUserAsyncMsg(userInfo)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDefaultAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/ressource/default");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDefaultAsync()
		{
			return await HttpClient.GetAsync("api/v1/ressource/default");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual EmployeJS GetDefault()
		{
			var result = Task.Run(() => GetDefaultAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<EmployeJS>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteResourceAsyncMsg(Int32 resourceId)
		{
			return await HttpClient.DeleteAsync("api/Ressource?resourceId=" + resourceId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteResourceAsync(Int32 resourceId)
		{
			return await HttpClient.DeleteAsync("api/Ressource?resourceId=" + resourceId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="resourceId"></param>
		public virtual UpdateResult DeleteResource(Int32 resourceId)
		{
			var result = Task.Run(() => DeleteResourceAsyncMsg(resourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class RolesManagementClient : ClientBase, Interfaces.IRolesManagementClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public RolesManagementClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public RolesManagementClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRessourcesAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/roles/GetRessources/" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRessourcesAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/roles/GetRessources/" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual List<RessourceStats> GetRessources(Int32 id)
		{
			var result = Task.Run(() => GetRessourcesAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<RessourceStats>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRolesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/roles/GetRoles");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRolesAsync()
		{
			return await HttpClient.GetAsync("api/v1/roles/GetRoles");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<RoleJS> GetRoles()
		{
			var result = Task.Run(() => GetRolesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<RoleJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newRole"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateRoleAsyncMsg(RoleJS newRole)
		{
			return await HttpClient.PostAsJsonAsync<RoleJS>("api/v1/roles/UpdateRole", newRole);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateRoleAsync(RoleJS newRole)
		{
			return await HttpClient.PostAsJsonAsync<RoleJS>("api/v1/roles/UpdateRole", newRole);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult UpdateRole(RoleJS newRole)
		{
			var result = Task.Run(() => UpdateRoleAsyncMsg(newRole)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="item"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddRoleAsyncMsg(RoleJS item)
		{
			return await HttpClient.PostAsJsonAsync<RoleJS>("api/v1/roles/AddRole", item);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddRoleAsync(RoleJS item)
		{
			return await HttpClient.PostAsJsonAsync<RoleJS>("api/v1/roles/AddRole", item);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId AddRole(RoleJS item)
		{
			var result = Task.Run(() => AddRoleAsyncMsg(item)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newRoles"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveRolesAsyncMsg(List<RoleJS> newRoles)
		{
			return await HttpClient.PostAsJsonAsync<List<RoleJS>>("api/v1/roles/SaveRoles", newRoles);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveRolesAsync(List<RoleJS> newRoles)
		{
			return await HttpClient.PostAsJsonAsync<List<RoleJS>>("api/v1/roles/SaveRoles", newRoles);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult SaveRoles(List<RoleJS> newRoles)
		{
			var result = Task.Run(() => SaveRolesAsyncMsg(newRoles)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsPermissionsAsyncMsg(Int32 roleId)
		{
			return await HttpClient.GetAsync("api/v1/roles/GetCustomFieldsPermissions?roleId=" + roleId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsPermissionsAsync(Int32 roleId)
		{
			return await HttpClient.GetAsync("api/v1/roles/GetCustomFieldsPermissions?roleId=" + roleId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		public virtual List<CustomFieldPermissionJS> GetCustomFieldsPermissions(Int32 roleId)
		{
			var result = Task.Run(() => GetCustomFieldsPermissionsAsyncMsg(roleId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldPermissionJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <param name="roleName"></param>
		/// <param name="customFieldPermissions"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveCustomFieldsPermissionsAsyncMsg(Int32 roleId,String roleName,List<CustomFieldPermissionJS> customFieldPermissions)
		{
			return await HttpClient.PostAsJsonAsync<List<CustomFieldPermissionJS>>("api/v1/roles/SaveCustomFieldsPermissions/" + roleId + "/" + roleName, customFieldPermissions);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <param name="roleName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveCustomFieldsPermissionsAsync(Int32 roleId,String roleName,List<CustomFieldPermissionJS> customFieldPermissions)
		{
			return await HttpClient.PostAsJsonAsync<List<CustomFieldPermissionJS>>("api/v1/roles/SaveCustomFieldsPermissions/" + roleId + "/" + roleName, customFieldPermissions);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <param name="roleName"></param>
		public virtual UpdateResult SaveCustomFieldsPermissions(Int32 roleId,String roleName,List<CustomFieldPermissionJS> customFieldPermissions)
		{
			var result = Task.Run(() => SaveCustomFieldsPermissionsAsyncMsg(roleId, roleName, customFieldPermissions)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller alows projects and ressources search
	/// </summary>
	public partial class SearchClient : ClientBase, Interfaces.ISearchClient
	{		

		/// <summary>
		/// This controller alows projects and ressources search
		/// </summary>
		public SearchClient() : base()
		{
		}

		/// <summary>
		/// This controller alows projects and ressources search
		/// </summary>
		public SearchClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Search list of projects for current user.
		/// Searching in project name and project description
		/// </summary>
		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchProjectsAsyncMsg(String searchStr,ViewSelect viewSelector)
		{
			return await HttpClient.GetAsync("api/v1/search/searchProjects?searchStr=" + searchStr + "&viewSelector=" + viewSelector);
		}

		/// <summary>
		/// Search list of projects for current user.
		/// Searching in project name and project description
		/// </summary>
		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchProjectsAsync(String searchStr,ViewSelect viewSelector)
		{
			return await HttpClient.GetAsync("api/v1/search/searchProjects?searchStr=" + searchStr + "&viewSelector=" + viewSelector);
		}

		/// <summary>
		/// Search list of projects for current user.
		/// Searching in project name and project description
		/// </summary>
		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		public virtual List<ProjectSearchResult> SearchProjects(String searchStr,ViewSelect viewSelector)
		{
			var result = Task.Run(() => SearchProjectsAsyncMsg(searchStr, viewSelector)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectSearchResult>>().Result;
			 		}

		/// <summary>
		/// Search for ressources.
		/// Searching based on user name
		/// </summary>
		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchRessourcesAsyncMsg(String searchStr,ViewSelect viewSelector)
		{
			return await HttpClient.GetAsync("api/v1/search/searchRessources?searchStr=" + searchStr + "&viewSelector=" + viewSelector);
		}

		/// <summary>
		/// Search for ressources.
		/// Searching based on user name
		/// </summary>
		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchRessourcesAsync(String searchStr,ViewSelect viewSelector)
		{
			return await HttpClient.GetAsync("api/v1/search/searchRessources?searchStr=" + searchStr + "&viewSelector=" + viewSelector);
		}

		/// <summary>
		/// Search for ressources.
		/// Searching based on user name
		/// </summary>
		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		public virtual List<EmployeJS__> SearchRessources(String searchStr,ViewSelect viewSelector)
		{
			var result = Task.Run(() => SearchRessourcesAsyncMsg(searchStr, viewSelector)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Creation of new accounts and demo
	/// </summary>
	public partial class SignupClient : ClientBase, Interfaces.ISignupClient
	{		

		/// <summary>
		/// Creation of new accounts and demo
		/// </summary>
		public SignupClient() : base()
		{
		}

		/// <summary>
		/// Creation of new accounts and demo
		/// </summary>
		public SignupClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckIfEmailInUseAsyncMsg(String email)
		{
			return await HttpClient.GetAsync("api/v1/signup/checkEmail/" + email);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckIfEmailInUseAsync(String email)
		{
			return await HttpClient.GetAsync("api/v1/signup/checkEmail/" + email);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual UpdateResult CheckIfEmailInUse(String email)
		{
			var result = Task.Run(() => CheckIfEmailInUseAsyncMsg(email)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="lang"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetOrgNeedsAsyncMsg(String lang)
		{
			return await HttpClient.GetAsync("api/v1/signup/" + lang);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="lang"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrgNeedsAsync(String lang)
		{
			return await HttpClient.GetAsync("api/v1/signup/" + lang);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="lang"></param>
		public virtual List<OrgNeed> GetOrgNeeds(String lang)
		{
			var result = Task.Run(() => GetOrgNeedsAsyncMsg(lang)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<OrgNeed>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="lang"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetOrgTypesAsyncMsg(String lang)
		{
			return await HttpClient.GetAsync("api/v1/signup/orgTypes/" + lang);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="lang"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrgTypesAsync(String lang)
		{
			return await HttpClient.GetAsync("api/v1/signup/orgTypes/" + lang);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="lang"></param>
		public virtual List<ExcelDemoTemplate> GetOrgTypes(String lang)
		{
			var result = Task.Run(() => GetOrgTypesAsyncMsg(lang)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ExcelDemoTemplate>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="info"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateAccountAsyncMsg(SignUpInfo info)
		{
			return await HttpClient.PostAsJsonAsync<SignUpInfo>("api/Signup", info);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateAccountAsync(SignUpInfo info)
		{
			return await HttpClient.PostAsJsonAsync<SignUpInfo>("api/Signup", info);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult CreateAccount(SignUpInfo info)
		{
			var result = Task.Run(() => CreateAccountAsyncMsg(info)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class StatisticsClient : ClientBase, Interfaces.IStatisticsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public StatisticsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public StatisticsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// ReportAdBlock
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReportAdBlockAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/statistics/ReportAdBlock", default(HttpResponseMessage));
		}

		/// <summary>
		/// ReportAdBlock
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReportAdBlockAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/statistics/ReportAdBlock", default(HttpResponseMessage));
		}

		/// <summary>
		/// ReportAdBlock
		/// </summary>
		public virtual void ReportAdBlock()
		{
			var result = Task.Run(() => ReportAdBlockAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// Track
		/// </summary>
		/// <param name="events"></param>
		/// <param name="objects"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> TrackAsyncMsg(String events,String objects)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/statistics/Track?events=" + events + "&objects=" + objects, default(HttpResponseMessage));
		}

		/// <summary>
		/// Track
		/// </summary>
		/// <param name="events"></param>
		/// <param name="objects"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> TrackAsync(String events,String objects)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/statistics/Track?events=" + events + "&objects=" + objects, default(HttpResponseMessage));
		}

		/// <summary>
		/// Track
		/// </summary>
		/// <param name="events"></param>
		/// <param name="objects"></param>
		public virtual void Track(String events,String objects)
		{
			var result = Task.Run(() => TrackAsyncMsg(events, objects)).Result;		 
			 
			EnsureSuccess(result);
		}

		#endregion
	}
	/// <summary>
	/// APIS for managing delivrables (Aka Tasks)
	/// </summary>
	public partial class TasksClient : ClientBase, Interfaces.ITasksClient
	{		

		/// <summary>
		/// APIS for managing delivrables (Aka Tasks)
		/// </summary>
		public TasksClient() : base()
		{
		}

		/// <summary>
		/// APIS for managing delivrables (Aka Tasks)
		/// </summary>
		public TasksClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Import, in a project, task from template
		/// </summary>
		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ImportFromTemplateAsyncMsg(String templateId,Int32 projectId,Boolean addTemplateResp)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks?templateId=" + templateId + "&projectId=" + projectId + "&addTemplateResp=" + addTemplateResp, default(HttpResponseMessage));
		}

		/// <summary>
		/// Import, in a project, task from template
		/// </summary>
		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ImportFromTemplateAsync(String templateId,Int32 projectId,Boolean addTemplateResp)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks?templateId=" + templateId + "&projectId=" + projectId + "&addTemplateResp=" + addTemplateResp, default(HttpResponseMessage));
		}

		/// <summary>
		/// Import, in a project, task from template
		/// </summary>
		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>
		public virtual UpdateResult ImportFromTemplate(String templateId,Int32 projectId,Boolean addTemplateResp)
		{
			var result = Task.Run(() => ImportFromTemplateAsyncMsg(templateId, projectId, addTemplateResp)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Add a view for task management
		/// </summary>
		/// <param name="param">The dates/filter/group/favorite save in the view, the name of the view and if the view is a default one. Default view react differently you cannot delete/rename them</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddNewTaskViewAsyncMsg(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesTasksParam>>("api/v1/tasks/addNewTaskView", param);
		}

		/// <summary>
		/// Add a view for task management
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddNewTaskViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesTasksParam>>("api/v1/tasks/addNewTaskView", param);
		}

		/// <summary>
		/// Add a view for task management
		/// </summary>
		public virtual UpdateResultWithId AddNewTaskView(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param)
		{
			var result = Task.Run(() => AddNewTaskViewAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Share a task view to every body in the company
		/// </summary>
		/// <param name="taskViewId">The id of the view we want to share</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ShareTaskViewAsyncMsg(Int32 taskViewId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/shareTaskView/" + taskViewId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Share a task view to every body in the company
		/// </summary>
		/// <param name="taskViewId">The id of the view we want to share</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ShareTaskViewAsync(Int32 taskViewId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/shareTaskView/" + taskViewId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Share a task view to every body in the company
		/// </summary>
		/// <param name="taskViewId">The id of the view we want to share</param>
		public virtual UpdateResult ShareTaskView(Int32 taskViewId)
		{
			var result = Task.Run(() => ShareTaskViewAsyncMsg(taskViewId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update list of tasks information
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateListTasksAsyncMsg(RequestSelectedBulkAction data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedBulkAction>("api/v1/tasks/api/v1/clients/UpdateListTasks", data);
		}

		/// <summary>
		/// Update list of tasks information
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateListTasksAsync(RequestSelectedBulkAction data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedBulkAction>("api/v1/tasks/api/v1/clients/UpdateListTasks", data);
		}

		/// <summary>
		/// Update list of tasks information
		/// </summary>
		public virtual List<UpdateResultWithData<ApiTask>> UpdateListTasks(RequestSelectedBulkAction data)
		{
			var result = Task.Run(() => UpdateListTasksAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UpdateResultWithData<ApiTask>>>().Result;
			 		}

		/// <summary>
		/// For the company remove the share task view
		/// </summary>
		/// <param name="taskViewId">The id of the view we want to share</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UnShareTaskViewAsyncMsg(Int32 taskViewId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/unShareTaskView/" + taskViewId, default(HttpResponseMessage));
		}

		/// <summary>
		/// For the company remove the share task view
		/// </summary>
		/// <param name="taskViewId">The id of the view we want to share</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UnShareTaskViewAsync(Int32 taskViewId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/unShareTaskView/" + taskViewId, default(HttpResponseMessage));
		}

		/// <summary>
		/// For the company remove the share task view
		/// </summary>
		/// <param name="taskViewId">The id of the view we want to share</param>
		public virtual UpdateResult UnShareTaskView(Int32 taskViewId)
		{
			var result = Task.Run(() => UnShareTaskViewAsyncMsg(taskViewId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updating a view task info
		/// </summary>
		/// <param name="param">The dates/filter/group/favorite save in the view, the name of the view and if the view is a default one. Default view react differently you cannot delete/rename them</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateViewAsyncMsg(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesTasksParam>>("api/v1/tasks/UpdateView", param);
		}

		/// <summary>
		/// Updating a view task info
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesTasksParam>>("api/v1/tasks/UpdateView", param);
		}

		/// <summary>
		/// Updating a view task info
		/// </summary>
		public virtual UpdateResult UpdateView(DatesRangeFilteredRequestPagination<UserPreferencesTasksParam> param)
		{
			var result = Task.Run(() => UpdateViewAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Remove a view task
		/// </summary>
		/// <param name="viewId">view id to remove</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteViewAsyncMsg(Int32 viewId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/DeleteView/" + viewId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Remove a view task
		/// </summary>
		/// <param name="viewId">view id to remove</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteViewAsync(Int32 viewId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/DeleteView/" + viewId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Remove a view task
		/// </summary>
		/// <param name="viewId">view id to remove</param>
		public virtual UpdateResult DeleteView(Int32 viewId)
		{
			var result = Task.Run(() => DeleteViewAsyncMsg(viewId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Create a new task for a project and assign an employe
		/// </summary>
		/// <param name="toCreate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateTaskAsyncMsg(ProjectTaskMinimal toCreate)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTaskMinimal>("api/v1/tasks", toCreate);
		}

		/// <summary>
		/// Create a new task for a project and assign an employe
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateTaskAsync(ProjectTaskMinimal toCreate)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTaskMinimal>("api/v1/tasks", toCreate);
		}

		/// <summary>
		/// Create a new task for a project and assign an employe
		/// </summary>
		public virtual List<UpdateResultWithData<ApiTask>> CreateTask(ProjectTaskMinimal toCreate)
		{
			var result = Task.Run(() => CreateTaskAsyncMsg(toCreate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UpdateResultWithData<ApiTask>>>().Result;
			 		}

		/// <summary>
		/// Get CustomFields For Task NoValue
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsForTaskNoValueAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/tasks/GetCustomFieldsForTaskNoValue");
		}

		/// <summary>
		/// Get CustomFields For Task NoValue
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsForTaskNoValueAsync()
		{
			return await HttpClient.GetAsync("api/v1/tasks/GetCustomFieldsForTaskNoValue");
		}

		/// <summary>
		/// Get CustomFields For Task NoValue
		/// </summary>
		public virtual List<CustomFieldJs> GetCustomFieldsForTaskNoValue()
		{
			var result = Task.Run(() => GetCustomFieldsForTaskNoValueAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <param name="taskId">Id of the task to delete</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTaskAsyncMsg(Int32 taskId)
		{
			return await HttpClient.DeleteAsync("api/v1/tasks/" + taskId);
		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <param name="taskId">Id of the task to delete</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTaskAsync(Int32 taskId)
		{
			return await HttpClient.DeleteAsync("api/v1/tasks/" + taskId);
		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <param name="taskId">Id of the task to delete</param>
		public virtual UpdateResult DeleteTask(Int32 taskId)
		{
			var result = Task.Run(() => DeleteTaskAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// save states task
		/// </summary>
		/// <param name="states">states object to update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveAllStatesAsyncMsg(List<TaskState> states)
		{
			return await HttpClient.PostAsJsonAsync<List<TaskState>>("api/v1/tasks/api/v1/tasks/saveAllStates", states);
		}

		/// <summary>
		/// save states task
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveAllStatesAsync(List<TaskState> states)
		{
			return await HttpClient.PostAsJsonAsync<List<TaskState>>("api/v1/tasks/api/v1/tasks/saveAllStates", states);
		}

		/// <summary>
		/// save states task
		/// </summary>
		public virtual UpdateResult SaveAllStates(List<TaskState> states)
		{
			var result = Task.Run(() => SaveAllStatesAsyncMsg(states)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Delete task state
		/// </summary>
		/// <param name="stateId">Id of the state</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteStateAsyncMsg(Int32 stateId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/deleteState/" + stateId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete task state
		/// </summary>
		/// <param name="stateId">Id of the state</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteStateAsync(Int32 stateId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/deleteState/" + stateId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete task state
		/// </summary>
		/// <param name="stateId">Id of the state</param>
		public virtual UpdateResult DeleteState(Int32 stateId)
		{
			var result = Task.Run(() => DeleteStateAsyncMsg(stateId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <param name="tasksId">Id of the task to delete</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTasksAsyncMsg(List<Int32> tasksId)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/tasks/api/v1/tasks/DeleteTasks", tasksId);
		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTasksAsync(List<Int32> tasksId)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/tasks/api/v1/tasks/DeleteTasks", tasksId);
		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess DeleteTasks(List<Int32> tasksId)
		{
			var result = Task.Run(() => DeleteTasksAsyncMsg(tasksId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Update Task Filter
		/// </summary>
		/// <param name="requesTasksFilter"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskFilterAsyncMsg(RequesTasksFilter requesTasksFilter)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksFilter>("api/v1/tasks/api/v1/tasks/UpdateTaskFilter", requesTasksFilter);
		}

		/// <summary>
		/// Update Task Filter
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskFilterAsync(RequesTasksFilter requesTasksFilter)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksFilter>("api/v1/tasks/api/v1/tasks/UpdateTaskFilter", requesTasksFilter);
		}

		/// <summary>
		/// Update Task Filter
		/// </summary>
		public virtual UpdateResult UpdateTaskFilter(RequesTasksFilter requesTasksFilter)
		{
			var result = Task.Run(() => UpdateTaskFilterAsyncMsg(requesTasksFilter)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Task todo
		/// </summary>
		/// <param name="requesTasksTodo"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskTodoListAsyncMsg(RequesTasksTodo requesTasksTodo)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksTodo>("api/v1/tasks/api/v1/tasks/UpdateTaskTodoList", requesTasksTodo);
		}

		/// <summary>
		/// Update Task todo
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskTodoListAsync(RequesTasksTodo requesTasksTodo)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksTodo>("api/v1/tasks/api/v1/tasks/UpdateTaskTodoList", requesTasksTodo);
		}

		/// <summary>
		/// Update Task todo
		/// </summary>
		public virtual UpdateResult UpdateTaskTodoList(RequesTasksTodo requesTasksTodo)
		{
			var result = Task.Run(() => UpdateTaskTodoListAsyncMsg(requesTasksTodo)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Task Billing Rules
		/// </summary>
		/// <param name="requesTasksBillingRules"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskBillingRulesAsyncMsg(RequesTasksBillingRules requesTasksBillingRules)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksBillingRules>("api/v1/tasks/api/v1/tasks/UpdateTaskBillingRules", requesTasksBillingRules);
		}

		/// <summary>
		/// Update Task Billing Rules
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskBillingRulesAsync(RequesTasksBillingRules requesTasksBillingRules)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksBillingRules>("api/v1/tasks/api/v1/tasks/UpdateTaskBillingRules", requesTasksBillingRules);
		}

		/// <summary>
		/// Update Task Billing Rules
		/// </summary>
		public virtual UpdateResult UpdateTaskBillingRules(RequesTasksBillingRules requesTasksBillingRules)
		{
			var result = Task.Run(() => UpdateTaskBillingRulesAsyncMsg(requesTasksBillingRules)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Task Billing Rules
		/// </summary>
		/// <param name="requesTasksDefaultDuration"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskDefaultDurationAsyncMsg(RequesTasksDefaultDuration requesTasksDefaultDuration)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksDefaultDuration>("api/v1/tasks/api/v1/tasks/UpdateTasksDefaultDuration", requesTasksDefaultDuration);
		}

		/// <summary>
		/// Update Task Billing Rules
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskDefaultDurationAsync(RequesTasksDefaultDuration requesTasksDefaultDuration)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksDefaultDuration>("api/v1/tasks/api/v1/tasks/UpdateTasksDefaultDuration", requesTasksDefaultDuration);
		}

		/// <summary>
		/// Update Task Billing Rules
		/// </summary>
		public virtual UpdateResult UpdateTaskDefaultDuration(RequesTasksDefaultDuration requesTasksDefaultDuration)
		{
			var result = Task.Run(() => UpdateTaskDefaultDurationAsyncMsg(requesTasksDefaultDuration)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Task deadline
		/// </summary>
		/// <param name="requesTasksDeadline"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskDeadlineAsyncMsg(RequesTasksDeadline requesTasksDeadline)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksDeadline>("api/v1/tasks/api/v1/tasks/UpdateTaskDeadline", requesTasksDeadline);
		}

		/// <summary>
		/// Update Task deadline
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskDeadlineAsync(RequesTasksDeadline requesTasksDeadline)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksDeadline>("api/v1/tasks/api/v1/tasks/UpdateTaskDeadline", requesTasksDeadline);
		}

		/// <summary>
		/// Update Task deadline
		/// </summary>
		public virtual UpdateResult UpdateTaskDeadline(RequesTasksDeadline requesTasksDeadline)
		{
			var result = Task.Run(() => UpdateTaskDeadlineAsyncMsg(requesTasksDeadline)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Task description
		/// </summary>
		/// <param name="requesTasksDescription"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskDescriptionAsyncMsg(RequesTasksDescription requesTasksDescription)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksDescription>("api/v1/tasks/api/v1/tasks/UpdateTaskDescription", requesTasksDescription);
		}

		/// <summary>
		/// Update Task description
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskDescriptionAsync(RequesTasksDescription requesTasksDescription)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksDescription>("api/v1/tasks/api/v1/tasks/UpdateTaskDescription", requesTasksDescription);
		}

		/// <summary>
		/// Update Task description
		/// </summary>
		public virtual UpdateResult UpdateTaskDescription(RequesTasksDescription requesTasksDescription)
		{
			var result = Task.Run(() => UpdateTaskDescriptionAsyncMsg(requesTasksDescription)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update multiple Tasks
		/// </summary>
		/// <param name="requesTasksInfosUpdate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateBulkTasksAsyncMsg(RequesTasksInfosUpdate requesTasksInfosUpdate)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksInfosUpdate>("api/v1/tasks/api/v1/tasks/UpdateBulkTasks", requesTasksInfosUpdate);
		}

		/// <summary>
		/// Update multiple Tasks
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateBulkTasksAsync(RequesTasksInfosUpdate requesTasksInfosUpdate)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksInfosUpdate>("api/v1/tasks/api/v1/tasks/UpdateBulkTasks", requesTasksInfosUpdate);
		}

		/// <summary>
		/// Update multiple Tasks
		/// </summary>
		public virtual UpdateResult UpdateBulkTasks(RequesTasksInfosUpdate requesTasksInfosUpdate)
		{
			var result = Task.Run(() => UpdateBulkTasksAsyncMsg(requesTasksInfosUpdate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update basc task info
		/// </summary>
		/// <param name="requestTaskInfo"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskInfoAsyncMsg(RequesTasksInfo requestTaskInfo)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksInfo>("api/v1/tasks/api/v1/tasks/UpdateTaskInfo", requestTaskInfo);
		}

		/// <summary>
		/// Update basc task info
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskInfoAsync(RequesTasksInfo requestTaskInfo)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasksInfo>("api/v1/tasks/api/v1/tasks/UpdateTaskInfo", requestTaskInfo);
		}

		/// <summary>
		/// Update basc task info
		/// </summary>
		public virtual UpdateResult UpdateTaskInfo(RequesTasksInfo requestTaskInfo)
		{
			var result = Task.Run(() => UpdateTaskInfoAsyncMsg(requestTaskInfo)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates task
		/// if parentId is 0 or less : Removes link to parent
		/// If new startdate is provided : Updates startdate if there are no realtimes entered before this date
		/// If state is proved : updates state
		/// If a due date is provided and this date is not in year 1990, updates due date
		/// If a due date is provided and this date is in year 1990, clears due date
		/// if workplaceid is provided : sets new default workspace for the task
		/// If workplace id is 0 or less, clears default workspace for the task
		/// if task enddate is provided and not in year 1990, sets enddate but does not put task in last avalible state (finished)
		/// if new state is provided : sets new state for the trask and all subtasks of this task
		/// If user calling API is task responsible, but can not edit project, only state change is supported
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="parentId"></param>
		/// <param name="requestTask"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskAsyncMsg(Int32 taskId,Int32 parentId,RequesTasks requestTask)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/UpdateTask?taskId=" + taskId + "&parentId=" + parentId, requestTask);
		}

		/// <summary>
		/// Updates task
		/// if parentId is 0 or less : Removes link to parent
		/// If new startdate is provided : Updates startdate if there are no realtimes entered before this date
		/// If state is proved : updates state
		/// If a due date is provided and this date is not in year 1990, updates due date
		/// If a due date is provided and this date is in year 1990, clears due date
		/// if workplaceid is provided : sets new default workspace for the task
		/// If workplace id is 0 or less, clears default workspace for the task
		/// if task enddate is provided and not in year 1990, sets enddate but does not put task in last avalible state (finished)
		/// if new state is provided : sets new state for the trask and all subtasks of this task
		/// If user calling API is task responsible, but can not edit project, only state change is supported
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="parentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskAsync(Int32 taskId,Int32 parentId,RequesTasks requestTask)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/UpdateTask?taskId=" + taskId + "&parentId=" + parentId, requestTask);
		}

		/// <summary>
		/// Updates task
		/// if parentId is 0 or less : Removes link to parent
		/// If new startdate is provided : Updates startdate if there are no realtimes entered before this date
		/// If state is proved : updates state
		/// If a due date is provided and this date is not in year 1990, updates due date
		/// If a due date is provided and this date is in year 1990, clears due date
		/// if workplaceid is provided : sets new default workspace for the task
		/// If workplace id is 0 or less, clears default workspace for the task
		/// if task enddate is provided and not in year 1990, sets enddate but does not put task in last avalible state (finished)
		/// if new state is provided : sets new state for the trask and all subtasks of this task
		/// If user calling API is task responsible, but can not edit project, only state change is supported
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="parentId"></param>
		public virtual UpdateResult UpdateTask(Int32 taskId,Int32 parentId,RequesTasks requestTask)
		{
			var result = Task.Run(() => UpdateTaskAsyncMsg(taskId, parentId, requestTask)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// GetCustomFieldsForTask
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="isForTaskEmpty"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsForTaskAsyncMsg(Int32 taskId,Int32 projectId,Boolean isForTaskEmpty,Boolean noUnique)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetCustomFieldsForTask?taskId=" + taskId + "&projectId=" + projectId + "&isForTaskEmpty=" + isForTaskEmpty + "&noUnique=" + noUnique, default(HttpResponseMessage));
		}

		/// <summary>
		/// GetCustomFieldsForTask
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="isForTaskEmpty"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsForTaskAsync(Int32 taskId,Int32 projectId,Boolean isForTaskEmpty,Boolean noUnique)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetCustomFieldsForTask?taskId=" + taskId + "&projectId=" + projectId + "&isForTaskEmpty=" + isForTaskEmpty + "&noUnique=" + noUnique, default(HttpResponseMessage));
		}

		/// <summary>
		/// GetCustomFieldsForTask
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="isForTaskEmpty"></param>
		/// <param name="noUnique"></param>
		public virtual List<CustomFieldJs> GetCustomFieldsForTask(Int32 taskId,Int32 projectId,Boolean isForTaskEmpty,Boolean noUnique)
		{
			var result = Task.Run(() => GetCustomFieldsForTaskAsyncMsg(taskId, projectId, isForTaskEmpty, noUnique)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// Insert or update a list of tasks
		/// </summary>
		/// <param name="tasks"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateTasksAsyncMsg(List<ApiTask> tasks)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiTask>>("api/v1/tasks/api/v1/tasks/AddOrUpdateTasks", tasks);
		}

		/// <summary>
		/// Insert or update a list of tasks
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateTasksAsync(List<ApiTask> tasks)
		{
			return await HttpClient.PostAsJsonAsync<List<ApiTask>>("api/v1/tasks/api/v1/tasks/AddOrUpdateTasks", tasks);
		}

		/// <summary>
		/// Insert or update a list of tasks
		/// </summary>
		public virtual UpdateResult AddOrUpdateTasks(List<ApiTask> tasks)
		{
			var result = Task.Run(() => AddOrUpdateTasksAsyncMsg(tasks)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// UpdateTasksOrder
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="orders"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTasksOrderAsyncMsg(Int32 projectId,List<Int32[]> orders)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32[]>>("api/v1/tasks/api/v1/tasks/UpdateTasksOrder/" + projectId, orders);
		}

		/// <summary>
		/// UpdateTasksOrder
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTasksOrderAsync(Int32 projectId,List<Int32[]> orders)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32[]>>("api/v1/tasks/api/v1/tasks/UpdateTasksOrder/" + projectId, orders);
		}

		/// <summary>
		/// UpdateTasksOrder
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResult UpdateTasksOrder(Int32 projectId,List<Int32[]> orders)
		{
			var result = Task.Run(() => UpdateTasksOrderAsyncMsg(projectId, orders)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// GetMyTodayTasks
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetMyTodayTasksAsyncMsg(Int32 userId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetMyTodayTasks/" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// GetMyTodayTasks
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetMyTodayTasksAsync(Int32 userId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetMyTodayTasks/" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// GetMyTodayTasks
		/// </summary>
		/// <param name="userId"></param>
		public virtual List<ProjectWithTasks> GetMyTodayTasks(Int32 userId)
		{
			var result = Task.Run(() => GetMyTodayTasksAsyncMsg(userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectWithTasks>>().Result;
			 		}

		/// <summary>
		/// ToggleEnded
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="isEnded"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ToggleEndedAsyncMsg(Int32 taskId,Boolean isEnded)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/ToggleEnded/" + taskId + "?isEnded=" + isEnded, default(HttpResponseMessage));
		}

		/// <summary>
		/// ToggleEnded
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="isEnded"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ToggleEndedAsync(Int32 taskId,Boolean isEnded)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/ToggleEnded/" + taskId + "?isEnded=" + isEnded, default(HttpResponseMessage));
		}

		/// <summary>
		/// ToggleEnded
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="isEnded"></param>
		public virtual UpdateResult ToggleEnded(Int32 taskId,Boolean isEnded)
		{
			var result = Task.Run(() => ToggleEndedAsyncMsg(taskId, isEnded)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="requestTask"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetIfTaskHavePlanifAsyncMsg(Int32 taskId,RequesTasks requestTask)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/GetIfTaskHavePlanif?taskId=" + taskId, requestTask);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetIfTaskHavePlanifAsync(Int32 taskId,RequesTasks requestTask)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/GetIfTaskHavePlanif?taskId=" + taskId, requestTask);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		public virtual Boolean GetIfTaskHavePlanif(Int32 taskId,RequesTasks requestTask)
		{
			var result = Task.Run(() => GetIfTaskHavePlanifAsyncMsg(taskId, requestTask)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Updates a list of task state
		/// </summary>
		/// <param name="taskStates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateListStateTaskAsyncMsg(List<TaskState> taskStates)
		{
			return await HttpClient.PostAsJsonAsync<List<TaskState>>("api/v1/tasks/api/v1/tasks/UpdateListStateTask", taskStates);
		}

		/// <summary>
		/// Updates a list of task state
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateListStateTaskAsync(List<TaskState> taskStates)
		{
			return await HttpClient.PostAsJsonAsync<List<TaskState>>("api/v1/tasks/api/v1/tasks/UpdateListStateTask", taskStates);
		}

		/// <summary>
		/// Updates a list of task state
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess UpdateListStateTask(List<TaskState> taskStates)
		{
			var result = Task.Run(() => UpdateListStateTaskAsyncMsg(taskStates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Updates state of a task.
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="stateId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskStateAsyncMsg(Int32 taskId,Int32 stateId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/UpdateTaskState?taskId=" + taskId + "&stateId=" + stateId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Updates state of a task.
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="stateId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskStateAsync(Int32 taskId,Int32 stateId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/UpdateTaskState?taskId=" + taskId + "&stateId=" + stateId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Updates state of a task.
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="stateId"></param>
		public virtual UpdateResult UpdateTaskState(Int32 taskId,Int32 stateId)
		{
			var result = Task.Run(() => UpdateTaskStateAsyncMsg(taskId, stateId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetKanbanAsyncMsg(DatesRangeFilteredRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Int32>>("api/v1/tasks/api/v1/tasks/getKanban", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetKanbanAsync(DatesRangeFilteredRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Int32>>("api/v1/tasks/api/v1/tasks/getKanban", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskStateWithTask> GetKanban(DatesRangeFilteredRequest<Int32> data)
		{
			var result = Task.Run(() => GetKanbanAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskStateWithTask>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetIfTasksHavePlanifAsyncMsg(RequestSelectedTasks data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedTasks>("api/v1/tasks/api/v1/tasks/GetIfTasksHavePlanif", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetIfTasksHavePlanifAsync(RequestSelectedTasks data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedTasks>("api/v1/tasks/api/v1/tasks/GetIfTasksHavePlanif", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean GetIfTasksHavePlanif(RequestSelectedTasks data)
		{
			var result = Task.Run(() => GetIfTasksHavePlanifAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// In bulk, modify a group of tasks. 
		/// When change the dates of the tasks check the Real hours on the task.
		/// If no value in a variable in data dont do the change
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateSelectedTasksInfoAsyncMsg(RequestSelectedTasks data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedTasks>("api/v1/tasks/api/v1/tasks/UpdateSelectedTasksInfo", data);
		}

		/// <summary>
		/// In bulk, modify a group of tasks. 
		/// When change the dates of the tasks check the Real hours on the task.
		/// If no value in a variable in data dont do the change
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateSelectedTasksInfoAsync(RequestSelectedTasks data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedTasks>("api/v1/tasks/api/v1/tasks/UpdateSelectedTasksInfo", data);
		}

		/// <summary>
		/// In bulk, modify a group of tasks. 
		/// When change the dates of the tasks check the Real hours on the task.
		/// If no value in a variable in data dont do the change
		/// </summary>
		public virtual UpdateResult UpdateSelectedTasksInfo(RequestSelectedTasks data)
		{
			var result = Task.Run(() => UpdateSelectedTasksInfoAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// AddComment
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="comment"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddCommentAsyncMsg(Int32 taskId,String comment)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/AddComment?taskId=" + taskId + "&comment=" + comment, default(HttpResponseMessage));
		}

		/// <summary>
		/// AddComment
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="comment"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddCommentAsync(Int32 taskId,String comment)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/AddComment?taskId=" + taskId + "&comment=" + comment, default(HttpResponseMessage));
		}

		/// <summary>
		/// AddComment
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="comment"></param>
		public virtual UpdateResultWithId AddComment(Int32 taskId,String comment)
		{
			var result = Task.Run(() => AddCommentAsyncMsg(taskId, comment)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Delete Comment
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCommentAsyncMsg(Int32 commentId)
		{
			return await HttpClient.DeleteAsync("api/v1/tasks/api/v1/tasks/DeleteComment?commentId=" + commentId);
		}

		/// <summary>
		/// Delete Comment
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCommentAsync(Int32 commentId)
		{
			return await HttpClient.DeleteAsync("api/v1/tasks/api/v1/tasks/DeleteComment?commentId=" + commentId);
		}

		/// <summary>
		/// Delete Comment
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult DeleteComment(Int32 commentId)
		{
			var result = Task.Run(() => DeleteCommentAsyncMsg(commentId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Update Comment
		/// </summary>
		/// <param name="commentId"></param>
		/// <param name="newText"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateCommentAsyncMsg(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/UpdateComment/" + commentId + "?newText=" + newText, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Comment
		/// </summary>
		/// <param name="commentId"></param>
		/// <param name="newText"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateCommentAsync(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/UpdateComment/" + commentId + "?newText=" + newText, default(HttpResponseMessage));
		}

		/// <summary>
		/// Update Comment
		/// </summary>
		/// <param name="commentId"></param>
		/// <param name="newText"></param>
		public virtual UpdateResult UpdateComment(Int32 commentId,String newText)
		{
			var result = Task.Run(() => UpdateCommentAsyncMsg(commentId, newText)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Refresh Task
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RefreshTaskAsyncMsg(Int32 taskId)
		{
			return await HttpClient.GetAsync("api/v1/tasks/api/v1/tasks/RefreshTask/" + taskId);
		}

		/// <summary>
		/// Refresh Task
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RefreshTaskAsync(Int32 taskId)
		{
			return await HttpClient.GetAsync("api/v1/tasks/api/v1/tasks/RefreshTask/" + taskId);
		}

		/// <summary>
		/// Refresh Task
		/// </summary>
		/// <param name="taskId"></param>
		public virtual ProjectTask RefreshTask(Int32 taskId)
		{
			var result = Task.Run(() => RefreshTaskAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectTask>().Result;
			 		}

		/// <summary>
		/// Duplicate a task
		/// </summary>
		/// <param name="taskId">task to duplicate</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DuplicateTaskAsyncMsg(Int32 taskId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/duplicateTask/" + taskId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Duplicate a task
		/// </summary>
		/// <param name="taskId">task to duplicate</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DuplicateTaskAsync(Int32 taskId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/duplicateTask/" + taskId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Duplicate a task
		/// </summary>
		/// <param name="taskId">task to duplicate</param>
		public virtual UpdateResult DuplicateTask(Int32 taskId)
		{
			var result = Task.Run(() => DuplicateTaskAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Duplicate multiple task
		/// </summary>
		/// <param name="tasksId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DuplicateTasksAsyncMsg(List<Int32> tasksId)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/tasks/api/v1/tasks/duplicateTask", tasksId);
		}

		/// <summary>
		/// Duplicate multiple task
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DuplicateTasksAsync(List<Int32> tasksId)
		{
			return await HttpClient.PostAsJsonAsync<List<Int32>>("api/v1/tasks/api/v1/tasks/duplicateTask", tasksId);
		}

		/// <summary>
		/// Duplicate multiple task
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess DuplicateTasks(List<Int32> tasksId)
		{
			var result = Task.Run(() => DuplicateTasksAsyncMsg(tasksId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllProjectRessourcesAsyncMsg(Int32 projectId,RequesTasks dates)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/GetAllProjectRessources?projectId=" + projectId, dates);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllProjectRessourcesAsync(Int32 projectId,RequesTasks dates)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/GetAllProjectRessources?projectId=" + projectId, dates);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual List<EmployeJS> GetAllProjectRessources(Int32 projectId,RequesTasks dates)
		{
			var result = Task.Run(() => GetAllProjectRessourcesAsyncMsg(projectId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS>>().Result;
			 		}

		/// <summary>
		/// state task.
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllStatesAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetAllStates", default(HttpResponseMessage));
		}

		/// <summary>
		/// state task.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllStatesAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetAllStates", default(HttpResponseMessage));
		}

		/// <summary>
		/// state task.
		/// </summary>
		public virtual List<TaskState> GetAllStates()
		{
			var result = Task.Run(() => GetAllStatesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskState>>().Result;
			 		}

		/// <summary>
		/// get project for ressource.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTasksNoManaDireCheckAsyncMsg(Int32 ressourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/tasks/api/v1/tasks/GetTasksNoManaDireCheck?ressourceId=" + ressourceId, dates);
		}

		/// <summary>
		/// get project for ressource.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTasksNoManaDireCheckAsync(Int32 ressourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/tasks/api/v1/tasks/GetTasksNoManaDireCheck?ressourceId=" + ressourceId, dates);
		}

		/// <summary>
		/// get project for ressource.
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual List<ProjectWithTasks> GetTasksNoManaDireCheck(Int32 ressourceId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetTasksNoManaDireCheckAsyncMsg(ressourceId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectWithTasks>>().Result;
			 		}

		/// <summary>
		/// Returns data for a task. Planning and real times included between provided dates
		/// if task cannont be found, returns null
		/// </summary>
		/// <param name="criteria">RequestObject : TaskId</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTaskByIdAsyncMsg(DatesRangeRequest<Int32> criteria)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/tasks/api/v1/tasks/GetTask", criteria);
		}

		/// <summary>
		/// Returns data for a task. Planning and real times included between provided dates
		/// if task cannont be found, returns null
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTaskByIdAsync(DatesRangeRequest<Int32> criteria)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/tasks/api/v1/tasks/GetTask", criteria);
		}

		/// <summary>
		/// Returns data for a task. Planning and real times included between provided dates
		/// if task cannont be found, returns null
		/// </summary>
		public virtual ProjectTask GetTaskById(DatesRangeRequest<Int32> criteria)
		{
			var result = Task.Run(() => GetTaskByIdAsyncMsg(criteria)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectTask>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskState"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateTaskStateAsyncMsg(TaskState taskState)
		{
			return await HttpClient.PostAsJsonAsync<TaskState>("api/v1/tasks/api/v1/tasks/TaskState", taskState);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateTaskStateAsync(TaskState taskState)
		{
			return await HttpClient.PostAsJsonAsync<TaskState>("api/v1/tasks/api/v1/tasks/TaskState", taskState);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId CreateTaskState(TaskState taskState)
		{
			var result = Task.Run(() => CreateTaskStateAsyncMsg(taskState)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Adds a new task from activity
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="activityId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateTaskFromActicityAsyncMsg(Int32 projectId,Guid activityId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/createTaskFromActivity/" + projectId + "/" + activityId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Adds a new task from activity
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="activityId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateTaskFromActicityAsync(Int32 projectId,Guid activityId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/createTaskFromActivity/" + projectId + "/" + activityId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Adds a new task from activity
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="activityId"></param>
		public virtual UpdateResultWithId CreateTaskFromActicity(Int32 projectId,Guid activityId)
		{
			var result = Task.Run(() => CreateTaskFromActicityAsyncMsg(projectId, activityId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Get all tasks for a project, option get tasks in a tree structure
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <param name="getBillingInfo">get hour rate</param>
		/// <param name="putInTreeChild">if the return task should be in a tree structure (childs tasks in childs object of the tasks)</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllTasksAsyncMsg(Int32 projectId,Boolean getBillingInfo,Boolean putInTreeChild)
		{
			return await HttpClient.GetAsync("api/v1/tasks/getAllTasks/" + projectId + "/" + getBillingInfo + "/" + putInTreeChild);
		}

		/// <summary>
		/// Get all tasks for a project, option get tasks in a tree structure
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <param name="getBillingInfo">get hour rate</param>
		/// <param name="putInTreeChild">if the return task should be in a tree structure (childs tasks in childs object of the tasks)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllTasksAsync(Int32 projectId,Boolean getBillingInfo,Boolean putInTreeChild)
		{
			return await HttpClient.GetAsync("api/v1/tasks/getAllTasks/" + projectId + "/" + getBillingInfo + "/" + putInTreeChild);
		}

		/// <summary>
		/// Get all tasks for a project, option get tasks in a tree structure
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <param name="getBillingInfo">get hour rate</param>
		/// <param name="putInTreeChild">if the return task should be in a tree structure (childs tasks in childs object of the tasks)</param>
		public virtual List<ProjectTask> GetAllTasks(Int32 projectId,Boolean getBillingInfo,Boolean putInTreeChild)
		{
			var result = Task.Run(() => GetAllTasksAsyncMsg(projectId, getBillingInfo, putInTreeChild)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTask>>().Result;
			 		}

		/// <summary>
		/// Creates multiple tasks for ONE project from multiple activity ids (should match 1 yo 1)
		/// For now ; Any user can import tasks in any project of the company
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <param name="activities">List of GUIDs for activities</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateMultipleTasksFromIdsAsyncMsg(Int32 projectId,List<Guid> activities)
		{
			return await HttpClient.PostAsJsonAsync<List<Guid>>("api/v1/tasks/api/v1/tasks/createTasksFromActivities/" + projectId, activities);
		}

		/// <summary>
		/// Creates multiple tasks for ONE project from multiple activity ids (should match 1 yo 1)
		/// For now ; Any user can import tasks in any project of the company
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateMultipleTasksFromIdsAsync(Int32 projectId,List<Guid> activities)
		{
			return await HttpClient.PostAsJsonAsync<List<Guid>>("api/v1/tasks/api/v1/tasks/createTasksFromActivities/" + projectId, activities);
		}

		/// <summary>
		/// Creates multiple tasks for ONE project from multiple activity ids (should match 1 yo 1)
		/// For now ; Any user can import tasks in any project of the company
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		public virtual UpdateResultWithId CreateMultipleTasksFromIds(Int32 projectId,List<Guid> activities)
		{
			var result = Task.Run(() => CreateMultipleTasksFromIdsAsyncMsg(projectId, activities)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns a list of tasks based on provided filters and dates range
		/// </summary>
		/// <param name="query"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ListTasksAsyncMsg(DatesRangeFilteredRequest<Object> query)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Object>>("api/v1/tasks/api/v1/tasks/list", query);
		}

		/// <summary>
		/// Returns a list of tasks based on provided filters and dates range
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ListTasksAsync(DatesRangeFilteredRequest<Object> query)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Object>>("api/v1/tasks/api/v1/tasks/list", query);
		}

		/// <summary>
		/// Returns a list of tasks based on provided filters and dates range
		/// </summary>
		public virtual List<ProjectTask> ListTasks(DatesRangeFilteredRequest<Object> query)
		{
			var result = Task.Run(() => ListTasksAsyncMsg(query)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTask>>().Result;
			 		}

		/// <summary>
		/// Returns a list of tasks with minimal info budget rate based on provided filters and dates range
		/// </summary>
		/// <param name="query"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ListTasksBudgetRateAsyncMsg(DatesRangeFilteredRequest<Object> query)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Object>>("api/v1/tasks/api/v1/tasks/listTasksBudgetRate", query);
		}

		/// <summary>
		/// Returns a list of tasks with minimal info budget rate based on provided filters and dates range
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ListTasksBudgetRateAsync(DatesRangeFilteredRequest<Object> query)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Object>>("api/v1/tasks/api/v1/tasks/listTasksBudgetRate", query);
		}

		/// <summary>
		/// Returns a list of tasks with minimal info budget rate based on provided filters and dates range
		/// </summary>
		public virtual List<ProjectTask> ListTasksBudgetRate(DatesRangeFilteredRequest<Object> query)
		{
			var result = Task.Run(() => ListTasksBudgetRateAsyncMsg(query)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTask>>().Result;
			 		}

		/// <summary>
		/// get project work place
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectWorkPlaceAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/Tasks?projectId=" + projectId);
		}

		/// <summary>
		/// get project work place
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectWorkPlaceAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/Tasks?projectId=" + projectId);
		}

		/// <summary>
		/// get project work place
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		public virtual Nullable<Int32> GetProjectWorkPlace(Int32 projectId)
		{
			var result = Task.Run(() => GetProjectWorkPlaceAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Nullable<Int32>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class TimesheetsClient : ClientBase, Interfaces.ITimesheetsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public TimesheetsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TimesheetsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Updates one value for a timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTimeAsyncMsg(Int32 ressourceId,TimehseetBaseLine data)
		{
			return await HttpClient.PostAsJsonAsync<TimehseetBaseLine>("api/v1/timesheets/updateTime/" + ressourceId, data);
		}

		/// <summary>
		/// Updates one value for a timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTimeAsync(Int32 ressourceId,TimehseetBaseLine data)
		{
			return await HttpClient.PostAsJsonAsync<TimehseetBaseLine>("api/v1/timesheets/updateTime/" + ressourceId, data);
		}

		/// <summary>
		/// Updates one value for a timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResultWithId UpdateTime(Int32 ressourceId,TimehseetBaseLine data)
		{
			var result = Task.Run(() => UpdateTimeAsyncMsg(ressourceId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Used for integrations
		/// Allow to sync incoming real times
		/// </summary>
		/// <param name="dataList">List of time entries</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTimeExternalAsyncMsg(List<TimehseetBaseLine> dataList)
		{
			return await HttpClient.PostAsJsonAsync<List<TimehseetBaseLine>>("api/v1/timesheets/updateTimeExternal", dataList);
		}

		/// <summary>
		/// Used for integrations
		/// Allow to sync incoming real times
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTimeExternalAsync(List<TimehseetBaseLine> dataList)
		{
			return await HttpClient.PostAsJsonAsync<List<TimehseetBaseLine>>("api/v1/timesheets/updateTimeExternal", dataList);
		}

		/// <summary>
		/// Used for integrations
		/// Allow to sync incoming real times
		/// </summary>
		public virtual UpdateResult UpdateTimeExternal(List<TimehseetBaseLine> dataList)
		{
			var result = Task.Run(() => UpdateTimeExternalAsyncMsg(dataList)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="args"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimesheetAsyncMsg(GetTimesheetRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetRequest>("api/v1/timesheets/getTimesheet", args);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimesheetAsync(GetTimesheetRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetRequest>("api/v1/timesheets/getTimesheet", args);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual TimeSheetReduced GetTimesheet(GetTimesheetRequest args)
		{
			var result = Task.Run(() => GetTimesheetAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeSheetReduced>().Result;
			 		}

		/// <summary>
		/// Submits a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SubmitTimesheetAsyncMsg(Int32 timesheetId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/submit/" + timesheetId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Submits a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SubmitTimesheetAsync(Int32 timesheetId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/submit/" + timesheetId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Submits a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		public virtual UpdateResult SubmitTimesheet(Int32 timesheetId)
		{
			var result = Task.Run(() => SubmitTimesheetAsyncMsg(timesheetId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="args"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimesheetFromProjectAsyncMsg(GetTimesheetFromProjectRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetFromProjectRequest>("api/v1/timesheets/getTimesheetFromProject", args);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimesheetFromProjectAsync(GetTimesheetFromProjectRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetFromProjectRequest>("api/v1/timesheets/getTimesheetFromProject", args);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual TimeSheetReduced GetTimesheetFromProject(GetTimesheetFromProjectRequest args)
		{
			var result = Task.Run(() => GetTimesheetFromProjectAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeSheetReduced>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsersAsyncMsg(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getUsersForValidation", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsersAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getUsersForValidation", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<MinimalEmployeeData> GetUsers(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			var result = Task.Run(() => GetUsersAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<MinimalEmployeeData>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsersNotSubmittedTimesheetsAsyncMsg(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getUsersNotSubmittedTimesheets", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsersNotSubmittedTimesheetsAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getUsersNotSubmittedTimesheets", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual NotSubmitedTimesheetsResponse GetUsersNotSubmittedTimesheets(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			var result = Task.Run(() => GetUsersNotSubmittedTimesheetsAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<NotSubmitedTimesheetsResponse>().Result;
			 		}

		/// <summary>
		/// Delete Timesheet Views
		/// </summary>
		/// <param name="viewId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteNewTimesheetViewAsyncMsg(Int32 viewId)
		{
			return await HttpClient.DeleteAsync("api/v1/timesheets/deleteNewTimesheetView?viewId=" + viewId);
		}

		/// <summary>
		/// Delete Timesheet Views
		/// </summary>
		/// <param name="viewId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteNewTimesheetViewAsync(Int32 viewId)
		{
			return await HttpClient.DeleteAsync("api/v1/timesheets/deleteNewTimesheetView?viewId=" + viewId);
		}

		/// <summary>
		/// Delete Timesheet Views
		/// </summary>
		/// <param name="viewId"></param>
		public virtual UpdateResult DeleteNewTimesheetView(Int32 viewId)
		{
			var result = Task.Run(() => DeleteNewTimesheetViewAsyncMsg(viewId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddNewTimesheetViewAsyncMsg(DatesRangeFilteredRequestPagination<UserPreferencesTimesheetsParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesTimesheetsParam>>("api/v1/timesheets/addNewTimesheetView", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddNewTimesheetViewAsync(DatesRangeFilteredRequestPagination<UserPreferencesTimesheetsParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<UserPreferencesTimesheetsParam>>("api/v1/timesheets/addNewTimesheetView", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId AddNewTimesheetView(DatesRangeFilteredRequestPagination<UserPreferencesTimesheetsParam> param)
		{
			var result = Task.Run(() => AddNewTimesheetViewAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSubmitDetailByDateAsyncMsg(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getSubmitDetailByDate", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSubmitDetailByDateAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getSubmitDetailByDate", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<TimeSheetRessourceDetail> GetSubmitDetailByDate(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			var result = Task.Run(() => GetSubmitDetailByDateAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TimeSheetRessourceDetail>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SendNotifToUserNotSubmitAsyncMsg(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/sendNotifToUserNotSubmit", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SendNotifToUserNotSubmitAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/sendNotifToUserNotSubmit", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult SendNotifToUserNotSubmit(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			var result = Task.Run(() => SendNotifToUserNotSubmitAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get Past Timesheet
		/// </summary>
		/// <param name="args"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPastTimesheetAsyncMsg(GetTimesheetRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetRequest>("api/v1/timesheets/GetPastTimesheet", args);
		}

		/// <summary>
		/// Get Past Timesheet
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPastTimesheetAsync(GetTimesheetRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetRequest>("api/v1/timesheets/GetPastTimesheet", args);
		}

		/// <summary>
		/// Get Past Timesheet
		/// </summary>
		public virtual TimeSheetReduced GetPastTimesheet(GetTimesheetRequest args)
		{
			var result = Task.Run(() => GetPastTimesheetAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeSheetReduced>().Result;
			 		}

		/// <summary>
		/// Reject TimeSheet
		/// </summary>
		/// <param name="toReject"></param>
		/// <param name="comment"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RejectTimeSheetAsyncMsg(Int32 toReject,String comment)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/RejectTimeSheet?toReject=" + toReject + "&comment=" + comment, default(HttpResponseMessage));
		}

		/// <summary>
		/// Reject TimeSheet
		/// </summary>
		/// <param name="toReject"></param>
		/// <param name="comment"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RejectTimeSheetAsync(Int32 toReject,String comment)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/RejectTimeSheet?toReject=" + toReject + "&comment=" + comment, default(HttpResponseMessage));
		}

		/// <summary>
		/// Reject TimeSheet
		/// </summary>
		/// <param name="toReject"></param>
		/// <param name="comment"></param>
		public virtual UpdateResult RejectTimeSheet(Int32 toReject,String comment)
		{
			var result = Task.Run(() => RejectTimeSheetAsyncMsg(toReject, comment)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Devalidate TimeSheet
		/// </summary>
		/// <param name="toVal"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DevalidateTimeSheetAsyncMsg(Int32 toVal)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/DevalidateTimeSheet?toVal=" + toVal, default(HttpResponseMessage));
		}

		/// <summary>
		/// Devalidate TimeSheet
		/// </summary>
		/// <param name="toVal"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DevalidateTimeSheetAsync(Int32 toVal)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/DevalidateTimeSheet?toVal=" + toVal, default(HttpResponseMessage));
		}

		/// <summary>
		/// Devalidate TimeSheet
		/// </summary>
		/// <param name="toVal"></param>
		public virtual UpdateResult DevalidateTimeSheet(Int32 toVal)
		{
			var result = Task.Run(() => DevalidateTimeSheetAsyncMsg(toVal)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get the sumaries of timesheets for users
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSummariesAsyncMsg(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestTimesheetsSummaries>>("api/v1/timesheets/GetSummaries", request);
		}

		/// <summary>
		/// Get the sumaries of timesheets for users
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSummariesAsync(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestTimesheetsSummaries>>("api/v1/timesheets/GetSummaries", request);
		}

		/// <summary>
		/// Get the sumaries of timesheets for users
		/// </summary>
		public virtual List<TimeSheetReduced> GetSummaries(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request)
		{
			var result = Task.Run(() => GetSummariesAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TimeSheetReduced>>().Result;
			 		}

		/// <summary>
		/// Saves timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="time"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveTimesheetAsyncMsg(Int32 ressourceId,TimeSheetReduced time)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/SaveTimesheet/" + ressourceId, time);
		}

		/// <summary>
		/// Saves timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveTimesheetAsync(Int32 ressourceId,TimeSheetReduced time)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/SaveTimesheet/" + ressourceId, time);
		}

		/// <summary>
		/// Saves timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResultWithId SaveTimesheet(Int32 ressourceId,TimeSheetReduced time)
		{
			var result = Task.Run(() => SaveTimesheetAsyncMsg(ressourceId, time)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Gets a list of general comments for a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetGeneralCommentsTimesheetAsyncMsg(Int32 timesheetId)
		{
			return await HttpClient.GetAsync("api/v1/timesheets/api/v1/timesheets/GetGeneralCommentsTimesheet/" + timesheetId);
		}

		/// <summary>
		/// Gets a list of general comments for a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetGeneralCommentsTimesheetAsync(Int32 timesheetId)
		{
			return await HttpClient.GetAsync("api/v1/timesheets/api/v1/timesheets/GetGeneralCommentsTimesheet/" + timesheetId);
		}

		/// <summary>
		/// Gets a list of general comments for a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		public virtual List<TimesheetGeneralComment> GetGeneralCommentsTimesheet(Int32 timesheetId)
		{
			var result = Task.Run(() => GetGeneralCommentsTimesheetAsyncMsg(timesheetId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TimesheetGeneralComment>>().Result;
			 		}

		/// <summary>
		/// Edits a general comments for a timesheet
		/// </summary>
		/// <param name="commentId"></param>
		/// <param name="newText"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> EditGeneralCommentAsyncMsg(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/timesheets/api/v1/timesheets/EditGeneralComment/" + commentId, newText);
		}

		/// <summary>
		/// Edits a general comments for a timesheet
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> EditGeneralCommentAsync(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/timesheets/api/v1/timesheets/EditGeneralComment/" + commentId, newText);
		}

		/// <summary>
		/// Edits a general comments for a timesheet
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult EditGeneralComment(Int32 commentId,String newText)
		{
			var result = Task.Run(() => EditGeneralCommentAsyncMsg(commentId, newText)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Delete timesheet general comments
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteGeneralCommentAsyncMsg(Int32 commentId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/api/v1/timesheets/DeleteGeneralComment/" + commentId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete timesheet general comments
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteGeneralCommentAsync(Int32 commentId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/api/v1/timesheets/DeleteGeneralComment/" + commentId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete timesheet general comments
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult DeleteGeneralComment(Int32 commentId)
		{
			var result = Task.Run(() => DeleteGeneralCommentAsyncMsg(commentId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Add timesheet general comments
		/// </summary>
		/// <param name="param">Comment param timesheet</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddGeneralTimesheetCommentsAsyncMsg(DatesRangeRequest<TimeSheetCommentParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<TimeSheetCommentParam>>("api/v1/timesheets/api/v1/timesheets/AddGeneralTimesheetComments", param);
		}

		/// <summary>
		/// Add timesheet general comments
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddGeneralTimesheetCommentsAsync(DatesRangeRequest<TimeSheetCommentParam> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<TimeSheetCommentParam>>("api/v1/timesheets/api/v1/timesheets/AddGeneralTimesheetComments", param);
		}

		/// <summary>
		/// Add timesheet general comments
		/// </summary>
		public virtual UpdateResultWithId AddGeneralTimesheetComments(DatesRangeRequest<TimeSheetCommentParam> param)
		{
			var result = Task.Run(() => AddGeneralTimesheetCommentsAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Saves timesheet comments only
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="time"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveTimesheetCommentsAsyncMsg(Int32 ressourceId,TimeSheetReduced time)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/SaveTimesheetComments/" + ressourceId, time);
		}

		/// <summary>
		/// Saves timesheet comments only
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveTimesheetCommentsAsync(Int32 ressourceId,TimeSheetReduced time)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/SaveTimesheetComments/" + ressourceId, time);
		}

		/// <summary>
		/// Saves timesheet comments only
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResultWithId SaveTimesheetComments(Int32 ressourceId,TimeSheetReduced time)
		{
			var result = Task.Run(() => SaveTimesheetCommentsAsyncMsg(ressourceId, time)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// returns the list of avalible project for a user between 2 dates
		/// </summary>
		/// <param name="searchData">RequestObject : Id of user</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsListForUserAsyncMsg(DatesRangeRequest<Int32> searchData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/timesheets/avalibleProjects", searchData);
		}

		/// <summary>
		/// returns the list of avalible project for a user between 2 dates
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsListForUserAsync(DatesRangeRequest<Int32> searchData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/timesheets/avalibleProjects", searchData);
		}

		/// <summary>
		/// returns the list of avalible project for a user between 2 dates
		/// </summary>
		public virtual List<ListItem> GetProjectsListForUser(DatesRangeRequest<Int32> searchData)
		{
			var result = Task.Run(() => GetProjectsListForUserAsyncMsg(searchData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ListItem>>().Result;
			 		}

		/// <summary>
		/// Validates a timesheet with a comment message
		/// </summary>
		/// <param name="timesheetId"></param>
		/// <param name="coment"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ValidateTimesheetAsyncMsg(Int32 timesheetId,String coment)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/timesheets/validate/" + timesheetId, coment);
		}

		/// <summary>
		/// Validates a timesheet with a comment message
		/// </summary>
		/// <param name="timesheetId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ValidateTimesheetAsync(Int32 timesheetId,String coment)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/timesheets/validate/" + timesheetId, coment);
		}

		/// <summary>
		/// Validates a timesheet with a comment message
		/// </summary>
		/// <param name="timesheetId"></param>
		public virtual UpdateResult ValidateTimesheet(Int32 timesheetId,String coment)
		{
			var result = Task.Run(() => ValidateTimesheetAsyncMsg(timesheetId, coment)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates timebank value for a timesheet
		/// If timesheet doesn't exist, it is created
		/// </summary>
		/// <param name="ts">Timesheet to update. Need to provide : Id, ressourceId, StartDate and CurrentTimeBank</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTimebankAsyncMsg(TimeSheetReduced ts)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/updateTimebank", ts);
		}

		/// <summary>
		/// Updates timebank value for a timesheet
		/// If timesheet doesn't exist, it is created
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTimebankAsync(TimeSheetReduced ts)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/updateTimebank", ts);
		}

		/// <summary>
		/// Updates timebank value for a timesheet
		/// If timesheet doesn't exist, it is created
		/// </summary>
		public virtual UpdateResultWithId UpdateTimebank(TimeSheetReduced ts)
		{
			var result = Task.Run(() => UpdateTimebankAsyncMsg(ts)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationsClient : ClientBase, Interfaces.ITranslationsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public TranslationsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TranslationsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Returns ALL avalible translations
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllAvalibleTranslationsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/langs");
		}

		/// <summary>
		/// Returns ALL avalible translations
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllAvalibleTranslationsAsync()
		{
			return await HttpClient.GetAsync("api/v1/langs");
		}

		/// <summary>
		/// Returns ALL avalible translations
		/// </summary>
		public virtual List<TranslationsData> GetAllAvalibleTranslations()
		{
			var result = Task.Run(() => GetAllAvalibleTranslationsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TranslationsData>>().Result;
			 		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="pageName"></param>
		/// <param name="isControl"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTranslationsAsyncMsg(String pageName,Boolean isControl)
		{
			return await HttpClient.GetAsync("api/v1/langs/GetTranslations?pageName=" + pageName + "&isControl=" + isControl);
		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="pageName"></param>
		/// <param name="isControl"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTranslationsAsync(String pageName,Boolean isControl)
		{
			return await HttpClient.GetAsync("api/v1/langs/GetTranslations?pageName=" + pageName + "&isControl=" + isControl);
		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="pageName"></param>
		/// <param name="isControl"></param>
		public virtual List<TranslationText> GetTranslations(String pageName,Boolean isControl)
		{
			var result = Task.Run(() => GetTranslationsAsyncMsg(pageName, isControl)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TranslationText>>().Result;
			 		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="isControl"></param>
		/// <param name="pagesNames"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllTranslationsAsyncMsg(Boolean isControl,List<String> pagesNames)
		{
			return await HttpClient.PostAsJsonAsync<List<String>>("api/v1/langs/GetAllTranslations?isControl=" + isControl, pagesNames);
		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="isControl"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllTranslationsAsync(Boolean isControl,List<String> pagesNames)
		{
			return await HttpClient.PostAsJsonAsync<List<String>>("api/v1/langs/GetAllTranslations?isControl=" + isControl, pagesNames);
		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="isControl"></param>
		public virtual List<TranslationGroupText> GetAllTranslations(Boolean isControl,List<String> pagesNames)
		{
			var result = Task.Run(() => GetAllTranslationsAsyncMsg(isControl, pagesNames)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TranslationGroupText>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllLangsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/langs/GetAllLangs");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllLangsAsync()
		{
			return await HttpClient.GetAsync("api/v1/langs/GetAllLangs");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<LangDefinition> GetAllLangs()
		{
			var result = Task.Run(() => GetAllLangsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<LangDefinition>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeLanguageAsyncMsg(String newCulture,Boolean origUser)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/langs/ChangeLanguage?newCulture=" + newCulture + "&origUser=" + origUser, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeLanguageAsync(String newCulture,Boolean origUser)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/langs/ChangeLanguage?newCulture=" + newCulture + "&origUser=" + origUser, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>
		public virtual UpdateResult ChangeLanguage(String newCulture,Boolean origUser)
		{
			var result = Task.Run(() => ChangeLanguageAsyncMsg(newCulture, origUser)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Allows managment of user settings
	/// </summary>
	public partial class UserProfileClient : ClientBase, Interfaces.IUserProfileClient
	{		

		/// <summary>
		/// Allows managment of user settings
		/// </summary>
		public UserProfileClient() : base()
		{
		}

		/// <summary>
		/// Allows managment of user settings
		/// </summary>
		public UserProfileClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="password"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> Enable2FAAsyncMsg(String password)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile/enable2FA?password=" + password, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="password"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> Enable2FAAsync(String password)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile/enable2FA?password=" + password, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="password"></param>
		public virtual Enable2FAResult Enable2FA(String password)
		{
			var result = Task.Run(() => Enable2FAAsyncMsg(password)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Enable2FAResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> Activate2FAAsyncMsg(Activate2FARequest request)
		{
			return await HttpClient.PostAsJsonAsync<Activate2FARequest>("api/v1/profile/activate2FA", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> Activate2FAAsync(Activate2FARequest request)
		{
			return await HttpClient.PostAsJsonAsync<Activate2FARequest>("api/v1/profile/activate2FA", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult Activate2FA(Activate2FARequest request)
		{
			var result = Task.Run(() => Activate2FAAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetActiveDelegationsRecivedAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/profile/getActiveDelegationsRecived");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetActiveDelegationsRecivedAsync()
		{
			return await HttpClient.GetAsync("api/v1/profile/getActiveDelegationsRecived");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<DelegationJS> GetActiveDelegationsRecived()
		{
			var result = Task.Run(() => GetActiveDelegationsRecivedAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<DelegationJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="delegation"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateDelegationAsyncMsg(DelegationJS delegation)
		{
			return await HttpClient.PostAsJsonAsync<DelegationJS>("api/v1/profile/createDelegation", delegation);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateDelegationAsync(DelegationJS delegation)
		{
			return await HttpClient.PostAsJsonAsync<DelegationJS>("api/v1/profile/createDelegation", delegation);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId CreateDelegation(DelegationJS delegation)
		{
			var result = Task.Run(() => CreateDelegationAsyncMsg(delegation)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteDelegationAsyncMsg(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/profile/deleteDelegation?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteDelegationAsync(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/profile/deleteDelegation?id=" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult DeleteDelegation(Int32 id)
		{
			var result = Task.Run(() => DeleteDelegationAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newLink"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateStartUpPageAsyncMsg(String newLink)
		{
			return await HttpClient.GetAsync("api/v1/profile/updateStartUpPage?newLink=" + newLink);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newLink"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateStartUpPageAsync(String newLink)
		{
			return await HttpClient.GetAsync("api/v1/profile/updateStartUpPage?newLink=" + newLink);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newLink"></param>
		public virtual UpdateResult UpdateStartUpPage(String newLink)
		{
			var result = Task.Run(() => UpdateStartUpPageAsyncMsg(newLink)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimesheetRemindersAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/profile/getTimesheetsReminders");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimesheetRemindersAsync()
		{
			return await HttpClient.GetAsync("api/v1/profile/getTimesheetsReminders");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<TriggerWraper> GetTimesheetReminders()
		{
			var result = Task.Run(() => GetTimesheetRemindersAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TriggerWraper>>().Result;
			 		}

		/// <summary>
		/// Gets the list of custom notifications for a user
		/// </summary>
		/// <param name="ressourceId">Optional</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDefinedTriggertsAsyncMsg(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/profile/getNotificationsTriggers/" + ressourceId);
		}

		/// <summary>
		/// Gets the list of custom notifications for a user
		/// </summary>
		/// <param name="ressourceId">Optional</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDefinedTriggertsAsync(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/profile/getNotificationsTriggers/" + ressourceId);
		}

		/// <summary>
		/// Gets the list of custom notifications for a user
		/// </summary>
		/// <param name="ressourceId">Optional</param>
		public virtual List<TriggerWraper> GetDefinedTriggerts(Int32 ressourceId)
		{
			var result = Task.Run(() => GetDefinedTriggertsAsyncMsg(ressourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TriggerWraper>>().Result;
			 		}

		/// <summary>
		/// Deletes custom notification trigger for a user
		/// </summary>
		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCustomTriggerAsyncMsg(Guid nuid,Int32 ressourceId)
		{
			return await HttpClient.DeleteAsync("api/v1/profile/deleteTrigger/" + nuid + "/" + ressourceId);
		}

		/// <summary>
		/// Deletes custom notification trigger for a user
		/// </summary>
		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCustomTriggerAsync(Guid nuid,Int32 ressourceId)
		{
			return await HttpClient.DeleteAsync("api/v1/profile/deleteTrigger/" + nuid + "/" + ressourceId);
		}

		/// <summary>
		/// Deletes custom notification trigger for a user
		/// </summary>
		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>
		public virtual UpdateResult DeleteCustomTrigger(Guid nuid,Int32 ressourceId)
		{
			var result = Task.Run(() => DeleteCustomTriggerAsyncMsg(nuid, ressourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// get list active delegation
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetActiveDelegationsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/profile/getActiveDelegations");
		}

		/// <summary>
		/// get list active delegation
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetActiveDelegationsAsync()
		{
			return await HttpClient.GetAsync("api/v1/profile/getActiveDelegations");
		}

		/// <summary>
		/// get list active delegation
		/// </summary>
		public virtual List<DelegationJS> GetActiveDelegations()
		{
			var result = Task.Run(() => GetActiveDelegationsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<DelegationJS>>().Result;
			 		}

		/// <summary>
		/// Get User available for delegation
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsersListForDelegationAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/profile");
		}

		/// <summary>
		/// Get User available for delegation
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsersListForDelegationAsync()
		{
			return await HttpClient.GetAsync("api/v1/profile");
		}

		/// <summary>
		/// Get User available for delegation
		/// </summary>
		public virtual List<EmployeJS> GetUsersListForDelegation()
		{
			var result = Task.Run(() => GetUsersListForDelegationAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS>>().Result;
			 		}

		/// <summary>
		/// Change Name
		/// </summary>
		/// <param name="newInfo"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeNameAsyncMsg(RessourceStats newInfo)
		{
			return await HttpClient.PostAsJsonAsync<RessourceStats>("api/v1/profile/changeName", newInfo);
		}

		/// <summary>
		/// Change Name
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeNameAsync(RessourceStats newInfo)
		{
			return await HttpClient.PostAsJsonAsync<RessourceStats>("api/v1/profile/changeName", newInfo);
		}

		/// <summary>
		/// Change Name
		/// </summary>
		public virtual UpdateResult ChangeName(RessourceStats newInfo)
		{
			var result = Task.Run(() => ChangeNameAsyncMsg(newInfo)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Change Password
		/// </summary>
		/// <param name="info"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangePasswordAsyncMsg(RessourceStats info)
		{
			return await HttpClient.PostAsJsonAsync<RessourceStats>("api/v1/profile/changePassword", info);
		}

		/// <summary>
		/// Change Password
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangePasswordAsync(RessourceStats info)
		{
			return await HttpClient.PostAsJsonAsync<RessourceStats>("api/v1/profile/changePassword", info);
		}

		/// <summary>
		/// Change Password
		/// </summary>
		public virtual UpdateResult ChangePassword(RessourceStats info)
		{
			var result = Task.Run(() => ChangePasswordAsyncMsg(info)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Reset All Time Periods
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ResetAllTimePeriodsAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile/resetAllTimePeriods", default(HttpResponseMessage));
		}

		/// <summary>
		/// Reset All Time Periods
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ResetAllTimePeriodsAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile/resetAllTimePeriods", default(HttpResponseMessage));
		}

		/// <summary>
		/// Reset All Time Periods
		/// </summary>
		public virtual void ResetAllTimePeriods()
		{
			var result = Task.Run(() => ResetAllTimePeriodsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// Get Profile Files
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProfileFilesAsyncMsg(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/profile/getProfileFiles?ressourceId=" + ressourceId);
		}

		/// <summary>
		/// Get Profile Files
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProfileFilesAsync(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/profile/getProfileFiles?ressourceId=" + ressourceId);
		}

		/// <summary>
		/// Get Profile Files
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual List<UploadedFile> GetProfileFiles(Int32 ressourceId)
		{
			var result = Task.Run(() => GetProfileFilesAsyncMsg(ressourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UploadedFile>>().Result;
			 		}

		/// <summary>
		/// Save user profile
		/// </summary>
		/// <param name="profile"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveProfileAsyncMsg(ProfileUser profile)
		{
			return await HttpClient.PostAsJsonAsync<ProfileUser>("api/v1/profile/saveProfile", profile);
		}

		/// <summary>
		/// Save user profile
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveProfileAsync(ProfileUser profile)
		{
			return await HttpClient.PostAsJsonAsync<ProfileUser>("api/v1/profile/saveProfile", profile);
		}

		/// <summary>
		/// Save user profile
		/// </summary>
		public virtual UpdateResultMultiErrorSuccess SaveProfile(ProfileUser profile)
		{
			var result = Task.Run(() => SaveProfileAsyncMsg(profile)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultMultiErrorSuccess>().Result;
			 		}

		/// <summary>
		/// Creates a list of notifications
		/// </summary>
		/// <param name="ressourceId">USer to add notification to. (Optional)</param>
		/// <param name="triggers">List of notifications</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddCustomNotificationAsyncMsg(Int32 ressourceId,List<BaseBeeyeTrigger> triggers)
		{
			return await HttpClient.PostAsJsonAsync<List<BaseBeeyeTrigger>>("api/v1/profile/addNotification/" + ressourceId, triggers);
		}

		/// <summary>
		/// Creates a list of notifications
		/// </summary>
		/// <param name="ressourceId">USer to add notification to. (Optional)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddCustomNotificationAsync(Int32 ressourceId,List<BaseBeeyeTrigger> triggers)
		{
			return await HttpClient.PostAsJsonAsync<List<BaseBeeyeTrigger>>("api/v1/profile/addNotification/" + ressourceId, triggers);
		}

		/// <summary>
		/// Creates a list of notifications
		/// </summary>
		/// <param name="ressourceId">USer to add notification to. (Optional)</param>
		public virtual UpdateResult AddCustomNotification(Int32 ressourceId,List<BaseBeeyeTrigger> triggers)
		{
			var result = Task.Run(() => AddCustomNotificationAsyncMsg(ressourceId, triggers)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Returns list of countries
		/// Needed for timezine selection
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCountriesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/profile/GetCountries");
		}

		/// <summary>
		/// Returns list of countries
		/// Needed for timezine selection
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCountriesAsync()
		{
			return await HttpClient.GetAsync("api/v1/profile/GetCountries");
		}

		/// <summary>
		/// Returns list of countries
		/// Needed for timezine selection
		/// </summary>
		public virtual IDictionary<String, String> GetCountries()
		{
			var result = Task.Run(() => GetCountriesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<IDictionary<String, String>>().Result;
			 		}

		/// <summary>
		/// Returns a list of TimeZones for specified country code
		/// </summary>
		/// <param name="country"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimeZonesAsyncMsg(String country)
		{
			return await HttpClient.GetAsync("api/v1/profile/GetTimeZones?country=" + country);
		}

		/// <summary>
		/// Returns a list of TimeZones for specified country code
		/// </summary>
		/// <param name="country"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimeZonesAsync(String country)
		{
			return await HttpClient.GetAsync("api/v1/profile/GetTimeZones?country=" + country);
		}

		/// <summary>
		/// Returns a list of TimeZones for specified country code
		/// </summary>
		/// <param name="country"></param>
		public virtual IDictionary<String, String> GetTimeZones(String country)
		{
			var result = Task.Run(() => GetTimeZonesAsyncMsg(country)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<IDictionary<String, String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="timeZone"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCountryFromTimeZoneAsyncMsg(String timeZone)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/profile/GetCountryFromTimeZone", timeZone);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCountryFromTimeZoneAsync(String timeZone)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/profile/GetCountryFromTimeZone", timeZone);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetCountryFromTimeZone(String timeZone)
		{
			var result = Task.Run(() => GetCountryFromTimeZoneAsyncMsg(timeZone)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class WebHooksClient : ClientBase, Interfaces.IWebHooksClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public WebHooksClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public WebHooksClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Gets the list of all avalible web hooks in Beeye
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleWebHooksAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/hooks/GetAvalibleWebHooks");
		}

		/// <summary>
		/// Gets the list of all avalible web hooks in Beeye
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleWebHooksAsync()
		{
			return await HttpClient.GetAsync("api/v1/hooks/GetAvalibleWebHooks");
		}

		/// <summary>
		/// Gets the list of all avalible web hooks in Beeye
		/// </summary>
		public virtual List<BeeyeWebHook> GetAvalibleWebHooks()
		{
			var result = Task.Run(() => GetAvalibleWebHooksAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<BeeyeWebHook>>().Result;
			 		}

		/// <summary>
		/// Gets the list of active web hook for company
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetActiveWebHooksAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/hooks/GetActiveWebHooks");
		}

		/// <summary>
		/// Gets the list of active web hook for company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetActiveWebHooksAsync()
		{
			return await HttpClient.GetAsync("api/v1/hooks/GetActiveWebHooks");
		}

		/// <summary>
		/// Gets the list of active web hook for company
		/// </summary>
		public virtual List<ActiveBeeyeWebHook> GetActiveWebHooks()
		{
			var result = Task.Run(() => GetActiveWebHooksAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ActiveBeeyeWebHook>>().Result;
			 		}

		/// <summary>
		/// Updates the list of active web hook for company
		/// </summary>
		/// <param name="activeHooks"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateWebHooksAsyncMsg(List<ActiveBeeyeWebHook> activeHooks)
		{
			return await HttpClient.PostAsJsonAsync<List<ActiveBeeyeWebHook>>("api/v1/hooks/GetActiveWebHooks", activeHooks);
		}

		/// <summary>
		/// Updates the list of active web hook for company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateWebHooksAsync(List<ActiveBeeyeWebHook> activeHooks)
		{
			return await HttpClient.PostAsJsonAsync<List<ActiveBeeyeWebHook>>("api/v1/hooks/GetActiveWebHooks", activeHooks);
		}

		/// <summary>
		/// Updates the list of active web hook for company
		/// </summary>
		public virtual UpdateResult UpdateWebHooks(List<ActiveBeeyeWebHook> activeHooks)
		{
			var result = Task.Run(() => UpdateWebHooksAsyncMsg(activeHooks)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSystemWebHooksAsyncMsg(Nullable<Int32> companyId)
		{
			return await HttpClient.GetAsync("api/v1/hooks/system?companyId=" + companyId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSystemWebHooksAsync(Nullable<Int32> companyId)
		{
			return await HttpClient.GetAsync("api/v1/hooks/system?companyId=" + companyId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		public virtual List<ActiveBeeyeWebHook> GetSystemWebHooks(Nullable<Int32> companyId)
		{
			var result = Task.Run(() => GetSystemWebHooksAsyncMsg(companyId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ActiveBeeyeWebHook>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="companyId"></param>
		/// <param name="webHookUpdate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateSystemWebHookAsyncMsg(Guid id,Nullable<Int32> companyId,ActiveBeeyeWebHook webHookUpdate)
		{
			return await HttpClient.PutAsJsonAsync<ActiveBeeyeWebHook>("api/v1/hooks/system/" + id + "?companyId=" + companyId, webHookUpdate);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="companyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateSystemWebHookAsync(Guid id,Nullable<Int32> companyId,ActiveBeeyeWebHook webHookUpdate)
		{
			return await HttpClient.PutAsJsonAsync<ActiveBeeyeWebHook>("api/v1/hooks/system/" + id + "?companyId=" + companyId, webHookUpdate);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="companyId"></param>
		public virtual ActiveBeeyeWebHook UpdateSystemWebHook(Guid id,Nullable<Int32> companyId,ActiveBeeyeWebHook webHookUpdate)
		{
			var result = Task.Run(() => UpdateSystemWebHookAsyncMsg(id, companyId, webHookUpdate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ActiveBeeyeWebHook>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="companyId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteSystemWebHookAsyncMsg(Guid id,Nullable<Int32> companyId)
		{
			return await HttpClient.DeleteAsync("api/v1/hooks/system/" + id + "?companyId=" + companyId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="companyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSystemWebHookAsync(Guid id,Nullable<Int32> companyId)
		{
			return await HttpClient.DeleteAsync("api/v1/hooks/system/" + id + "?companyId=" + companyId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="companyId"></param>
		public virtual void DeleteSystemWebHook(Guid id,Nullable<Int32> companyId)
		{
			var result = Task.Run(() => DeleteSystemWebHookAsyncMsg(id, companyId)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		/// <param name="beeyeWebHook"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddSystemWebHookAsyncMsg(Nullable<Int32> companyId,ActiveBeeyeWebHook beeyeWebHook)
		{
			return await HttpClient.PostAsJsonAsync<ActiveBeeyeWebHook>("api/v1/hooks/system?companyId=" + companyId, beeyeWebHook);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddSystemWebHookAsync(Nullable<Int32> companyId,ActiveBeeyeWebHook beeyeWebHook)
		{
			return await HttpClient.PostAsJsonAsync<ActiveBeeyeWebHook>("api/v1/hooks/system?companyId=" + companyId, beeyeWebHook);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="companyId"></param>
		public virtual ActiveBeeyeWebHook AddSystemWebHook(Nullable<Int32> companyId,ActiveBeeyeWebHook beeyeWebHook)
		{
			var result = Task.Run(() => AddSystemWebHookAsyncMsg(companyId, beeyeWebHook)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ActiveBeeyeWebHook>().Result;
			 		}

		#endregion
	}
}
#endregion

