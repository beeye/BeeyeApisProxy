//------------------------------------------------------------------------------
//<auto-generated>
//  This file is auto-generated by WebApiProxy
//  Project site: http://github.com/faniereynders/webapiproxy
//  
//  Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using WebApi.Proxies.Models;

#region Proxies
namespace WebApi.Proxies
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string MyWebApiProxyBaseAddress = "https://betabeeye.azurewebsites.net/";
	}
}
#endregion

#region Models
namespace WebApi.Proxies.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}

	
	/// <summary>
	/// 
	/// </summary>
	public partial class Activate2FARequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Secret { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TestCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Password { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActiveBeeyeWebHook
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AuthKey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TargetUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String InternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ActivityLine
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid ID { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Ressource_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Company_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CompanyName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ActionDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActionGroup { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ActionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TargetRessource_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TargetRessourceName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AirTableError
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String RecordId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ErrorMessage { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AirTableField
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual AirTableFieldType FieldType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 MappedTo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsManadory { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AirtableRecord
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime CreatedTime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Dictionary<String, Object> Fields { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AirTablesConfig
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsEnabled { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AirTablesKey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AirTablesTable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AirTablesBase { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<AirTableField> FieldsMappings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<AirTableError> Last15Errors { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CategoryId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String WorkSpace { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ViewLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AssignAllUsersToNewProjects { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class BaseBeeyeTrigger
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Guid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual NotificationType NotificationType { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class BeeyeWebHook
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String InternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CapacityGraph
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CatId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CategoryName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Period { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CapacityGraphComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Grouping { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UseReals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodeSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UnitSpliting { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePercentages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowTable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CapacityGraphComponentResults
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CapacityGraph> Graphs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> PeriodeNames { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Client
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactEmail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ContactPhone { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressLine1 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressLine2 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressState { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressCountry { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressCity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdressPostalCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientLogo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientWebSite { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalReference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String VATNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeDeleted { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ComparisonGraphComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ComparisonGraphSortingTypes Sorting { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ComparisonGraphReturnType
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlannedHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOther { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Conflict
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Ressource_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Overcapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Planned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsConflict { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Title { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbConfli { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IEnumerable<Int32> Projects { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConflictParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ResosurceIds { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConflictsDayPlanning
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OverCapacityPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Total { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictType> Conflicts { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Block { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Conflict Conflict { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictsPlanning> Plannings { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConflictsManagmentEntity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String EntityName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictsDayPlanning> Days { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ConflictsPlanning
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Client { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectedTaskEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasComments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFinished { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanFinish { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean NotFinishOldPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TaskPlanningWorkSpace WorkSpaces { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsLocked { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LockedByNames { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double OldAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime OldStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime OldEndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldJs
	{
		#region Constants
		/// <summary>
		/// 
		/// </summary>
		public const Int16 AgregationSum = 1;
		/// <summary>
		/// 
		/// </summary>
		public const Int16 AgregationAverage = 2;
		/// <summary>
		/// 
		/// </summary>
		public const Int16 AgregationMinimum = 3;
		/// <summary>
		/// 
		/// </summary>
		public const Int16 AgregationMaximum = 4;
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsVisible { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsUniqueCustom { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AbakNumberField { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Expression { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> MinValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> MaxValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsedForTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsedForRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldValue Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldPossibleValue> PossibleValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UsedInProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldType FieldType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Category { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Category_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ValueStr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AggregationType { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldJsMinimal
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual CustomFieldType FieldType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Category { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Category_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ValueStr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AggregationType { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldPermissionJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanRead { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanWrite { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CategoryId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CategoryName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldPossibleValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomFieldValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime LastChanged { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Project_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Task_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Ressource_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ListValue_Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DataShareTargetsHolder
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItem> Roles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItem> Postes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItem> Directions { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ListItem> Users { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DatesRangeFilteredRequest<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String JSONFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual T RequestObject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DatesRangeFilteredRequestPagination<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual PaginationData PaginationData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String JSONFilters { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual T RequestObject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DatesRangeRequest<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual T RequestObject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DirectionEmployeesStats
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Responsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceStats> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DirectionJS__
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual EmployeJS__ Responsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> SelectedMonths { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class DirectionModelOrgChart
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResponsibleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResponsibleName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<DirectionModelOrgChart> SubDirections { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<EmployeJS__> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class EmployeeTaskHours
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Hours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ComparatifPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class EmployeJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class EmployeJS__
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class EmployeJSWithCustomFields
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldValue> CustomFieldValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Enable2FAResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Secret { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String QRCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Expense
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime SpendingDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Taxe> TaxesSelected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Taxes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SpendingType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SpendingTypeText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeDeleted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TimeSheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasFiles { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetPlanningLineRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<IntervalHelper> Periods { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual UnitsMode UnitsMode { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetPlanningParams
	{
		#region Constants
		/// <summary>
		/// 
		/// </summary>
		public const Int32 TimeModeDay = 1;
		/// <summary>
		/// 
		/// </summary>
		public const Int32 TimeModeWeek = 2;
		/// <summary>
		/// 
		/// </summary>
		public const Int32 TimeModeMonth = 3;
		/// <summary>
		/// 
		/// </summary>
		public const Int32 PlanByProject = 1;
		/// <summary>
		/// 
		/// </summary>
		public const Int32 PlanByRessource = 2;
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimeMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual UnitsMode UnitsMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PlanningGrouping { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ItemId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Agregate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FieldToGroup { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SavePreferences { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePagination { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SortingOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReducePlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String GroupingField { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean LoadOnlyOne { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReadOnly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SimpleProject> Projects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowEmptyLines { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetRessourcesRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReturnNotAssignedEmployees { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetTimesheetFromProjectRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ProjectIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetTimesheetRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsReadOnly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TakeEmptyProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean BlockEnterTimeOnProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TakeEmptyTasks { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GraphCapacityByOccupation
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimeType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean GetReel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean GetHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePercentages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GraphCapacityByOccupationValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<InfoDashBoardSend> GroupedData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> Intervals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class InfoDashBoardSend
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String PosteName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PosteId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbRessources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> AllTotal { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class IntervalHelper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkDays { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Invoiced
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime InvoicedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AmountHT { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AmountTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double AmountTaxes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Paid { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LangDefinition
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String EnglishName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LocalName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ListItem
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LoginParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserPassword { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Remember { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String User2FA { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LuccaConfig
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsEnabled { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LuccaKey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomField { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> LuccaCategories { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean NotifyIfTimesheetIsValidated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NotificationEmails { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LuccaError
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ErrorMessage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Request { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAm { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> DateAbsence { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Original { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MinimalEmployeCreation
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Email { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TitleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ContractStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ContractEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalReference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BillingRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> CostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludeFromCalculations { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MinimalEmployeeData
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class NotSubmitedTimesheetsResponse
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbNotSubmit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbTimeSheetDone { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbTimeSheetSubmit { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class OccupationJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OccupationName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TaxReturns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class OccupationJSWithRessources
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceStats> Ressources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OccupationName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TaxReturns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PaginationData
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Page { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PerPage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFromRequest { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual PaginationEntity PaginateBy { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PeriodValue
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProjectDatesOK { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsTaskDatesOK { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsEmployeDatesOK { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlannificationMonthly
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Ammount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsWeek { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime FirstDay { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Planning
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsTotals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePercantages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ChildsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalTotalPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Poste { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTodo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Projected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Direction { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Category { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SecondCategory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTaskPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PlanningEntity> Childs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> Totals { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningEntity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double HoursDaily { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ValueWithDates> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsTotals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UsePercantages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NbDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ChildsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalTotalPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Poste { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTodo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Projected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Direction { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Category { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SecondCategory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTaskPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PlanningEntity> Childs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> Totals { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningResponse
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 MaxResults { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ColumnsCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PlanningTimeUnit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SimplifiedPlanningEntity> Plannings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MaxAvalibilityHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<IntervalHelper> Periods { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Planning> Planings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual GetPlanningParams Config { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Double> Totals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UsersCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 MaxLines { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<IntervalHelper> Intervals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Truncated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean MaxLinesReached { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 LoadedLines { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Start { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual PlanningMode Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ResosurceIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AutoAdjustDates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean BlockModif { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjecMonthlyPlanned
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PlannificationMonthly> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectContainer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasProjectHoursPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectFastPlanningResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectShortDescr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskFastPlanningResult> Tasks { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectCloseDateRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ProjectCloseDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectObjective> ProjectObjective { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldValue> CustomFieldsValues { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjecMonthlyPlanned projecMonthlyPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectTypeJS PrimaryProjectType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTypeJS> AddedProjectTypes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual EmployeJS__ ProjectResponsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HaveSurveyAnswer { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IEnumerable<RessourceStats> ProjectRessources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<DirectionEmployeesStats> ProjectRessourcesDirections { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectDescription { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TemplateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FondDeFinancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectPrevu { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectGagne { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RessourcesNeedsSurvey { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PlanMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<UploadedFile> Files { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectState State { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlannedWithExcl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRealWithExcl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRHCost { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTaskPlanning { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Advancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRealShown { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlannedShown { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRaF { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalProjected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalUsedAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CreatedBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String WorkPlace { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> CreatedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectJSMainStats
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectTypeJS PrimaryProjectType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 FondDeFinancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectGagne { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectPrevu { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReelsExclude { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> AllReals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ProjectIsClose { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ProjectCloseDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectCloseDateRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> Projected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalPlanifsExclude { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> AllPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourcesCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReelsDollars { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalPlanifDollars { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> RaFProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalReelsDollarsNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TotalRhCostNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BurnRateReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> BurnRatePlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ProjectState CurrentState { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentStateCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CurrentStateColor { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginMoney { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginPercentage { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginMoneyTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double MarginPercentageTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateComment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> Avancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRhCost { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalRhCostPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldJsMinimal> CustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalExpenses { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalExpensesNoDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String MainCategory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SecondCategory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Responsable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Invoice { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double InvoiceTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Paid { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PaidTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double StillToPlanTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BudgetedHRCosts { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BudgetedHRRevenue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResponsableId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectObjective
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal GoalValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal ReachedValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ObjectiveCompleted { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ObjectiveDueDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectSearchResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectShortDescr { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectState
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SatetCode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime CreatedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ModifiedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AddedBy { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTask
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String currentStateColor { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String WorkPlace { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DefaultWorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndPrevutDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndtDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 currentStateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String currentStateText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 AssignedRessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AssignedRessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double reelsTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double vendRHTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double vendRHDates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double costRHTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double costRHDates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double reelsSumForDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String IsSubscribedText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double planSumForDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double planSumTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTask> Childs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<CustomFieldJs> CustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastComments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IEnumerable<TaskComment> Comments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IEnumerable<EmployeeTaskHours> Ressources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubscribed { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTaskMinimal
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> ProjectsIdList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskTargetedEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ProjectEndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 StateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEnterTime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Description { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentStateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DefaultWorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentTaksId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTypeJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectTypeId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectTypeName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ProjectSurveyEnable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubscribed { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectTypeStats
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<String> CustomFieldsFooter { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectJSMainStats> Projects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectTypeId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectTypeName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ProjectSurveyEnable { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubscribed { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectWithTasks
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean isSelected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ClientId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ClientName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectTask> Tasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubscribed { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TimeReal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TimePlanned { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RatioGraphComponent
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual RatioGraphGroupingTypes Grouping { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CustomFieldId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PeriodSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean UseReals { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentWidth { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CurrentHeight { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBeResized { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasViewMoreLink { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TypeComponent { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RatioGraphReturnType
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String GroupName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Hours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOther { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RecommendationRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 CategoryId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ClientId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RecurentPlanParams
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual RecurrenceType RecurrentType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DayOfWeek RecurrentDayOfTheWeek { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ResosurceIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean BlockModification { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ReplaceRessource
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ReplaceRessourceProject> ressoProject { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ReplaceRessourceProject
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ReplanProjectsRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ProjectsIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime NewProjectsStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RecreateTasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CopyCustomFields { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual PlanningSelection PlanType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SignalRId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CloseOriginalProject { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequesTasks
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateDebut { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateFin { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateFinprevue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 State { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkPlaceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CascadeState { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestConflicts
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect View { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OnlyWithPlannings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowByResource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IncludeOnlyOverCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean PrecalculateConflicts { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IncludeDetails { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestDeclareDone
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 resourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 taskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean changeTimeSheet { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestPlanningTasks
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect View { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TimeMode TimeMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReadOnly { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestProjectResources
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ByDirec { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestSelectedTasks
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Ids { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NewCurrentStateId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NewRessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateDebut { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateFinprevue { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RequestTimesheetsSummaries
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] UserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean OnlySubmitedOrValidated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ValidatedAfter { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ResourceContainer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineToDo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Projected { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageURL { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceGeneralInformations
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<UploadedFile> Files { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AnyPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlannifCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ReelCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHourRH { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Effort { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RaFProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectedProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NumeroNAS { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double StillToPlanTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectsNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SkillJs> Competences { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TimeBank { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TauxCoutant { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double[] SparkLineData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TimeBankTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourcesForNewProject
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<OccupationJSWithRessources> Occupations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<OccupationJSWithRessources> AdditionalUsers { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasAditionalRessources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceStats
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean AnyPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanifs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReels { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlannifCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ReelCapacity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHour { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RateByHourRH { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Effort { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RaFProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectedProject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NumeroNAS { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BaselineTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double StillToPlanTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectsNumber { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SkillJs> Competences { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TimeBank { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TauxCoutant { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double[] SparkLineData { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TimeBankTotal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FullName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Brand { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Occupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String DirectionName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImagePath { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsOnline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Mail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsActive { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Baseline { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double BillRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentCostRate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RessourceUpdate
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UserId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserFirstName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UserLastName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> OccupationId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> DirectionId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String EditedMail { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> Taux { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TauxLoaded { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean TauxFromOccupation { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ExternalReference { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> RealMaxWorkDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> MaxWorkDay { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> TauxHoraireCoutant { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] DashboardAccses { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Boolean> ExcludeFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndContratDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> LicenseId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean RemovedEndContractDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class RoleJS
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String RoleName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RoleId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanManageHourRates { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanManageRoles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanConfigureCompany { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanManageOrganigramme { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditRessource { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanAccsesMyAccount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasATimeShit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanValidateTimeSheets { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasScenarios { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasTaxReturns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanViewRapports { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditRapports { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditPlaniffication { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanSeePlaniffication { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditProjects { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanAccesConnectivity { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanAccessProjectSuccess { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditBudget { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 NumberOfUsers { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SearchCriteriaRapports
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime From { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime To { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SortType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedFondId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedCategorie { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 BeeyeFilter { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect ViewSelector { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Columns { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ColOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsAsc { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ShowTaskEnd { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HeadLoad { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Int32> UserIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ForEntry { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SmartView { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ShareInfos
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Guid Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ShareName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String SharedBy { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ShareRapportHelper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ReportType TypeRapport { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 IdRapport { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Roles { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Postes { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Directions { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] Users { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ShareName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ShareExpirationDays { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SimpleProject
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ProjectName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SimplifiedPlanningEntity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PlanningLineId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual EntityType EntityType { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 EntityId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String EntityName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdditionalData1 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AdditionalData2 { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Avalibility { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double ProjectedTime { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RemainingToPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Budget { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasChilds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<SimplifiedPlanningEntity> Childs { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<PeriodValue> Values { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsProjectLine { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SkillJs
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Level { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 LevelManager { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LevelManagerName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SkillLevelJs
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SpendingType
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskComment
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PostedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime PostedDateReal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PostedBy { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskContainer
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 DisplayOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskFastPlanningResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> TaskEndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskIntervalHelper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkDays { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanning
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String TaskName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealHours { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual TaskPlanningWorkSpace WorkSpaces { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsLocked { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String LockedByNames { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double OldAmount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime OldStartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime OldEndDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanningComment
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ResourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TaskPlanningId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime DateAdded { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> DateEdited { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Double> ValuePlanification { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> DatePlanification { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceNameHistory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String WorkPlaceHistory { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSystem { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEdit { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Object Optionel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String OldRessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> OldDate { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanningResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> Items { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskContainer> Tasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<ResourceContainer> Resources { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskIntervalHelper> Intervals { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanningsToSave
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> ToDelete { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> ToUpdateValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> ToChangeDatesAndValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TaskPlanning> ToAdd { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskPlanningWorkSpace
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameEnglish { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String NameFrench { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual WorkspaceIcons Icon { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean NotifyManager { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDefault { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TaskState
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Order { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ForTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Color { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Taxe
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Amount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSelected { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeByCustomFieldReturnType
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FieldName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RatioGraphReturnType> Items { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetDay
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Day { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ReadOnly { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetEntity
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TimeSheetDay> ProjectDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TimeSheetEntity> Tasks { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealAdvancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PlanningAdvancement { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFav { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasInfo { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ForTimesheet { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Planned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> ProjectCloseDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String State { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String StateColor { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RemainingDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 InclusionLevel { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> ParentId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimesheetGeneralComment
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String CommentText { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime PostedtDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TimesheetId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String ResourceImageUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEdit { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetReduced
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Id { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String RessourceName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double CurrentTimeBank { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasGeneralComment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double PrevTimeBank { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalReal { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSubmited { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsValidated { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanEditComments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime SubmitDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime ValidationDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Comment { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<Expense> Spendings { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TimeSheetEntity> Projects { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimeSheetRessourceDetail
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual List<RessourceStats> Ressources { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TimesheetsValidationUsersRequest
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual ViewSelect SelectedView { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 PageMode { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SelectedUser { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Index { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationGroupText
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual List<TranslationText> Text { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String PageName { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationLine
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Page { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Key { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsControl { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationText
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Value { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class TriggerWraper
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FriendlyDescription { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FriendlyTypeName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual BaseBeeyeTrigger Trigger { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateResult
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UpdateResultWithId
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 NewId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] OptionalIds { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean Result { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Message { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class UploadedFile
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 serverId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Decimal size { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String UploadBy { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ValueWithDates
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime StartDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime EndDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double Value { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TotalPlan { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double RealValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 WorkDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TotalWorkDays { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean CanBePlanned { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RessourceId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ProjectId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double[] AllProjectValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double[] HighValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] ProjectHighValue { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32[] ProjectHighValueId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean ExcludedFromCalculations { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Double TaskValue { get; set; }
		#endregion
	}	

	
	/// <summary>
	/// 
	/// </summary>
	public enum AirTableFieldType
	{

		/// <summary>
		/// 
		/// </summary>
		Ignore = 0,

		/// <summary>
		/// 
		/// </summary>
		ProjectName = 1,

		/// <summary>
		/// 
		/// </summary>
		ProjectResponsible = 2,

		/// <summary>
		/// 
		/// </summary>
		ProjectRessource = 3,

		/// <summary>
		/// 
		/// </summary>
		Text = 4,

		/// <summary>
		/// 
		/// </summary>
		Number = 5,

		/// <summary>
		/// 
		/// </summary>
		ListOneValue = 6,

		/// <summary>
		/// 
		/// </summary>
		ListMultipleValues = 7,

		/// <summary>
		/// 
		/// </summary>
		ProjectStartDate = 8,

		/// <summary>
		/// 
		/// </summary>
		ProjectEndDate = 9,

		/// <summary>
		/// 
		/// </summary>
		Date = 10,

		/// <summary>
		/// 
		/// </summary>
		Attachements = 11,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ComparisonGraphSortingTypes
	{

		/// <summary>
		/// 
		/// </summary>
		Real = 1,

		/// <summary>
		/// 
		/// </summary>
		Planned = 2,

		/// <summary>
		/// 
		/// </summary>
		Both = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ConflictType
	{

		/// <summary>
		/// 
		/// </summary>
		NoConflicts = 1,

		/// <summary>
		/// 
		/// </summary>
		OverCapacity = 2,

		/// <summary>
		/// 
		/// </summary>
		NotEnded = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum CustomFieldType
	{

		/// <summary>
		/// 
		/// </summary>
		StringField = 1,

		/// <summary>
		/// 
		/// </summary>
		NumberField = 2,

		/// <summary>
		/// 
		/// </summary>
		ListField = 3,

		/// <summary>
		/// 
		/// </summary>
		DateField = 4,

		/// <summary>
		/// 
		/// </summary>
		RessourceField = 5,

		/// <summary>
		/// 
		/// </summary>
		CalculationField = 6,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum EntityType
	{

		/// <summary>
		/// 
		/// </summary>
		Project = 0,

		/// <summary>
		/// 
		/// </summary>
		Task = 1,

		/// <summary>
		/// 
		/// </summary>
		Ressource = 2,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum NotificationType
	{

		/// <summary>
		/// 
		/// </summary>
		None = 0,

		/// <summary>
		/// 
		/// </summary>
		TrrigeredEvent = 1,

		/// <summary>
		/// 
		/// </summary>
		TriggeredTime = 2,

		/// <summary>
		/// 
		/// </summary>
		EmailEvent = 3,

		/// <summary>
		/// 
		/// </summary>
		LuccaEvent = 4,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum PaginationEntity
	{

		/// <summary>
		/// 
		/// </summary>
		Project = 0,

		/// <summary>
		/// 
		/// </summary>
		Ressource = 1,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum PlanningMode
	{

		/// <summary>
		/// 
		/// </summary>
		HoursPerDay = 1,

		/// <summary>
		/// 
		/// </summary>
		HoursTotal = 2,

		/// <summary>
		/// 
		/// </summary>
		PlanByAvalibility = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum PlanningSelection
	{

		/// <summary>
		/// 
		/// </summary>
		None = 1,

		/// <summary>
		/// 
		/// </summary>
		UseReals = 2,

		/// <summary>
		/// 
		/// </summary>
		UsePlanned = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum RatioGraphGroupingTypes
	{

		/// <summary>
		/// 
		/// </summary>
		MainCategory = 1,

		/// <summary>
		/// 
		/// </summary>
		SecondaryCategory = 2,

		/// <summary>
		/// 
		/// </summary>
		Employee = 3,

		/// <summary>
		/// 
		/// </summary>
		CustomField = 4,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum RecurrenceType
	{

		/// <summary>
		/// 
		/// </summary>
		None = 0,

		/// <summary>
		/// 
		/// </summary>
		Weekly = 1,

		/// <summary>
		/// 
		/// </summary>
		BiWeekly = 2,

		/// <summary>
		/// 
		/// </summary>
		MonthlyFixedDay = 3,

		/// <summary>
		/// 
		/// </summary>
		Quarterly = 4,

		/// <summary>
		/// 
		/// </summary>
		Biannualy = 5,

		/// <summary>
		/// 
		/// </summary>
		AllDaysForPeriod = 6,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ReportType
	{

		/// <summary>
		/// 
		/// </summary>
		Projects = 1,

		/// <summary>
		/// 
		/// </summary>
		Ressources = 2,

		/// <summary>
		/// 
		/// </summary>
		Tasks = 3,

		/// <summary>
		/// 
		/// </summary>
		Survey = 4,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum TimeMode
	{

		/// <summary>
		/// 
		/// </summary>
		Day = 1,

		/// <summary>
		/// 
		/// </summary>
		Week = 2,

		/// <summary>
		/// 
		/// </summary>
		Month = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum UnitsMode
	{

		/// <summary>
		/// 
		/// </summary>
		Hours = 1,

		/// <summary>
		/// 
		/// </summary>
		Percentages = 2,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum ViewSelect
	{

		/// <summary>
		/// 
		/// </summary>
		Me = 1,

		/// <summary>
		/// 
		/// </summary>
		Team = 2,

		/// <summary>
		/// 
		/// </summary>
		Company = 3,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum WorkspaceIcons
	{

		/// <summary>
		/// 
		/// </summary>
		Building = 1,

		/// <summary>
		/// 
		/// </summary>
		Home = 2,

		/// <summary>
		/// 
		/// </summary>
		User = 3,

		/// <summary>
		/// 
		/// </summary>
		Wifi = 4,

		/// <summary>
		/// 
		/// </summary>
		Cloud = 5,

		/// <summary>
		/// 
		/// </summary>
		Laptop = 6,

		/// <summary>
		/// 
		/// </summary>
		ChalkboardTeacher = 7,

		/// <summary>
		/// 
		/// </summary>
		Plane = 8,

		/// <summary>
		/// 
		/// </summary>
		Hospital = 9,

		/// <summary>
		/// 
		/// </summary>
		Bus = 10,

		/// <summary>
		/// 
		/// </summary>
		Car = 11,

		/// <summary>
		/// 
		/// </summary>
		Bed = 12,

		/// <summary>
		/// 
		/// </summary>
		Basketball = 13,

		/// <summary>
		/// 
		/// </summary>
		Star = 14,
		
	}
	
}
#endregion

#region Interfaces
namespace WebApi.Proxies.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	
	public partial interface IBeeyeAIClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> SuggestTop5RessourcesAsync(DatesRangeFilteredRequestPagination<RecommendationRequest> request);

		/// <returns></returns>
		List<EmployeJS__> SuggestTop5Ressources(DatesRangeFilteredRequestPagination<RecommendationRequest> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IClientsManagmentClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetClientsListAsync();

		/// <returns></returns>
		List<Client> GetClientsList();

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetClientByIdAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		Client GetClientById(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateClientAsync(Client value);

		/// <returns></returns>
		UpdateResultWithId CreateClient(Client value);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateClientAsync(Int32 id,Client value);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult UpdateClient(Int32 id,Client value);


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteMultipleClientsAsync(Int32[] ids);

		/// <returns></returns>
		UpdateResult DeleteMultipleClients(Int32[] ids);

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteClientAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		UpdateResult DeleteClient(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IConflictsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> testAsync();

		/// <returns></returns>
		UpdateResult test();


		/// <returns></returns>
		Task<HttpResponseMessage> ReassingAsync(PlanParams Params);

		/// <returns></returns>
		UpdateResult Reassing(PlanParams Params);


		/// <returns></returns>
		Task<HttpResponseMessage> SavePlanniAsync(PlanParams Params);

		/// <returns></returns>
		UpdateResult SavePlanni(PlanParams Params);


		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictAsync(DatesRangeFilteredRequest<ConflictParams> param);

		/// <returns></returns>
		List<Conflict> GetConflict(DatesRangeFilteredRequest<ConflictParams> param);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface ICustomFieldsClient : IClientBase
	{	

		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllCustomFieldsAsync(Boolean takeHidden,Boolean takeCalculHard);

		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetAllCustomFields(Boolean takeHidden,Boolean takeCalculHard);

		/// <param name="customFieldId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckUniqueValueAsync(Int32 customFieldId,CustomFieldValue value);

		/// <param name="customFieldId"></param>
		/// <returns></returns>
		UpdateResult CheckUniqueValue(Int32 customFieldId,CustomFieldValue value);

		/// <param name="customFieldId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateCustomFieldValueAsync(Int32 customFieldId,CustomFieldValue value);

		/// <param name="customFieldId"></param>
		/// <returns></returns>
		UpdateResultWithId UpdateCustomFieldValue(Int32 customFieldId,CustomFieldValue value);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IDataSharingClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleShareTargetsAsync();

		/// <returns></returns>
		DataShareTargetsHolder GetAvalibleShareTargets();

		/// <param name="reportType">The report type (projects, ressources, tasks)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSharedReportsAsync(ReportType reportType);

		/// <param name="reportType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		List<ShareInfos> GetSharedReports(ReportType reportType);


		/// <returns></returns>
		Task<HttpResponseMessage> ShareReportAsync(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare);

		/// <returns></returns>
		UpdateResult ShareReport(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare);

		/// <param name="reportType"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ImportReportsAsync(ReportType reportType,Guid[] toImport);

		/// <param name="reportType"></param>
		/// <returns></returns>
		UpdateResultWithId ImportReports(ReportType reportType,Guid[] toImport);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IDirectionsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetDirectionsOrgChartAsync();

		/// <returns></returns>
		DirectionModelOrgChart GetDirectionsOrgChart();


		/// <returns></returns>
		Task<HttpResponseMessage> GetDirectionsListForUserAsync();

		/// <returns></returns>
		List<DirectionJS__> GetDirectionsListForUser();


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllDirectionsAsync();

		/// <returns></returns>
		List<DirectionJS__> GetAllDirections();

		/// <param name="dirid">Id of parent direction</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetSubDirectionsAsync(Int32 dirid);

		/// <param name="dirid">Id of parent direction</param>
		/// <returns></returns>
		List<DirectionJS__> GetSubDirections(Int32 dirid);

		/// <param name="dirId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateDirectionAsync(Int32 dirId,DirectionModelOrgChart direction);

		/// <param name="dirId"></param>
		/// <returns></returns>
		UpdateResult UpdateDirection(Int32 dirId,DirectionModelOrgChart direction);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateDirectionAsync(DirectionJS__ direction);

		/// <returns></returns>
		UpdateResultWithId CreateDirection(DirectionJS__ direction);

		/// <param name="dirId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteDirectionAsync(Int32 dirId);

		/// <param name="dirId"></param>
		/// <returns></returns>
		UpdateResult DeleteDirection(Int32 dirId);

		/// <param name="name"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckIfDirectionExistsAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		Boolean CheckIfDirectionExists(String name);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPossibleResponsablesAsync();

		/// <returns></returns>
		List<EmployeJS__> GetPossibleResponsables();


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IEmployesClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllRessourcesFilteredAsync(DatesRangeFilteredRequestPagination<Boolean> request);

		/// <returns></returns>
		List<EmployeJS__> GetAllRessourcesFiltered(DatesRangeFilteredRequestPagination<Boolean> request);

		/// <param name="takeOnlyActif">Only take not deleted employees</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllRessourcesAsync(Boolean takeOnlyActif);

		/// <param name="takeOnlyActif">Only take not deleted employees</param>
		/// <returns></returns>
		List<EmployeJS__> GetAllRessources(Boolean takeOnlyActif);

		/// <param name="takeOnlyActif"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllRessourcesWithCustomFieldsAsync(Boolean takeOnlyActif);

		/// <param name="takeOnlyActif"></param>
		/// <returns></returns>
		List<EmployeJSWithCustomFields> GetAllRessourcesWithCustomFields(Boolean takeOnlyActif);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateEmployeAsync(MinimalEmployeCreation employe);

		/// <returns></returns>
		UpdateResultWithId CreateEmploye(MinimalEmployeCreation employe);


		/// <returns></returns>
		Task<HttpResponseMessage> GetLastActivityForUserAsync(DatesRangeRequest<Int32> data);

		/// <returns></returns>
		List<ActivityLine> GetLastActivityForUser(DatesRangeRequest<Int32> data);

		/// <param name="userId">User id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateEmployeCostRateAsync(Int32 userId,Double rate);

		/// <param name="userId">User id</param>
		/// <returns></returns>
		UpdateResult UpdateEmployeCostRate(Int32 userId,Double rate);

		/// <param name="employeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ArchiveEmployeeAsync(Int32 employeId);

		/// <param name="employeId"></param>
		/// <returns></returns>
		UpdateResult ArchiveEmployee(Int32 employeId);

		/// <param name="employeId">Ressource ID</param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckAvailabilityProblemAsync(Int32 employeId,ReplaceRessource param);

		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		List<Int32> CheckAvailabilityProblem(Int32 employeId,ReplaceRessource param);

		/// <param name="employeId">Ressource ID</param>

		/// <returns></returns>
		Task<HttpResponseMessage> ReplaceRessourceAsync(Int32 employeId,ReplaceRessource param);

		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		UpdateResult ReplaceRessource(Int32 employeId,ReplaceRessource param);

		/// <param name="employeId">Ressource ID</param>

		/// <returns></returns>
		Task<HttpResponseMessage> MoveEmployeeToDirectionAsync(Int32 employeId,Int32 newDirectionId);

		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		UpdateResult MoveEmployeeToDirection(Int32 employeId,Int32 newDirectionId);

		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTiersIdAsync(Int32 userId,EmployeJS__ toUpdate);

		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult UpdateTiersId(Int32 userId,EmployeJS__ toUpdate);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IExpensesClient : IClientBase
	{	

		/// <param name="expenseId">Id of the expense</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetExpenseInfoAsync(Int32 expenseId);

		/// <param name="expenseId">Id of the expense</param>
		/// <returns></returns>
		Expense GetExpenseInfo(Int32 expenseId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleProjectsForDatesAsync(DatesRangeRequest<Object> data);

		/// <returns></returns>
		List<SimpleProject> GetAvalibleProjectsForDates(DatesRangeRequest<Object> data);

		/// <param name="expenseId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTaxesAsync(Int32 expenseId);

		/// <param name="expenseId"></param>
		/// <returns></returns>
		List<Taxe> GetTaxes(Int32 expenseId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetExpensesTypesAsync();

		/// <returns></returns>
		List<SpendingType> GetExpensesTypes();


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateTaxeAsync(Taxe t);

		/// <returns></returns>
		UpdateResultWithId AddOrUpdateTaxe(Taxe t);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrUpdateExpenseTypeAsync(SpendingType t);

		/// <returns></returns>
		UpdateResultWithId AddOrUpdateExpenseType(SpendingType t);

		/// <param name="taxeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTaxeAsync(Int32 taxeId);

		/// <param name="taxeId"></param>
		/// <returns></returns>
		UpdateResultWithId DeleteTaxe(Int32 taxeId);

		/// <param name="expenseTypeId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteExpenseTypeAsync(Int32 expenseTypeId);

		/// <param name="expenseTypeId"></param>
		/// <returns></returns>
		UpdateResultWithId DeleteExpenseType(Int32 expenseTypeId);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrEditProjectExpenseAsync(Expense expense);

		/// <returns></returns>
		UpdateResultWithId AddOrEditProjectExpense(Expense expense);

		/// <param name="expenseId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddFilesToExpenseAsync(Int32 expenseId);

		/// <param name="expenseId"></param>
		/// <returns></returns>
		UpdateResultWithId AddFilesToExpense(Int32 expenseId);

		/// <param name="expenseId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetFilesListForExpenseAsync(Int32 expenseId);

		/// <param name="expenseId"></param>
		/// <returns></returns>
		List<UploadedFile> GetFilesListForExpense(Int32 expenseId);

		/// <param name="expenseId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteExpenseAsync(Int32 expenseId);

		/// <param name="expenseId"></param>
		/// <returns></returns>
		UpdateResult DeleteExpense(Int32 expenseId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IFastPlanningClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsAsync(DatesRangeRequest<Boolean> args);

		/// <returns></returns>
		List<ProjectFastPlanningResult> GetProjects(DatesRangeRequest<Boolean> args);


		/// <returns></returns>
		Task<HttpResponseMessage> GetRessourcesAsync(DatesRangeRequest<GetRessourcesRequest> args);

		/// <returns></returns>
		RessourcesForNewProject GetRessources(DatesRangeRequest<GetRessourcesRequest> args);


		/// <returns></returns>
		Task<HttpResponseMessage> CheckIfPlanifAsync(PlanParams Params);

		/// <returns></returns>
		UpdateResult CheckIfPlanif(PlanParams Params);


		/// <returns></returns>
		Task<HttpResponseMessage> SavePlanningRessourcesAsync(PlanParams Params);

		/// <returns></returns>
		UpdateResult SavePlanningRessources(PlanParams Params);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IHelperWebClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GenerateApiTokenAsync();

		/// <returns></returns>
		String GenerateApiToken();

		/// <param name="v"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UnsubscribeAllEmailAsync(Boolean v);

		/// <param name="v"></param>
		/// <returns></returns>
		Boolean UnsubscribeAllEmail(Boolean v);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IHumanRessourcesClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTitlesOrderAsync(Dictionary<Int32, Int32> neworder);

		/// <returns></returns>
		UpdateResult UpdateTitlesOrder(Dictionary<Int32, Int32> neworder);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllTitlesAsync();

		/// <returns></returns>
		List<OccupationJS> GetAllTitles();


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllSkillLevelsAsync();

		/// <returns></returns>
		List<SkillLevelJs> GetAllSkillLevels();

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckCanDeleteRessourceAsync(Int32 ressourceId);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		Boolean CheckCanDeleteRessource(Int32 ressourceId);

		/// <param name="skillLevelId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSkillLevelAsync(Int32 skillLevelId);

		/// <param name="skillLevelId"></param>
		/// <returns></returns>
		UpdateResult DeleteSkillLevel(Int32 skillLevelId);


		/// <returns></returns>
		Task<HttpResponseMessage> ChangeSkillLevelsOrderAsync(Int32[] newOrder);

		/// <returns></returns>
		UpdateResult ChangeSkillLevelsOrder(Int32[] newOrder);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrEditSkillLevelAsync(SkillLevelJs skillLevel);

		/// <returns></returns>
		UpdateResultWithId AddOrEditSkillLevel(SkillLevelJs skillLevel);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllSkillsAsync();

		/// <returns></returns>
		List<SkillJs> GetAllSkills();

		/// <param name="skillId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSkillAsync(Int32 skillId);

		/// <param name="skillId"></param>
		/// <returns></returns>
		UpdateResult DeleteSkill(Int32 skillId);


		/// <returns></returns>
		Task<HttpResponseMessage> ChangeSkillsOrderAsync(Int32[] newOrder);

		/// <returns></returns>
		UpdateResult ChangeSkillsOrder(Int32[] newOrder);


		/// <returns></returns>
		Task<HttpResponseMessage> AddOrEditSkillAsync(SkillJs skill);

		/// <returns></returns>
		UpdateResultWithId AddOrEditSkill(SkillJs skill);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateTitileAsync(OccupationJS title);

		/// <returns></returns>
		UpdateResultWithId CreateTitile(OccupationJS title);

		/// <param name="titleId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTitleAsync(Int32 titleId,OccupationJS title);

		/// <param name="titleId"></param>
		/// <returns></returns>
		UpdateResult UpdateTitle(Int32 titleId,OccupationJS title);

		/// <param name="titleId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTitileAsync(Int32 titleId);

		/// <param name="titleId"></param>
		/// <returns></returns>
		UpdateResult DeleteTitile(Int32 titleId);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CheckUpdateEmployeeAsync(Int32 ressourceId,RessourceUpdate data);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResult CheckUpdateEmployee(Int32 ressourceId,RessourceUpdate data);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateEmployeeAsync(Int32 ressourceId,RessourceUpdate data);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResultWithId UpdateEmployee(Int32 ressourceId,RessourceUpdate data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IIntegrationsClient : IClientBase
	{	

		/// <param name="cfId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateGtGpCustomFieldAsync(Int32 cfId);

		/// <param name="cfId"></param>
		/// <returns></returns>
		UpdateResult UpdateGtGpCustomField(Int32 cfId);

		/// <param name="compId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CreateProjectFromAirTableAsync(Int32 compId,AirtableRecord record);

		/// <param name="compId"></param>
		/// <returns></returns>
		UpdateResultWithId CreateProjectFromAirTable(Int32 compId,AirtableRecord record);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAirTablesConfigAsync();

		/// <returns></returns>
		AirTablesConfig GetAirTablesConfig();


		/// <returns></returns>
		Task<HttpResponseMessage> TestAirTableConnexionAsync(AirTablesConfig config);

		/// <returns></returns>
		UpdateResult TestAirTableConnexion(AirTablesConfig config);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAirTablesFieldsAsync(AirTablesConfig config);

		/// <returns></returns>
		List<String> GetAirTablesFields(AirTablesConfig config);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveAirTablesConfigAsync(AirTablesConfig config);

		/// <returns></returns>
		UpdateResult SaveAirTablesConfig(AirTablesConfig config);


		/// <returns></returns>
		Task<HttpResponseMessage> GetLuccaConfigAsync();

		/// <returns></returns>
		LuccaConfig GetLuccaConfig();


		/// <returns></returns>
		Task<HttpResponseMessage> GetLuccaErrorsAsync();

		/// <returns></returns>
		List<LuccaError> GetLuccaErrors();


		/// <returns></returns>
		Task<HttpResponseMessage> SaveLuccaConfigAsync(LuccaConfig conf);

		/// <returns></returns>
		UpdateResult SaveLuccaConfig(LuccaConfig conf);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IInvoicesClient : IClientBase
	{	

		/// <param name="invoiceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteInvoiceAsync(Int32 invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		UpdateResult DeleteInvoice(Int32 invoiceId);

		/// <param name="invoiceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetInvoiceDetailsAsync(Int32 invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		Invoiced GetInvoiceDetails(Int32 invoiceId);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllInvoicesForProjectAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		List<Invoiced> GetAllInvoicesForProject(Int32 projectId);

		/// <param name="invoiceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdatePaiedStatusAsync(Int32 invoiceId,Boolean newValue);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		UpdateResult UpdatePaiedStatus(Int32 invoiceId,Boolean newValue);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateOrUpdateInvoiceAsync(Invoiced invoice);

		/// <returns></returns>
		UpdateResultWithId CreateOrUpdateInvoice(Invoiced invoice);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IKpiClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetCapacityGraphByPosteAsync(DatesRangeFilteredRequest<GraphCapacityByOccupation> request);

		/// <returns></returns>
		GraphCapacityByOccupationValue GetCapacityGraphByPoste(DatesRangeFilteredRequest<GraphCapacityByOccupation> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCapacityGraphAsync(DatesRangeFilteredRequest<CapacityGraphComponent> request);

		/// <returns></returns>
		CapacityGraphComponentResults GetCapacityGraph(DatesRangeFilteredRequest<CapacityGraphComponent> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetRatioGraphAsync(DatesRangeFilteredRequest<RatioGraphComponent> request);

		/// <returns></returns>
		TimeByCustomFieldReturnType GetRatioGraph(DatesRangeFilteredRequest<RatioGraphComponent> request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetComparisonGraphAsync(DatesRangeFilteredRequest<ComparisonGraphComponent> request);

		/// <returns></returns>
		List<ComparisonGraphReturnType> GetComparisonGraph(DatesRangeFilteredRequest<ComparisonGraphComponent> request);

		/// <param name="startDate"></param>
		/// <param name="endDate"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTimeByCustomFieldGraphInternalAsync(DateTime startDate,DateTime endDate);

		/// <param name="startDate"></param>
		/// <param name="endDate"></param>
		/// <returns></returns>
		TimeByCustomFieldReturnType GetTimeByCustomFieldGraphInternal(DateTime startDate,DateTime endDate);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface ILoginClient : IClientBase
	{	

		/// <param name="apiKey"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ApiLoginAsync(String apiKey);

		/// <param name="apiKey"></param>
		/// <returns></returns>
		UpdateResultWithId ApiLogin(String apiKey);


		/// <returns></returns>
		Task<HttpResponseMessage> UserLoginAsync(LoginParams credentials);

		/// <returns></returns>
		UpdateResultWithId UserLogin(LoginParams credentials);


		/// <returns></returns>
		Task<HttpResponseMessage> IsLoggedAsync();

		/// <returns></returns>
		UpdateResultWithId IsLogged();


		/// <returns></returns>
		Task<HttpResponseMessage> LogOutAsync();

		/// <returns></returns>
		Boolean LogOut();


		/// <returns></returns>
		Task<HttpResponseMessage> ResetPasswordAsync(String email);

		/// <returns></returns>
		UpdateResult ResetPassword(String email);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IPlanningClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetPlanningAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <returns></returns>
		PlanningResult GetPlanning(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="companyId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllPlanifRealAsync(Int32 companyId);

		/// <param name="companyId"></param>
		/// <returns></returns>
		List<Double> GetAllPlanifReal(Int32 companyId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPlanifGraphAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <returns></returns>
		List<Double> GetPlanifGraph(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetIfRessHavePlanifAsync(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		Boolean GetIfRessHavePlanif(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="userId">Id of project or ressource</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetPlanningByIdAsync(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="userId">Id of project or ressource</param>
		/// <returns></returns>
		PlanningResult GetPlanningById(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdatePlanningDatesAsync(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data);

		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>
		/// <returns></returns>
		UpdateResult UpdatePlanningDates(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data);

		/// <param name="UserId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleProjectsListProjectNotCloseAsync(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="UserId"></param>
		/// <returns></returns>
		List<ProjectJS> GetAvalibleProjectsListProjectNotClose(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleProjectsListAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <returns></returns>
		List<ProjectJS> GetAvalibleProjectsList(DatesRangeFilteredRequestPagination<GetPlanningParams> search);

		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>

		/// <returns></returns>
		Task<HttpResponseMessage> ClearProjectPlanningAsync(Int32 projectId,Boolean clearTasks);

		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>
		/// <returns></returns>
		UpdateResult ClearProjectPlanning(Int32 projectId,Boolean clearTasks);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCombienedPlanningAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData);

		/// <returns></returns>
		PlanningResponse GetCombienedPlanning(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvailabilityAsync(GetPlanningLineRequest requestData);

		/// <returns></returns>
		PlanningResponse GetAvailability(GetPlanningLineRequest requestData);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IPlanningByTasksClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> SaveRecurenceAsync(DatesRangeRequest<RecurentPlanParams> Params);

		/// <returns></returns>
		UpdateResult SaveRecurence(DatesRangeRequest<RecurentPlanParams> Params);


		/// <returns></returns>
		Task<HttpResponseMessage> GetPlanningsAsync(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject);

		/// <returns></returns>
		TaskPlanningResult GetPlannings(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject);

		/// <param name="viewBy"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveViewByAsync(Int32 viewBy);

		/// <param name="viewBy"></param>
		/// <returns></returns>
		void SaveViewBy(Int32 viewBy);


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsForDatesAsync(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject);

		/// <returns></returns>
		List<ProjectContainer> GetProjectsForDates(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectForPlanningAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		ProjectContainer GetProjectForPlanning(Int32 projectId);

		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetRealHoursForTaskAsync(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates);

		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		Double GetRealHoursForTask(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates);

		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAvailableHoursForTaskAsync(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates);

		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		Double GetAvailableHoursForTask(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveChangesToPlanningsAsync(TaskPlanningsToSave plannings);

		/// <returns></returns>
		UpdateResult SaveChangesToPlannings(TaskPlanningsToSave plannings);


		/// <returns></returns>
		Task<HttpResponseMessage> ReversePlanningAsDoneAsync(DatesRangeRequest<RequestDeclareDone> dates);

		/// <returns></returns>
		UpdateResult ReversePlanningAsDone(DatesRangeRequest<RequestDeclareDone> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeletePlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResult DeletePlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> SetupDefaultWorkSpacesAsync();

		/// <returns></returns>
		UpdateResult SetupDefaultWorkSpaces();

		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetDefaultAllWorkSpaceAsync(Int32 taskId);

		/// <param name="taskId"></param>
		/// <returns></returns>
		Int32 GetDefaultAllWorkSpace(Int32 taskId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllTasksAsync(DatesRangeRequest<Int32> param);

		/// <returns></returns>
		List<ProjectTaskMinimal> GetAllTasks(DatesRangeRequest<Int32> param);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllWorkSpacesAsync();

		/// <returns></returns>
		List<TaskPlanningWorkSpace> GetAllWorkSpaces();


		/// <returns></returns>
		Task<HttpResponseMessage> SaveAllWorkSpacesAsync(List<TaskPlanningWorkSpace> workSpaces);

		/// <returns></returns>
		UpdateResult SaveAllWorkSpaces(List<TaskPlanningWorkSpace> workSpaces);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateWorkSpaceForPlanningAsync(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>
		/// <returns></returns>
		UpdateResult UpdateWorkSpaceForPlanning(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> LockTaskPlanningAsync(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>
		/// <returns></returns>
		UpdateResult LockTaskPlanning(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UnlockTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResult UnlockTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetLockTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResult GetLockTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCommentsForTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		List<TaskPlanningComment> GetCommentsForTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddCommentForTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		UpdateResultWithId AddCommentForTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> EditCommentForTaskPlanningAsync(Int32 commentId,String newText);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult EditCommentForTaskPlanning(Int32 commentId,String newText);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCommentForTaskPlanningAsync(Int32 commentId);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult DeleteCommentForTaskPlanning(Int32 commentId);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictsForRessourceAsync(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		ConflictsManagmentEntity GetConflictsForRessource(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictsForProjectAsync(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="projectId"></param>
		/// <returns></returns>
		ConflictsManagmentEntity GetConflictsForProject(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetBaselineAsync(Int32 ProjetId,Int32 RessourceId);

		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>
		/// <returns></returns>
		Double GetBaseline(Int32 ProjetId,Int32 RessourceId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetConflictsAsync(DatesRangeFilteredRequest<RequestConflicts> data);

		/// <returns></returns>
		List<ConflictsManagmentEntity> GetConflicts(DatesRangeFilteredRequest<RequestConflicts> data);

		/// <param name="cardId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateUnitPlaningAsync(Int32 cardId,ConflictsPlanning data);

		/// <param name="cardId"></param>
		/// <returns></returns>
		UpdateResultWithId UpdateUnitPlaning(Int32 cardId,ConflictsPlanning data);


		/// <returns></returns>
		Task<HttpResponseMessage> DeclarePlanningAsDoneAsync(DatesRangeRequest<RequestDeclareDone> dates);

		/// <returns></returns>
		UpdateResult DeclarePlanningAsDone(DatesRangeRequest<RequestDeclareDone> dates);
				
	}
	
	public partial interface IProfileImageClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> UploadNewImageAsync();

		/// <returns></returns>
		UpdateResult UploadNewImage();


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteImageAsync();

		/// <returns></returns>
		UpdateResult DeleteImage();


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IProjectManagementClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> CopyProjectsAsync(ReplanProjectsRequest data);

		/// <returns></returns>
		UpdateResultWithId CopyProjects(ReplanProjectsRequest data);

		/// <param name="projectId"></param>
		/// <param name="userId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddUserToProjectAsync(Int32 projectId,Int32 userId);

		/// <param name="projectId"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		UpdateResult AddUserToProject(Int32 projectId,Int32 userId);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateProjectWithCustomFieldsAsync(ProjectJS project);

		/// <returns></returns>
		UpdateResultWithId CreateProjectWithCustomFields(ProjectJS project);


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsRessourcesAsync(DatesRangeRequest<RequestProjectResources> requestObject);

		/// <returns></returns>
		ProjectJS GetProjectsRessources(DatesRangeRequest<RequestProjectResources> requestObject);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTasksForProjectAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		List<ProjectTaskMinimal> GetTasksForProject(Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetLastActivityForProjectAsync(DatesRangeRequest<Int32> data);

		/// <returns></returns>
		List<ActivityLine> GetLastActivityForProject(DatesRangeRequest<Int32> data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllProjectsWithCustomFieldsAsync(DatesRangeFilteredRequest<Boolean> requestObject);

		/// <returns></returns>
		List<ProjectJS> GetAllProjectsWithCustomFields(DatesRangeFilteredRequest<Boolean> requestObject);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectDatesAndNameAsync(ProjectJSMainStats data);

		/// <returns></returns>
		UpdateResult UpdateProjectDatesAndName(ProjectJSMainStats data);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> OpenProjectAsync(Int32 projectId);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResult OpenProject(Int32 projectId);

		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ChangeDefaultWorkPlaceAsync(Int32 projectId,Int32 workPlaceId);

		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>
		/// <returns></returns>
		UpdateResult ChangeDefaultWorkPlace(Int32 projectId,Int32 workPlaceId);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CloseProjectAsync(Int32 projectId,Boolean deleteSurvey);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResult CloseProject(Int32 projectId,Boolean deleteSurvey);

		/// <param name="projectId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateProjectRessourcesAsync(Int32 projectId,List<RessourceStats> rs);

		/// <param name="projectId"></param>
		/// <returns></returns>
		UpdateResult UpdateProjectRessources(Int32 projectId,List<RessourceStats> rs);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IProjectStatesClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllStatesAsync();

		/// <returns></returns>
		List<ProjectState> GetAllStates();

		/// <param name="assignedStateId">Id of project state</param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateStateAsync(Int32 assignedStateId,String comment);

		/// <param name="assignedStateId">Id of project state</param>
		/// <returns></returns>
		UpdateResult UpdateState(Int32 assignedStateId,String comment);

		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddStateAsync(Int32 projectId,Int32 stateId,String comment);

		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>
		/// <returns></returns>
		UpdateResultWithId AddState(Int32 projectId,Int32 stateId,String comment);

		/// <param name="projectId">Id of project</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetStatesForProjectAsync(Int32 projectId);

		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		List<ProjectState> GetStatesForProject(Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IRapportsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectsNoFiltersAsync(SearchCriteriaRapports searchOptions);

		/// <returns></returns>
		ProjectTypeStats GetProjectsNoFilters(SearchCriteriaRapports searchOptions);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IRessourceClient : IClientBase
	{	

		/// <param name="userId"></param>
		/// <param name="includeData"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetUsergeneralInfoAsync(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates);

		/// <param name="userId"></param>
		/// <param name="includeData"></param>
		/// <returns></returns>
		RessourceGeneralInformations GetUsergeneralInfo(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IRolesManagementClient : IClientBase
	{	

		/// <param name="id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetRessourcesAsync(Int32 id);

		/// <param name="id"></param>
		/// <returns></returns>
		List<RessourceStats> GetRessources(Int32 id);


		/// <returns></returns>
		Task<HttpResponseMessage> GetRolesAsync();

		/// <returns></returns>
		List<RoleJS> GetRoles();


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateRoleAsync(RoleJS newRole);

		/// <returns></returns>
		UpdateResult UpdateRole(RoleJS newRole);


		/// <returns></returns>
		Task<HttpResponseMessage> AddRoleAsync(RoleJS item);

		/// <returns></returns>
		UpdateResultWithId AddRole(RoleJS item);


		/// <returns></returns>
		Task<HttpResponseMessage> SaveRolesAsync(List<RoleJS> newRoles);

		/// <returns></returns>
		UpdateResult SaveRoles(List<RoleJS> newRoles);

		/// <param name="roleId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsPermissionsAsync(Int32 roleId);

		/// <param name="roleId"></param>
		/// <returns></returns>
		List<CustomFieldPermissionJS> GetCustomFieldsPermissions(Int32 roleId);

		/// <param name="roleId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveCustomFieldsPermissionsAsync(Int32 roleId,List<CustomFieldPermissionJS> customFieldPermissions);

		/// <param name="roleId"></param>
		/// <returns></returns>
		Boolean SaveCustomFieldsPermissions(Int32 roleId,List<CustomFieldPermissionJS> customFieldPermissions);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface ISearchClient : IClientBase
	{	

		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchProjectsAsync(String searchStr,ViewSelect viewSelector);

		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		List<ProjectSearchResult> SearchProjects(String searchStr,ViewSelect viewSelector);

		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchRessourcesAsync(String searchStr,ViewSelect viewSelector);

		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		List<EmployeJS__> SearchRessources(String searchStr,ViewSelect viewSelector);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface ITasksClient : IClientBase
	{	

		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ImportFromTemplateAsync(String templateId,Int32 projectId,Boolean addTemplateResp);

		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>
		/// <returns></returns>
		UpdateResult ImportFromTemplate(String templateId,Int32 projectId,Boolean addTemplateResp);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateTaskAsync(ProjectTaskMinimal toCreate);

		/// <returns></returns>
		UpdateResultWithId CreateTask(ProjectTaskMinimal toCreate);

		/// <param name="taskId">Id of the task to delete</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTaskAsync(Int32 taskId);

		/// <param name="taskId">Id of the task to delete</param>
		/// <returns></returns>
		UpdateResult DeleteTask(Int32 taskId);


		/// <returns></returns>
		Task<HttpResponseMessage> DeleteTasksAsync(Int32[] tasksId);

		/// <returns></returns>
		UpdateResult DeleteTasks(Int32[] tasksId);

		/// <param name="taskId"></param>
		/// <param name="parentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateTaskAsync(Int32 taskId,Int32 parentId,RequesTasks requestTask);

		/// <param name="taskId"></param>
		/// <param name="parentId"></param>
		/// <returns></returns>
		UpdateResult UpdateTask(Int32 taskId,Int32 parentId,RequesTasks requestTask);

		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCustomFieldsForTaskAsync(Int32 taskId,Int32 projectId,Boolean noUnique);

		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		List<CustomFieldJs> GetCustomFieldsForTask(Int32 taskId,Int32 projectId,Boolean noUnique);

		/// <param name="taskId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetIfTaskHavePlanifAsync(Int32 taskId,RequesTasks requestTask);

		/// <param name="taskId"></param>
		/// <returns></returns>
		Boolean GetIfTaskHavePlanif(Int32 taskId,RequesTasks requestTask);


		/// <returns></returns>
		Task<HttpResponseMessage> GetIfTasksHavePlanifAsync(RequestSelectedTasks data);

		/// <returns></returns>
		Boolean GetIfTasksHavePlanif(RequestSelectedTasks data);


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateSelectedTasksInfoAsync(RequestSelectedTasks data);

		/// <returns></returns>
		UpdateResult UpdateSelectedTasksInfo(RequestSelectedTasks data);

		/// <param name="projectId">Id of the project to delete</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllProjectRessourcesAsync(Int32 projectId,RequesTasks dates);

		/// <param name="projectId">Id of the project to delete</param>
		/// <returns></returns>
		List<EmployeJS> GetAllProjectRessources(Int32 projectId,RequesTasks dates);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllStatesAsync();

		/// <returns></returns>
		List<TaskState> GetAllStates();

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTasksNoManaDireCheckAsync(Int32 ressourceId,DatesRangeRequest<Object> dates);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		List<ProjectWithTasks> GetTasksNoManaDireCheck(Int32 ressourceId,DatesRangeRequest<Object> dates);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTaskByIdAsync(DatesRangeRequest<Int32> criteria);

		/// <returns></returns>
		ProjectTask GetTaskById(DatesRangeRequest<Int32> criteria);

		/// <param name="projectId">Id of the project</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetProjectWorkPlaceAsync(Int32 projectId);

		/// <param name="projectId">Id of the project</param>
		/// <returns></returns>
		Nullable<Int32> GetProjectWorkPlace(Int32 projectId);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface ITimesheetsClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetTimesheetAsync(GetTimesheetRequest args);

		/// <returns></returns>
		TimeSheetReduced GetTimesheet(GetTimesheetRequest args);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTimesheetFromProjectAsync(GetTimesheetFromProjectRequest args);

		/// <returns></returns>
		TimeSheetReduced GetTimesheetFromProject(GetTimesheetFromProjectRequest args);


		/// <returns></returns>
		Task<HttpResponseMessage> GetUsersAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <returns></returns>
		List<MinimalEmployeeData> GetUsers(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetUsersNotSubmittedTimesheetsAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <returns></returns>
		NotSubmitedTimesheetsResponse GetUsersNotSubmittedTimesheets(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetSubmitDetailByDateAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <returns></returns>
		List<TimeSheetRessourceDetail> GetSubmitDetailByDate(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);


		/// <returns></returns>
		Task<HttpResponseMessage> SendNotifToUserNotSubmitAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);

		/// <returns></returns>
		UpdateResult SendNotifToUserNotSubmit(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data);


		/// <returns></returns>
		Task<HttpResponseMessage> GetSummariesAsync(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request);

		/// <returns></returns>
		List<TimeSheetReduced> GetSummaries(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveTimesheetAsync(Int32 ressourceId,TimeSheetReduced time);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResultWithId SaveTimesheet(Int32 ressourceId,TimeSheetReduced time);

		/// <param name="timesheetId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetGeneralCommentsTimesheetAsync(Int32 timesheetId);

		/// <param name="timesheetId"></param>
		/// <returns></returns>
		List<TimesheetGeneralComment> GetGeneralCommentsTimesheet(Int32 timesheetId);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> EditGeneralCommentAsync(Int32 commentId,String newText);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult EditGeneralComment(Int32 commentId,String newText);

		/// <param name="commentId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteGeneralCommentAsync(Int32 commentId);

		/// <param name="commentId"></param>
		/// <returns></returns>
		UpdateResult DeleteGeneralComment(Int32 commentId);

		/// <param name="timesheetId">id of the timesheet</param>
		/// <param name="comment">text of the comment</param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddGeneralTimesheetCommentsAsync(Int32 timesheetId,String comment);

		/// <param name="timesheetId">id of the timesheet</param>
		/// <param name="comment">text of the comment</param>
		/// <returns></returns>
		UpdateResultWithId AddGeneralTimesheetComments(Int32 timesheetId,String comment);

		/// <param name="ressourceId"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SaveTimesheetCommentsAsync(Int32 ressourceId,TimeSheetReduced time);

		/// <param name="ressourceId"></param>
		/// <returns></returns>
		UpdateResultWithId SaveTimesheetComments(Int32 ressourceId,TimeSheetReduced time);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface ITranslationsClient : IClientBase
	{	

		/// <param name="pageName"></param>
		/// <param name="isControl"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTranslationsAsync(String pageName,Boolean isControl);

		/// <param name="pageName"></param>
		/// <param name="isControl"></param>
		/// <returns></returns>
		List<TranslationText> GetTranslations(String pageName,Boolean isControl);

		/// <param name="isControl"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllTranslationsAsync(Boolean isControl,List<String> pagesNames);

		/// <param name="isControl"></param>
		/// <returns></returns>
		List<TranslationGroupText> GetAllTranslations(Boolean isControl,List<String> pagesNames);


		/// <returns></returns>
		Task<HttpResponseMessage> GetAllLangsAsync();

		/// <returns></returns>
		List<LangDefinition> GetAllLangs();

		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> ChangeLanguageAsync(String newCulture,Boolean origUser);

		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>
		/// <returns></returns>
		UpdateResult ChangeLanguage(String newCulture,Boolean origUser);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IUserProfileClient : IClientBase
	{	

		/// <param name="password"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> Enable2FAAsync(String password);

		/// <param name="password"></param>
		/// <returns></returns>
		Enable2FAResult Enable2FA(String password);


		/// <returns></returns>
		Task<HttpResponseMessage> Activate2FAAsync(Activate2FARequest request);

		/// <returns></returns>
		UpdateResult Activate2FA(Activate2FARequest request);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTimesheetRemindersAsync();

		/// <returns></returns>
		List<TriggerWraper> GetTimesheetReminders();

		/// <param name="ressourceId">Optional</param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetDefinedTriggertsAsync(Int32 ressourceId);

		/// <param name="ressourceId">Optional</param>
		/// <returns></returns>
		List<TriggerWraper> GetDefinedTriggerts(Int32 ressourceId);

		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteCustomTriggerAsync(Guid nuid,Int32 ressourceId);

		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>
		/// <returns></returns>
		UpdateResult DeleteCustomTrigger(Guid nuid,Int32 ressourceId);

		/// <param name="ressourceId">USer to add notification to. (Optional)</param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddCustomNotificationAsync(Int32 ressourceId,List<BaseBeeyeTrigger> triggers);

		/// <param name="ressourceId">USer to add notification to. (Optional)</param>
		/// <returns></returns>
		UpdateResult AddCustomNotification(Int32 ressourceId,List<BaseBeeyeTrigger> triggers);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCountriesAsync();

		/// <returns></returns>
		IDictionary<String, String> GetCountries();

		/// <param name="country"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetTimeZonesAsync(String country);

		/// <param name="country"></param>
		/// <returns></returns>
		IDictionary<String, String> GetTimeZones(String country);


		/// <returns></returns>
		Task<HttpResponseMessage> GetCountryFromTimeZoneAsync(String timeZone);

		/// <returns></returns>
		String GetCountryFromTimeZone(String timeZone);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}
	
	public partial interface IWebHooksClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAvalibleWebHooksAsync();

		/// <returns></returns>
		List<BeeyeWebHook> GetAvalibleWebHooks();


		/// <returns></returns>
		Task<HttpResponseMessage> GetActiveWebHooksAsync();

		/// <returns></returns>
		List<ActiveBeeyeWebHook> GetActiveWebHooks();


		/// <returns></returns>
		Task<HttpResponseMessage> UpdateWebHooksAsync(List<ActiveBeeyeWebHook> activeHooks);

		/// <returns></returns>
		UpdateResult UpdateWebHooks(List<ActiveBeeyeWebHook> activeHooks);


		/// <returns></returns>
		Task<HttpResponseMessage> GetTextAsync(TranslationLine line);

		/// <returns></returns>
		String GetText(TranslationLine line);
				
	}

}
#endregion

#region Clients
namespace WebApi.Proxies.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.MyWebApiProxyBaseAddress)
			};
		}
		
		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
			var content = response.Content.ReadAsStringAsync().Result;
			throw new WebApiProxyResponseException(response.StatusCode, content);			
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.MyWebApiProxyBaseAddress)
			};
		}

		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString());
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// Helper class to access all clients at once
	/// </summary>
	public partial class WebApiClients
	{
		public BeeyeAIClient BeeyeAI { get; private set; }
		public ClientsManagmentClient ClientsManagment { get; private set; }
		public ConflictsClient Conflicts { get; private set; }
		public CustomFieldsClient CustomFields { get; private set; }
		public DataSharingClient DataSharing { get; private set; }
		public DirectionsClient Directions { get; private set; }
		public EmployesClient Employes { get; private set; }
		public ExpensesClient Expenses { get; private set; }
		public FastPlanningClient FastPlanning { get; private set; }
		public HelperWebClient HelperWeb { get; private set; }
		public HumanRessourcesClient HumanRessources { get; private set; }
		public IntegrationsClient Integrations { get; private set; }
		public InvoicesClient Invoices { get; private set; }
		public KpiClient Kpi { get; private set; }
		public LoginClient Login { get; private set; }
		public PlanningClient Planning { get; private set; }
		public PlanningByTasksClient PlanningByTasks { get; private set; }
		public ProfileImageClient ProfileImage { get; private set; }
		public ProjectManagementClient ProjectManagement { get; private set; }
		public ProjectStatesClient ProjectStates { get; private set; }
		public RapportsClient Rapports { get; private set; }
		public RessourceClient Ressource { get; private set; }
		public RolesManagementClient RolesManagement { get; private set; }
		public SearchClient Search { get; private set; }
		public TasksClient Tasks { get; private set; }
		public TimesheetsClient Timesheets { get; private set; }
		public TranslationsClient Translations { get; private set; }
		public UserProfileClient UserProfile { get; private set; }
		public WebHooksClient WebHooks { get; private set; }
		
        protected IEnumerable<Interfaces.IClientBase> Clients
        {
            get
            {
				yield return BeeyeAI;
				yield return ClientsManagment;
				yield return Conflicts;
				yield return CustomFields;
				yield return DataSharing;
				yield return Directions;
				yield return Employes;
				yield return Expenses;
				yield return FastPlanning;
				yield return HelperWeb;
				yield return HumanRessources;
				yield return Integrations;
				yield return Invoices;
				yield return Kpi;
				yield return Login;
				yield return Planning;
				yield return PlanningByTasks;
				yield return ProfileImage;
				yield return ProjectManagement;
				yield return ProjectStates;
				yield return Rapports;
				yield return Ressource;
				yield return RolesManagement;
				yield return Search;
				yield return Tasks;
				yield return Timesheets;
				yield return Translations;
				yield return UserProfile;
				yield return WebHooks;
            }
        }

		public WebApiClients(Uri baseAddress = null)
		{
            if (baseAddress != null)
                Configuration.MyWebApiProxyBaseAddress = baseAddress.AbsoluteUri;

			BeeyeAI = new BeeyeAIClient();
			ClientsManagment = new ClientsManagmentClient();
			Conflicts = new ConflictsClient();
			CustomFields = new CustomFieldsClient();
			DataSharing = new DataSharingClient();
			Directions = new DirectionsClient();
			Employes = new EmployesClient();
			Expenses = new ExpensesClient();
			FastPlanning = new FastPlanningClient();
			HelperWeb = new HelperWebClient();
			HumanRessources = new HumanRessourcesClient();
			Integrations = new IntegrationsClient();
			Invoices = new InvoicesClient();
			Kpi = new KpiClient();
			Login = new LoginClient();
			Planning = new PlanningClient();
			PlanningByTasks = new PlanningByTasksClient();
			ProfileImage = new ProfileImageClient();
			ProjectManagement = new ProjectManagementClient();
			ProjectStates = new ProjectStatesClient();
			Rapports = new RapportsClient();
			Ressource = new RessourceClient();
			RolesManagement = new RolesManagementClient();
			Search = new SearchClient();
			Tasks = new TasksClient();
			Timesheets = new TimesheetsClient();
			Translations = new TranslationsClient();
			UserProfile = new UserProfileClient();
			WebHooks = new WebHooksClient();
		}

        public void SetAuthentication(AuthenticationHeaderValue auth)
        {
            foreach (var client in Clients)
                client.HttpClient.DefaultRequestHeaders.Authorization = auth;
        }
		
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var client in Clients)
                    client.Dispose();
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

		~WebApiClients() 
		{
            Dispose(false);
		}
	}

	/// <summary>
	/// 
	/// </summary>
	public partial class BeeyeAIClient : ClientBase, Interfaces.IBeeyeAIClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public BeeyeAIClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public BeeyeAIClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SuggestTop5RessourcesAsyncMsg(DatesRangeFilteredRequestPagination<RecommendationRequest> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<RecommendationRequest>>("api/BeeyeAI", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SuggestTop5RessourcesAsync(DatesRangeFilteredRequestPagination<RecommendationRequest> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<RecommendationRequest>>("api/BeeyeAI", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<EmployeJS__> SuggestTop5Ressources(DatesRangeFilteredRequestPagination<RecommendationRequest> request)
		{
			var result = Task.Run(() => SuggestTop5RessourcesAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/BeeyeAI");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/BeeyeAI");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ClientsManagmentClient : ClientBase, Interfaces.IClientsManagmentClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ClientsManagmentClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ClientsManagmentClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Used to get the list of all clients with all relative data.
		/// If user doesn't have complete licence, only names are returned
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetClientsListAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/clients/GetClientsList");
		}

		/// <summary>
		/// Used to get the list of all clients with all relative data.
		/// If user doesn't have complete licence, only names are returned
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClientsListAsync()
		{
			return await HttpClient.GetAsync("api/v1/clients/GetClientsList");
		}

		/// <summary>
		/// Used to get the list of all clients with all relative data.
		/// If user doesn't have complete licence, only names are returned
		/// </summary>
		public virtual List<Client> GetClientsList()
		{
			var result = Task.Run(() => GetClientsListAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Client>>().Result;
			 		}

		/// <summary>
		/// Getting information on 1 client by ID
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetClientByIdAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/clients/GetClient?id=" + id);
		}

		/// <summary>
		/// Getting information on 1 client by ID
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClientByIdAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/clients/GetClient?id=" + id);
		}

		/// <summary>
		/// Getting information on 1 client by ID
		/// </summary>
		/// <param name="id"></param>
		public virtual Client GetClientById(Int32 id)
		{
			var result = Task.Run(() => GetClientByIdAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Client>().Result;
			 		}

		/// <summary>
		/// Adding new client
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateClientAsyncMsg(Client value)
		{
			return await HttpClient.PostAsJsonAsync<Client>("api/v1/clients/CreateClient", value);
		}

		/// <summary>
		/// Adding new client
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateClientAsync(Client value)
		{
			return await HttpClient.PostAsJsonAsync<Client>("api/v1/clients/CreateClient", value);
		}

		/// <summary>
		/// Adding new client
		/// </summary>
		public virtual UpdateResultWithId CreateClient(Client value)
		{
			var result = Task.Run(() => CreateClientAsyncMsg(value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Update information on one client
		/// </summary>
		/// <param name="id"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateClientAsyncMsg(Int32 id,Client value)
		{
			return await HttpClient.PutAsJsonAsync<Client>("api/v1/clients/UpdateClient?id=" + id, value);
		}

		/// <summary>
		/// Update information on one client
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateClientAsync(Int32 id,Client value)
		{
			return await HttpClient.PutAsJsonAsync<Client>("api/v1/clients/UpdateClient?id=" + id, value);
		}

		/// <summary>
		/// Update information on one client
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult UpdateClient(Int32 id,Client value)
		{
			var result = Task.Run(() => UpdateClientAsyncMsg(id, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Delete multiple clients
		/// </summary>
		/// <param name="ids"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteMultipleClientsAsyncMsg(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/clients/DeleteMultipleClients", ids);
		}

		/// <summary>
		/// Delete multiple clients
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteMultipleClientsAsync(Int32[] ids)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/clients/DeleteMultipleClients", ids);
		}

		/// <summary>
		/// Delete multiple clients
		/// </summary>
		public virtual UpdateResult DeleteMultipleClients(Int32[] ids)
		{
			var result = Task.Run(() => DeleteMultipleClientsAsyncMsg(ids)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deleting one client
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteClientAsyncMsg(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/clients/DeleteClient?id=" + id);
		}

		/// <summary>
		/// Deleting one client
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteClientAsync(Int32 id)
		{
			return await HttpClient.DeleteAsync("api/v1/clients/DeleteClient?id=" + id);
		}

		/// <summary>
		/// Deleting one client
		/// </summary>
		/// <param name="id"></param>
		public virtual UpdateResult DeleteClient(Int32 id)
		{
			var result = Task.Run(() => DeleteClientAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/ClientsManagment");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/ClientsManagment");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller allows employees CRUD operations
	/// </summary>
	public partial class ConflictsClient : ClientBase, Interfaces.IConflictsClient
	{		

		/// <summary>
		/// This controller allows employees CRUD operations
		/// </summary>
		public ConflictsClient() : base()
		{
		}

		/// <summary>
		/// This controller allows employees CRUD operations
		/// </summary>
		public ConflictsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> testAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/conflict/test");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> testAsync()
		{
			return await HttpClient.GetAsync("api/v1/conflict/test");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult test()
		{
			var result = Task.Run(() => testAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReassingAsyncMsg(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/conflict/Reassing", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReassingAsync(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/conflict/Reassing", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult Reassing(PlanParams Params)
		{
			var result = Task.Run(() => ReassingAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SavePlanniAsyncMsg(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/conflict/SavePlanni", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SavePlanniAsync(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/conflict/SavePlanni", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult SavePlanni(PlanParams Params)
		{
			var result = Task.Run(() => SavePlanniAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictAsyncMsg(DatesRangeFilteredRequest<ConflictParams> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ConflictParams>>("api/v1/conflict/GetConflict", param);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictAsync(DatesRangeFilteredRequest<ConflictParams> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ConflictParams>>("api/v1/conflict/GetConflict", param);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<Conflict> GetConflict(DatesRangeFilteredRequest<ConflictParams> param)
		{
			var result = Task.Run(() => GetConflictAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Conflict>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Conflicts");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Conflicts");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Manage custom fields and thier values
	/// </summary>
	public partial class CustomFieldsClient : ClientBase, Interfaces.ICustomFieldsClient
	{		

		/// <summary>
		/// Manage custom fields and thier values
		/// </summary>
		public CustomFieldsClient() : base()
		{
		}

		/// <summary>
		/// Manage custom fields and thier values
		/// </summary>
		public CustomFieldsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllCustomFieldsAsyncMsg(Boolean takeHidden,Boolean takeCalculHard)
		{
			return await HttpClient.GetAsync("api/customFields/all/" + takeHidden + "/" + takeCalculHard);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllCustomFieldsAsync(Boolean takeHidden,Boolean takeCalculHard)
		{
			return await HttpClient.GetAsync("api/customFields/all/" + takeHidden + "/" + takeCalculHard);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeHidden"></param>
		/// <param name="takeCalculHard"></param>
		public virtual List<CustomFieldJs> GetAllCustomFields(Boolean takeHidden,Boolean takeCalculHard)
		{
			var result = Task.Run(() => GetAllCustomFieldsAsyncMsg(takeHidden, takeCalculHard)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckUniqueValueAsyncMsg(Int32 customFieldId,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/checkUniqueValue/" + customFieldId, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckUniqueValueAsync(Int32 customFieldId,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/checkUniqueValue/" + customFieldId, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		public virtual UpdateResult CheckUniqueValue(Int32 customFieldId,CustomFieldValue value)
		{
			var result = Task.Run(() => CheckUniqueValueAsyncMsg(customFieldId, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateCustomFieldValueAsyncMsg(Int32 customFieldId,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/updateValue/" + customFieldId, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateCustomFieldValueAsync(Int32 customFieldId,CustomFieldValue value)
		{
			return await HttpClient.PutAsJsonAsync<CustomFieldValue>("api/customFields/updateValue/" + customFieldId, value);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="customFieldId"></param>
		public virtual UpdateResultWithId UpdateCustomFieldValue(Int32 customFieldId,CustomFieldValue value)
		{
			var result = Task.Run(() => UpdateCustomFieldValueAsyncMsg(customFieldId, value)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/CustomFields");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/CustomFields");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller manages rapports and dashboards sharing / import
	/// </summary>
	public partial class DataSharingClient : ClientBase, Interfaces.IDataSharingClient
	{		

		/// <summary>
		/// This controller manages rapports and dashboards sharing / import
		/// </summary>
		public DataSharingClient() : base()
		{
		}

		/// <summary>
		/// This controller manages rapports and dashboards sharing / import
		/// </summary>
		public DataSharingClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// returns a list of all Roles, Titles, Teams and employes for the company
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleShareTargetsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getTargets");
		}

		/// <summary>
		/// returns a list of all Roles, Titles, Teams and employes for the company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleShareTargetsAsync()
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getTargets");
		}

		/// <summary>
		/// returns a list of all Roles, Titles, Teams and employes for the company
		/// </summary>
		public virtual DataShareTargetsHolder GetAvalibleShareTargets()
		{
			var result = Task.Run(() => GetAvalibleShareTargetsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<DataShareTargetsHolder>().Result;
			 		}

		/// <summary>
		/// returns a list of shared reports with current user
		/// </summary>
		/// <param name="reportType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSharedReportsAsyncMsg(ReportType reportType)
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getSharedReports/" + reportType);
		}

		/// <summary>
		/// returns a list of shared reports with current user
		/// </summary>
		/// <param name="reportType">The report type (projects, ressources, tasks)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSharedReportsAsync(ReportType reportType)
		{
			return await HttpClient.GetAsync("api/v1/dataShare/getSharedReports/" + reportType);
		}

		/// <summary>
		/// returns a list of shared reports with current user
		/// </summary>
		/// <param name="reportType">The report type (projects, ressources, tasks)</param>
		public virtual List<ShareInfos> GetSharedReports(ReportType reportType)
		{
			var result = Task.Run(() => GetSharedReportsAsyncMsg(reportType)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ShareInfos>>().Result;
			 		}

		/// <summary>
		/// Shares user's report
		/// </summary>
		/// <param name="dataToShare">Informations about report to share. Dates are optinal.DatesRangeFilteredRequest is used to mostly hold filters</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ShareReportAsyncMsg(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ShareRapportHelper>>("api/v1/dataShare/shareReport", dataToShare);
		}

		/// <summary>
		/// Shares user's report
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ShareReportAsync(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ShareRapportHelper>>("api/v1/dataShare/shareReport", dataToShare);
		}

		/// <summary>
		/// Shares user's report
		/// </summary>
		public virtual UpdateResult ShareReport(DatesRangeFilteredRequest<ShareRapportHelper> dataToShare)
		{
			var result = Task.Run(() => ShareReportAsyncMsg(dataToShare)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="reportType"></param>
		/// <param name="toImport"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ImportReportsAsyncMsg(ReportType reportType,Guid[] toImport)
		{
			return await HttpClient.PostAsJsonAsync<Guid[]>("api/v1/dataShare/shareReport/" + reportType, toImport);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="reportType"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ImportReportsAsync(ReportType reportType,Guid[] toImport)
		{
			return await HttpClient.PostAsJsonAsync<Guid[]>("api/v1/dataShare/shareReport/" + reportType, toImport);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="reportType"></param>
		public virtual UpdateResultWithId ImportReports(ReportType reportType,Guid[] toImport)
		{
			var result = Task.Run(() => ImportReportsAsyncMsg(reportType, toImport)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/DataSharing");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/DataSharing");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller manages divisions.
	/// </summary>
	public partial class DirectionsClient : ClientBase, Interfaces.IDirectionsClient
	{		

		/// <summary>
		/// This controller manages divisions.
		/// </summary>
		public DirectionsClient() : base()
		{
		}

		/// <summary>
		/// This controller manages divisions.
		/// </summary>
		public DirectionsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Get the full org chart of company
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDirectionsOrgChartAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsOrgChart");
		}

		/// <summary>
		/// Get the full org chart of company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDirectionsOrgChartAsync()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsOrgChart");
		}

		/// <summary>
		/// Get the full org chart of company
		/// </summary>
		public virtual DirectionModelOrgChart GetDirectionsOrgChart()
		{
			var result = Task.Run(() => GetDirectionsOrgChartAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<DirectionModelOrgChart>().Result;
			 		}

		/// <summary>
		/// Get the the list of all acessible directions for current user
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDirectionsListForUserAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsListForUser");
		}

		/// <summary>
		/// Get the the list of all acessible directions for current user
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDirectionsListForUserAsync()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsListForUser");
		}

		/// <summary>
		/// Get the the list of all acessible directions for current user
		/// </summary>
		public virtual List<DirectionJS__> GetDirectionsListForUser()
		{
			var result = Task.Run(() => GetDirectionsListForUserAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<DirectionJS__>>().Result;
			 		}

		/// <summary>
		/// Get the the list of all directions
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllDirectionsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsList");
		}

		/// <summary>
		/// Get the the list of all directions
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllDirectionsAsync()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetDirectionsList");
		}

		/// <summary>
		/// Get the the list of all directions
		/// </summary>
		public virtual List<DirectionJS__> GetAllDirections()
		{
			var result = Task.Run(() => GetAllDirectionsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<DirectionJS__>>().Result;
			 		}

		/// <summary>
		/// Get the the list of sub direction for a direction
		/// </summary>
		/// <param name="dirid">Id of parent direction</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSubDirectionsAsyncMsg(Int32 dirid)
		{
			return await HttpClient.GetAsync("api/v1/directions/GetSubDirections?dirid=" + dirid);
		}

		/// <summary>
		/// Get the the list of sub direction for a direction
		/// </summary>
		/// <param name="dirid">Id of parent direction</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSubDirectionsAsync(Int32 dirid)
		{
			return await HttpClient.GetAsync("api/v1/directions/GetSubDirections?dirid=" + dirid);
		}

		/// <summary>
		/// Get the the list of sub direction for a direction
		/// </summary>
		/// <param name="dirid">Id of parent direction</param>
		public virtual List<DirectionJS__> GetSubDirections(Int32 dirid)
		{
			var result = Task.Run(() => GetSubDirectionsAsyncMsg(dirid)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<DirectionJS__>>().Result;
			 		}

		/// <summary>
		/// Update direction.
		/// If dirid == 0 : updates company name
		/// </summary>
		/// <param name="dirId"></param>
		/// <param name="direction"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateDirectionAsyncMsg(Int32 dirId,DirectionModelOrgChart direction)
		{
			return await HttpClient.PutAsJsonAsync<DirectionModelOrgChart>("api/v1/directions/UpdateDirection?dirId=" + dirId, direction);
		}

		/// <summary>
		/// Update direction.
		/// If dirid == 0 : updates company name
		/// </summary>
		/// <param name="dirId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateDirectionAsync(Int32 dirId,DirectionModelOrgChart direction)
		{
			return await HttpClient.PutAsJsonAsync<DirectionModelOrgChart>("api/v1/directions/UpdateDirection?dirId=" + dirId, direction);
		}

		/// <summary>
		/// Update direction.
		/// If dirid == 0 : updates company name
		/// </summary>
		/// <param name="dirId"></param>
		public virtual UpdateResult UpdateDirection(Int32 dirId,DirectionModelOrgChart direction)
		{
			var result = Task.Run(() => UpdateDirectionAsyncMsg(dirId, direction)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a ne direction
		/// </summary>
		/// <param name="direction"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateDirectionAsyncMsg(DirectionJS__ direction)
		{
			return await HttpClient.PostAsJsonAsync<DirectionJS__>("api/v1/directions/CreateDirection", direction);
		}

		/// <summary>
		/// Creates a ne direction
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateDirectionAsync(DirectionJS__ direction)
		{
			return await HttpClient.PostAsJsonAsync<DirectionJS__>("api/v1/directions/CreateDirection", direction);
		}

		/// <summary>
		/// Creates a ne direction
		/// </summary>
		public virtual UpdateResultWithId CreateDirection(DirectionJS__ direction)
		{
			var result = Task.Run(() => CreateDirectionAsyncMsg(direction)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Deletes a direction.
		/// </summary>
		/// <param name="dirId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteDirectionAsyncMsg(Int32 dirId)
		{
			return await HttpClient.DeleteAsync("api/v1/directions/DeleteDirection?dirId=" + dirId);
		}

		/// <summary>
		/// Deletes a direction.
		/// </summary>
		/// <param name="dirId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteDirectionAsync(Int32 dirId)
		{
			return await HttpClient.DeleteAsync("api/v1/directions/DeleteDirection?dirId=" + dirId);
		}

		/// <summary>
		/// Deletes a direction.
		/// </summary>
		/// <param name="dirId"></param>
		public virtual UpdateResult DeleteDirection(Int32 dirId)
		{
			var result = Task.Run(() => DeleteDirectionAsyncMsg(dirId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Checks if the direction with name "name" already exists
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckIfDirectionExistsAsyncMsg(String name)
		{
			return await HttpClient.GetAsync("api/v1/directions/CheckIfDirectionExists?name=" + name);
		}

		/// <summary>
		/// Checks if the direction with name "name" already exists
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckIfDirectionExistsAsync(String name)
		{
			return await HttpClient.GetAsync("api/v1/directions/CheckIfDirectionExists?name=" + name);
		}

		/// <summary>
		/// Checks if the direction with name "name" already exists
		/// </summary>
		/// <param name="name"></param>
		public virtual Boolean CheckIfDirectionExists(String name)
		{
			var result = Task.Run(() => CheckIfDirectionExistsAsyncMsg(name)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Get the list of all users who doens't already manage a direction
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPossibleResponsablesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetPossibleResponsables");
		}

		/// <summary>
		/// Get the list of all users who doens't already manage a direction
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPossibleResponsablesAsync()
		{
			return await HttpClient.GetAsync("api/v1/directions/GetPossibleResponsables");
		}

		/// <summary>
		/// Get the list of all users who doens't already manage a direction
		/// </summary>
		public virtual List<EmployeJS__> GetPossibleResponsables()
		{
			var result = Task.Run(() => GetPossibleResponsablesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Directions");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Directions");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller allows employees CRUD operations
	/// </summary>
	public partial class EmployesClient : ClientBase, Interfaces.IEmployesClient
	{		

		/// <summary>
		/// This controller allows employees CRUD operations
		/// </summary>
		public EmployesClient() : base()
		{
		}

		/// <summary>
		/// This controller allows employees CRUD operations
		/// </summary>
		public EmployesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Returns a list of all employees. Request object is bool : take or not deleted employees
		/// </summary>
		/// <param name="request">Filters to use. Start date and EndDate are optional. The bool value indicate if we should only return actif users
		/// If some projects filter is applied : only return users affected to these projects</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllRessourcesFilteredAsyncMsg(DatesRangeFilteredRequestPagination<Boolean> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<Boolean>>("api/v1/rh/employees/filtered", request);
		}

		/// <summary>
		/// Returns a list of all employees. Request object is bool : take or not deleted employees
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllRessourcesFilteredAsync(DatesRangeFilteredRequestPagination<Boolean> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<Boolean>>("api/v1/rh/employees/filtered", request);
		}

		/// <summary>
		/// Returns a list of all employees. Request object is bool : take or not deleted employees
		/// </summary>
		public virtual List<EmployeJS__> GetAllRessourcesFiltered(DatesRangeFilteredRequestPagination<Boolean> request)
		{
			var result = Task.Run(() => GetAllRessourcesFilteredAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// Returns a list of all employees
		/// </summary>
		/// <param name="takeOnlyActif">Only take not deleted employees</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllRessourcesAsyncMsg(Boolean takeOnlyActif)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/" + takeOnlyActif);
		}

		/// <summary>
		/// Returns a list of all employees
		/// </summary>
		/// <param name="takeOnlyActif">Only take not deleted employees</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllRessourcesAsync(Boolean takeOnlyActif)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/" + takeOnlyActif);
		}

		/// <summary>
		/// Returns a list of all employees
		/// </summary>
		/// <param name="takeOnlyActif">Only take not deleted employees</param>
		public virtual List<EmployeJS__> GetAllRessources(Boolean takeOnlyActif)
		{
			var result = Task.Run(() => GetAllRessourcesAsyncMsg(takeOnlyActif)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeOnlyActif"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllRessourcesWithCustomFieldsAsyncMsg(Boolean takeOnlyActif)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/withCustomFields/" + takeOnlyActif);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeOnlyActif"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllRessourcesWithCustomFieldsAsync(Boolean takeOnlyActif)
		{
			return await HttpClient.GetAsync("api/v1/rh/employees/withCustomFields/" + takeOnlyActif);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="takeOnlyActif"></param>
		public virtual List<EmployeJSWithCustomFields> GetAllRessourcesWithCustomFields(Boolean takeOnlyActif)
		{
			var result = Task.Run(() => GetAllRessourcesWithCustomFieldsAsyncMsg(takeOnlyActif)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJSWithCustomFields>>().Result;
			 		}

		/// <summary>
		/// Alows employe creation with minimum of information
		/// Note : Default role should be selected at company level or provided
		/// Note : Default title should be selected at company level or provided
		/// </summary>
		/// <param name="employe"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateEmployeAsyncMsg(MinimalEmployeCreation employe)
		{
			return await HttpClient.PostAsJsonAsync<MinimalEmployeCreation>("api/v1/rh/employees/create", employe);
		}

		/// <summary>
		/// Alows employe creation with minimum of information
		/// Note : Default role should be selected at company level or provided
		/// Note : Default title should be selected at company level or provided
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateEmployeAsync(MinimalEmployeCreation employe)
		{
			return await HttpClient.PostAsJsonAsync<MinimalEmployeCreation>("api/v1/rh/employees/create", employe);
		}

		/// <summary>
		/// Alows employe creation with minimum of information
		/// Note : Default role should be selected at company level or provided
		/// Note : Default title should be selected at company level or provided
		/// </summary>
		public virtual UpdateResultWithId CreateEmploye(MinimalEmployeCreation employe)
		{
			var result = Task.Run(() => CreateEmployeAsyncMsg(employe)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Gets the last activity for a user within dates range
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLastActivityForUserAsyncMsg(DatesRangeRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/rh/employees/GetLastActivity", data);
		}

		/// <summary>
		/// Gets the last activity for a user within dates range
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLastActivityForUserAsync(DatesRangeRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/rh/employees/GetLastActivity", data);
		}

		/// <summary>
		/// Gets the last activity for a user within dates range
		/// </summary>
		public virtual List<ActivityLine> GetLastActivityForUser(DatesRangeRequest<Int32> data)
		{
			var result = Task.Run(() => GetLastActivityForUserAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ActivityLine>>().Result;
			 		}

		/// <summary>
		/// Updates cost rate from today
		/// </summary>
		/// <param name="userId">User id</param>
		/// <param name="rate">New rate effectif from current date</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateEmployeCostRateAsyncMsg(Int32 userId,Double rate)
		{
			return await HttpClient.PostAsJsonAsync<Double>("api/v1/rh/employees/UpdateEmployeCostRate?userId=" + userId, rate);
		}

		/// <summary>
		/// Updates cost rate from today
		/// </summary>
		/// <param name="userId">User id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateEmployeCostRateAsync(Int32 userId,Double rate)
		{
			return await HttpClient.PostAsJsonAsync<Double>("api/v1/rh/employees/UpdateEmployeCostRate?userId=" + userId, rate);
		}

		/// <summary>
		/// Updates cost rate from today
		/// </summary>
		/// <param name="userId">User id</param>
		public virtual UpdateResult UpdateEmployeCostRate(Int32 userId,Double rate)
		{
			var result = Task.Run(() => UpdateEmployeCostRateAsyncMsg(userId, rate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="employeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ArchiveEmployeeAsyncMsg(Int32 employeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/rh/employees/ArchiveEmployee/" + employeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="employeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ArchiveEmployeeAsync(Int32 employeId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/rh/employees/ArchiveEmployee/" + employeId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="employeId"></param>
		public virtual UpdateResult ArchiveEmployee(Int32 employeId)
		{
			var result = Task.Run(() => ArchiveEmployeeAsyncMsg(employeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Check if Availability Problem with ressource for a list of projects return problemes projects
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <param name="param">param</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckAvailabilityProblemAsyncMsg(Int32 employeId,ReplaceRessource param)
		{
			return await HttpClient.PostAsJsonAsync<ReplaceRessource>("api/v1/rh/employees/CheckAvailabilityProblem/" + employeId, param);
		}

		/// <summary>
		/// Check if Availability Problem with ressource for a list of projects return problemes projects
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckAvailabilityProblemAsync(Int32 employeId,ReplaceRessource param)
		{
			return await HttpClient.PostAsJsonAsync<ReplaceRessource>("api/v1/rh/employees/CheckAvailabilityProblem/" + employeId, param);
		}

		/// <summary>
		/// Check if Availability Problem with ressource for a list of projects return problemes projects
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		public virtual List<Int32> CheckAvailabilityProblem(Int32 employeId,ReplaceRessource param)
		{
			var result = Task.Run(() => CheckAvailabilityProblemAsyncMsg(employeId, param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Int32>>().Result;
			 		}

		/// <summary>
		/// Replace ressource planning
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <param name="param">param</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReplaceRessourceAsyncMsg(Int32 employeId,ReplaceRessource param)
		{
			return await HttpClient.PostAsJsonAsync<ReplaceRessource>("api/v1/rh/employees/ReplaceRessource/" + employeId, param);
		}

		/// <summary>
		/// Replace ressource planning
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReplaceRessourceAsync(Int32 employeId,ReplaceRessource param)
		{
			return await HttpClient.PostAsJsonAsync<ReplaceRessource>("api/v1/rh/employees/ReplaceRessource/" + employeId, param);
		}

		/// <summary>
		/// Replace ressource planning
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		public virtual UpdateResult ReplaceRessource(Int32 employeId,ReplaceRessource param)
		{
			var result = Task.Run(() => ReplaceRessourceAsyncMsg(employeId, param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Moves a ressource to a different division.
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <param name="newDirectionId">New direction ID</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> MoveEmployeeToDirectionAsyncMsg(Int32 employeId,Int32 newDirectionId)
		{
			return await HttpClient.PostAsJsonAsync<Int32>("api/v1/rh/employees/MoveEmployeeToDirection/" + employeId, newDirectionId);
		}

		/// <summary>
		/// Moves a ressource to a different division.
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MoveEmployeeToDirectionAsync(Int32 employeId,Int32 newDirectionId)
		{
			return await HttpClient.PostAsJsonAsync<Int32>("api/v1/rh/employees/MoveEmployeeToDirection/" + employeId, newDirectionId);
		}

		/// <summary>
		/// Moves a ressource to a different division.
		/// </summary>
		/// <param name="employeId">Ressource ID</param>
		public virtual UpdateResult MoveEmployeeToDirection(Int32 employeId,Int32 newDirectionId)
		{
			var result = Task.Run(() => MoveEmployeeToDirectionAsyncMsg(employeId, newDirectionId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates tiers Id  for an employee
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="toUpdate">Contains tiersId. Other fields are ignored</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTiersIdAsyncMsg(Int32 userId,EmployeJS__ toUpdate)
		{
			return await HttpClient.PutAsJsonAsync<EmployeJS__>("api/v1/rh/employees/UpdateTiersId/" + userId, toUpdate);
		}

		/// <summary>
		/// Updates tiers Id  for an employee
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTiersIdAsync(Int32 userId,EmployeJS__ toUpdate)
		{
			return await HttpClient.PutAsJsonAsync<EmployeJS__>("api/v1/rh/employees/UpdateTiersId/" + userId, toUpdate);
		}

		/// <summary>
		/// Updates tiers Id  for an employee
		/// </summary>
		/// <param name="userId"></param>
		public virtual UpdateResult UpdateTiersId(Int32 userId,EmployeJS__ toUpdate)
		{
			var result = Task.Run(() => UpdateTiersIdAsyncMsg(userId, toUpdate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Employes");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Employes");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ExpensesClient : ClientBase, Interfaces.IExpensesClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ExpensesClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ExpensesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Get all informations for one expense
		/// </summary>
		/// <param name="expenseId">Id of the expense</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetExpenseInfoAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/expenses/" + expenseId);
		}

		/// <summary>
		/// Get all informations for one expense
		/// </summary>
		/// <param name="expenseId">Id of the expense</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetExpenseInfoAsync(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/expenses/" + expenseId);
		}

		/// <summary>
		/// Get all informations for one expense
		/// </summary>
		/// <param name="expenseId">Id of the expense</param>
		public virtual Expense GetExpenseInfo(Int32 expenseId)
		{
			var result = Task.Run(() => GetExpenseInfoAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Expense>().Result;
			 		}

		/// <summary>
		/// Return list of avalibles projects for expenses for current user
		/// </summary>
		/// <param name="data">Start and end dates of period</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleProjectsForDatesAsyncMsg(DatesRangeRequest<Object> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/expenses/getAvalibleUserProjectsForDates", data);
		}

		/// <summary>
		/// Return list of avalibles projects for expenses for current user
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleProjectsForDatesAsync(DatesRangeRequest<Object> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/expenses/getAvalibleUserProjectsForDates", data);
		}

		/// <summary>
		/// Return list of avalibles projects for expenses for current user
		/// </summary>
		public virtual List<SimpleProject> GetAvalibleProjectsForDates(DatesRangeRequest<Object> data)
		{
			var result = Task.Run(() => GetAvalibleProjectsForDatesAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SimpleProject>>().Result;
			 		}

		/// <summary>
		/// Return a list of custon defined taxes for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTaxesAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/taxes/getTaxes/" + expenseId);
		}

		/// <summary>
		/// Return a list of custon defined taxes for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTaxesAsync(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/taxes/getTaxes/" + expenseId);
		}

		/// <summary>
		/// Return a list of custon defined taxes for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		public virtual List<Taxe> GetTaxes(Int32 expenseId)
		{
			var result = Task.Run(() => GetTaxesAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Taxe>>().Result;
			 		}

		/// <summary>
		/// Returns a list of expenses types
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetExpensesTypesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/expenses/getExpensesTypes");
		}

		/// <summary>
		/// Returns a list of expenses types
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetExpensesTypesAsync()
		{
			return await HttpClient.GetAsync("api/v1/expenses/getExpensesTypes");
		}

		/// <summary>
		/// Returns a list of expenses types
		/// </summary>
		public virtual List<SpendingType> GetExpensesTypes()
		{
			var result = Task.Run(() => GetExpensesTypesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SpendingType>>().Result;
			 		}

		/// <summary>
		/// Creates a new tax, or updates existing
		/// </summary>
		/// <param name="t">Tax</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateTaxeAsyncMsg(Taxe t)
		{
			return await HttpClient.PostAsJsonAsync<Taxe>("api/v1/taxes/addOrUpdateTaxe", t);
		}

		/// <summary>
		/// Creates a new tax, or updates existing
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateTaxeAsync(Taxe t)
		{
			return await HttpClient.PostAsJsonAsync<Taxe>("api/v1/taxes/addOrUpdateTaxe", t);
		}

		/// <summary>
		/// Creates a new tax, or updates existing
		/// </summary>
		public virtual UpdateResultWithId AddOrUpdateTaxe(Taxe t)
		{
			var result = Task.Run(() => AddOrUpdateTaxeAsyncMsg(t)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Creates or updates a custom expense type
		/// </summary>
		/// <param name="t">Expense type</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrUpdateExpenseTypeAsyncMsg(SpendingType t)
		{
			return await HttpClient.PostAsJsonAsync<SpendingType>("api/v1/expenses/addOrUpdateExpenseType", t);
		}

		/// <summary>
		/// Creates or updates a custom expense type
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrUpdateExpenseTypeAsync(SpendingType t)
		{
			return await HttpClient.PostAsJsonAsync<SpendingType>("api/v1/expenses/addOrUpdateExpenseType", t);
		}

		/// <summary>
		/// Creates or updates a custom expense type
		/// </summary>
		public virtual UpdateResultWithId AddOrUpdateExpenseType(SpendingType t)
		{
			var result = Task.Run(() => AddOrUpdateExpenseTypeAsyncMsg(t)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Deletes taxe
		/// </summary>
		/// <param name="taxeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTaxeAsyncMsg(Int32 taxeId)
		{
			return await HttpClient.DeleteAsync("api/v1/taxes/deleteTaxe/" + taxeId);
		}

		/// <summary>
		/// Deletes taxe
		/// </summary>
		/// <param name="taxeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTaxeAsync(Int32 taxeId)
		{
			return await HttpClient.DeleteAsync("api/v1/taxes/deleteTaxe/" + taxeId);
		}

		/// <summary>
		/// Deletes taxe
		/// </summary>
		/// <param name="taxeId"></param>
		public virtual UpdateResultWithId DeleteTaxe(Int32 taxeId)
		{
			var result = Task.Run(() => DeleteTaxeAsyncMsg(taxeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Deletes expense type
		/// </summary>
		/// <param name="expenseTypeId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteExpenseTypeAsyncMsg(Int32 expenseTypeId)
		{
			return await HttpClient.DeleteAsync("api/v1/expenses/deleteExpensesType/" + expenseTypeId);
		}

		/// <summary>
		/// Deletes expense type
		/// </summary>
		/// <param name="expenseTypeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteExpenseTypeAsync(Int32 expenseTypeId)
		{
			return await HttpClient.DeleteAsync("api/v1/expenses/deleteExpensesType/" + expenseTypeId);
		}

		/// <summary>
		/// Deletes expense type
		/// </summary>
		/// <param name="expenseTypeId"></param>
		public virtual UpdateResultWithId DeleteExpenseType(Int32 expenseTypeId)
		{
			var result = Task.Run(() => DeleteExpenseTypeAsyncMsg(expenseTypeId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Add a new expense to project or edit exsting expense
		/// </summary>
		/// <param name="expense"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrEditProjectExpenseAsyncMsg(Expense expense)
		{
			return await HttpClient.PostAsJsonAsync<Expense>("api/v1/expenses/addOrEditProjectExpense", expense);
		}

		/// <summary>
		/// Add a new expense to project or edit exsting expense
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrEditProjectExpenseAsync(Expense expense)
		{
			return await HttpClient.PostAsJsonAsync<Expense>("api/v1/expenses/addOrEditProjectExpense", expense);
		}

		/// <summary>
		/// Add a new expense to project or edit exsting expense
		/// </summary>
		public virtual UpdateResultWithId AddOrEditProjectExpense(Expense expense)
		{
			var result = Task.Run(() => AddOrEditProjectExpenseAsyncMsg(expense)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Add files to expense. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddFilesToExpenseAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/expenses/addFilesToExpense/" + expenseId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add files to expense. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddFilesToExpenseAsync(Int32 expenseId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/expenses/addFilesToExpense/" + expenseId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add files to expense. Files should be transfered as Posted files in the request
		/// </summary>
		/// <param name="expenseId"></param>
		public virtual UpdateResultWithId AddFilesToExpense(Int32 expenseId)
		{
			var result = Task.Run(() => AddFilesToExpenseAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns a list of files for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFilesListForExpenseAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/expenses/getFilesListForExpense/" + expenseId);
		}

		/// <summary>
		/// Returns a list of files for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFilesListForExpenseAsync(Int32 expenseId)
		{
			return await HttpClient.GetAsync("api/v1/expenses/getFilesListForExpense/" + expenseId);
		}

		/// <summary>
		/// Returns a list of files for an expense
		/// </summary>
		/// <param name="expenseId"></param>
		public virtual List<UploadedFile> GetFilesListForExpense(Int32 expenseId)
		{
			var result = Task.Run(() => GetFilesListForExpenseAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<UploadedFile>>().Result;
			 		}

		/// <summary>
		/// Delets an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteExpenseAsyncMsg(Int32 expenseId)
		{
			return await HttpClient.DeleteAsync("api/v1/expenses/deleteExpense/" + expenseId);
		}

		/// <summary>
		/// Delets an expense
		/// </summary>
		/// <param name="expenseId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteExpenseAsync(Int32 expenseId)
		{
			return await HttpClient.DeleteAsync("api/v1/expenses/deleteExpense/" + expenseId);
		}

		/// <summary>
		/// Delets an expense
		/// </summary>
		/// <param name="expenseId"></param>
		public virtual UpdateResult DeleteExpense(Int32 expenseId)
		{
			var result = Task.Run(() => DeleteExpenseAsyncMsg(expenseId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Expenses");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Expenses");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller alows projects and ressources search
	/// </summary>
	public partial class FastPlanningClient : ClientBase, Interfaces.IFastPlanningClient
	{		

		/// <summary>
		/// This controller alows projects and ressources search
		/// </summary>
		public FastPlanningClient() : base()
		{
		}

		/// <summary>
		/// This controller alows projects and ressources search
		/// </summary>
		public FastPlanningClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="args"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsAsyncMsg(DatesRangeRequest<Boolean> args)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Boolean>>("api/v1/fastPlanning/getProjects", args);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsAsync(DatesRangeRequest<Boolean> args)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Boolean>>("api/v1/fastPlanning/getProjects", args);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ProjectFastPlanningResult> GetProjects(DatesRangeRequest<Boolean> args)
		{
			var result = Task.Run(() => GetProjectsAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectFastPlanningResult>>().Result;
			 		}

		/// <summary>
		/// Returns 2 lists of users avalible for dates
		/// </summary>
		/// <param name="args">Contains users already in project and other avalible users</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRessourcesAsyncMsg(DatesRangeRequest<GetRessourcesRequest> args)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<GetRessourcesRequest>>("api/v1/fastPlanning/getRessources", args);
		}

		/// <summary>
		/// Returns 2 lists of users avalible for dates
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRessourcesAsync(DatesRangeRequest<GetRessourcesRequest> args)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<GetRessourcesRequest>>("api/v1/fastPlanning/getRessources", args);
		}

		/// <summary>
		/// Returns 2 lists of users avalible for dates
		/// </summary>
		public virtual RessourcesForNewProject GetRessources(DatesRangeRequest<GetRessourcesRequest> args)
		{
			var result = Task.Run(() => GetRessourcesAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<RessourcesForNewProject>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckIfPlanifAsyncMsg(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/fastPlanning/checkIfPlanif", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckIfPlanifAsync(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/fastPlanning/checkIfPlanif", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult CheckIfPlanif(PlanParams Params)
		{
			var result = Task.Run(() => CheckIfPlanifAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SavePlanningRessourcesAsyncMsg(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/fastPlanning/savePlanningRessources", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SavePlanningRessourcesAsync(PlanParams Params)
		{
			return await HttpClient.PostAsJsonAsync<PlanParams>("api/v1/fastPlanning/savePlanningRessources", Params);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult SavePlanningRessources(PlanParams Params)
		{
			var result = Task.Run(() => SavePlanningRessourcesAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/FastPlanning");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/FastPlanning");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This is an internal "helper" controller.
	/// </summary>
	public partial class HelperWebClient : ClientBase, Interfaces.IHelperWebClient
	{		

		/// <summary>
		/// This is an internal "helper" controller.
		/// </summary>
		public HelperWebClient() : base()
		{
		}

		/// <summary>
		/// This is an internal "helper" controller.
		/// </summary>
		public HelperWebClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GenerateApiTokenAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/helper/generateApiKey");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateApiTokenAsync()
		{
			return await HttpClient.GetAsync("api/v1/helper/generateApiKey");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateApiToken()
		{
			var result = Task.Run(() => GenerateApiTokenAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="v"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UnsubscribeAllEmailAsyncMsg(Boolean v)
		{
			return await HttpClient.GetAsync("api/v1/helper/unsubscribe?v=" + v);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="v"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UnsubscribeAllEmailAsync(Boolean v)
		{
			return await HttpClient.GetAsync("api/v1/helper/unsubscribe?v=" + v);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="v"></param>
		public virtual Boolean UnsubscribeAllEmail(Boolean v)
		{
			var result = Task.Run(() => UnsubscribeAllEmailAsyncMsg(v)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/HelperWeb");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/HelperWeb");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This APIs are for skill managment and titles of users
	/// </summary>
	public partial class HumanRessourcesClient : ClientBase, Interfaces.IHumanRessourcesClient
	{		

		/// <summary>
		/// This APIs are for skill managment and titles of users
		/// </summary>
		public HumanRessourcesClient() : base()
		{
		}

		/// <summary>
		/// This APIs are for skill managment and titles of users
		/// </summary>
		public HumanRessourcesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Updates order of titles, if this option is enabled in company settings
		/// </summary>
		/// <param name="neworder"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTitlesOrderAsyncMsg(Dictionary<Int32, Int32> neworder)
		{
			return await HttpClient.PostAsJsonAsync<Dictionary<Int32, Int32>>("api/v1/rh/updateTitlesOrder", neworder);
		}

		/// <summary>
		/// Updates order of titles, if this option is enabled in company settings
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTitlesOrderAsync(Dictionary<Int32, Int32> neworder)
		{
			return await HttpClient.PostAsJsonAsync<Dictionary<Int32, Int32>>("api/v1/rh/updateTitlesOrder", neworder);
		}

		/// <summary>
		/// Updates order of titles, if this option is enabled in company settings
		/// </summary>
		public virtual UpdateResult UpdateTitlesOrder(Dictionary<Int32, Int32> neworder)
		{
			var result = Task.Run(() => UpdateTitlesOrderAsyncMsg(neworder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Returns the list of all avalible titles
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllTitlesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/rh/titles");
		}

		/// <summary>
		/// Returns the list of all avalible titles
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllTitlesAsync()
		{
			return await HttpClient.GetAsync("api/v1/rh/titles");
		}

		/// <summary>
		/// Returns the list of all avalible titles
		/// </summary>
		public virtual List<OccupationJS> GetAllTitles()
		{
			var result = Task.Run(() => GetAllTitlesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<OccupationJS>>().Result;
			 		}

		/// <summary>
		/// Returns list of all avalible levels for skills
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllSkillLevelsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/rh/skillLevels");
		}

		/// <summary>
		/// Returns list of all avalible levels for skills
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllSkillLevelsAsync()
		{
			return await HttpClient.GetAsync("api/v1/rh/skillLevels");
		}

		/// <summary>
		/// Returns list of all avalible levels for skills
		/// </summary>
		public virtual List<SkillLevelJs> GetAllSkillLevels()
		{
			var result = Task.Run(() => GetAllSkillLevelsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SkillLevelJs>>().Result;
			 		}

		/// <summary>
		/// Check If Can Delete Ressource
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckCanDeleteRessourceAsyncMsg(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/rh/checkCanDeleteRessource?ressourceId=" + ressourceId);
		}

		/// <summary>
		/// Check If Can Delete Ressource
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckCanDeleteRessourceAsync(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/rh/checkCanDeleteRessource?ressourceId=" + ressourceId);
		}

		/// <summary>
		/// Check If Can Delete Ressource
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual Boolean CheckCanDeleteRessource(Int32 ressourceId)
		{
			var result = Task.Run(() => CheckCanDeleteRessourceAsyncMsg(ressourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Delets one level of skill
		/// </summary>
		/// <param name="skillLevelId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteSkillLevelAsyncMsg(Int32 skillLevelId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skillLevels/" + skillLevelId);
		}

		/// <summary>
		/// Delets one level of skill
		/// </summary>
		/// <param name="skillLevelId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSkillLevelAsync(Int32 skillLevelId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skillLevels/" + skillLevelId);
		}

		/// <summary>
		/// Delets one level of skill
		/// </summary>
		/// <param name="skillLevelId"></param>
		public virtual UpdateResult DeleteSkillLevel(Int32 skillLevelId)
		{
			var result = Task.Run(() => DeleteSkillLevelAsyncMsg(skillLevelId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates order of all levels of skill
		/// </summary>
		/// <param name="newOrder"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeSkillLevelsOrderAsyncMsg(Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/rh/skillLevels/ChangeOrder", newOrder);
		}

		/// <summary>
		/// Updates order of all levels of skill
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeSkillLevelsOrderAsync(Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/rh/skillLevels/ChangeOrder", newOrder);
		}

		/// <summary>
		/// Updates order of all levels of skill
		/// </summary>
		public virtual UpdateResult ChangeSkillLevelsOrder(Int32[] newOrder)
		{
			var result = Task.Run(() => ChangeSkillLevelsOrderAsyncMsg(newOrder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a new skill level or updates existing
		/// </summary>
		/// <param name="skillLevel"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrEditSkillLevelAsyncMsg(SkillLevelJs skillLevel)
		{
			return await HttpClient.PostAsJsonAsync<SkillLevelJs>("api/v1/rh/skillLevels/addOrEdit", skillLevel);
		}

		/// <summary>
		/// Creates a new skill level or updates existing
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrEditSkillLevelAsync(SkillLevelJs skillLevel)
		{
			return await HttpClient.PostAsJsonAsync<SkillLevelJs>("api/v1/rh/skillLevels/addOrEdit", skillLevel);
		}

		/// <summary>
		/// Creates a new skill level or updates existing
		/// </summary>
		public virtual UpdateResultWithId AddOrEditSkillLevel(SkillLevelJs skillLevel)
		{
			var result = Task.Run(() => AddOrEditSkillLevelAsyncMsg(skillLevel)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Returns the list of all skills
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllSkillsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/rh/skills");
		}

		/// <summary>
		/// Returns the list of all skills
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllSkillsAsync()
		{
			return await HttpClient.GetAsync("api/v1/rh/skills");
		}

		/// <summary>
		/// Returns the list of all skills
		/// </summary>
		public virtual List<SkillJs> GetAllSkills()
		{
			var result = Task.Run(() => GetAllSkillsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<SkillJs>>().Result;
			 		}

		/// <summary>
		/// Deletes one skill
		/// </summary>
		/// <param name="skillId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteSkillAsyncMsg(Int32 skillId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skills/" + skillId);
		}

		/// <summary>
		/// Deletes one skill
		/// </summary>
		/// <param name="skillId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSkillAsync(Int32 skillId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/skills/" + skillId);
		}

		/// <summary>
		/// Deletes one skill
		/// </summary>
		/// <param name="skillId"></param>
		public virtual UpdateResult DeleteSkill(Int32 skillId)
		{
			var result = Task.Run(() => DeleteSkillAsyncMsg(skillId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates order of skills
		/// </summary>
		/// <param name="newOrder">Ids of all skills. The order will be preserved</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeSkillsOrderAsyncMsg(Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/rh/skills/ChangeOrder", newOrder);
		}

		/// <summary>
		/// Updates order of skills
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeSkillsOrderAsync(Int32[] newOrder)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/rh/skills/ChangeOrder", newOrder);
		}

		/// <summary>
		/// Updates order of skills
		/// </summary>
		public virtual UpdateResult ChangeSkillsOrder(Int32[] newOrder)
		{
			var result = Task.Run(() => ChangeSkillsOrderAsyncMsg(newOrder)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a new skill, or updates existing
		/// </summary>
		/// <param name="skill"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddOrEditSkillAsyncMsg(SkillJs skill)
		{
			return await HttpClient.PostAsJsonAsync<SkillJs>("api/v1/rh/skills/addOrEdit", skill);
		}

		/// <summary>
		/// Creates a new skill, or updates existing
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddOrEditSkillAsync(SkillJs skill)
		{
			return await HttpClient.PostAsJsonAsync<SkillJs>("api/v1/rh/skills/addOrEdit", skill);
		}

		/// <summary>
		/// Creates a new skill, or updates existing
		/// </summary>
		public virtual UpdateResultWithId AddOrEditSkill(SkillJs skill)
		{
			var result = Task.Run(() => AddOrEditSkillAsyncMsg(skill)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Creates a new title
		/// </summary>
		/// <param name="title"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateTitileAsyncMsg(OccupationJS title)
		{
			return await HttpClient.PostAsJsonAsync<OccupationJS>("api/v1/rh/titles/createTitle", title);
		}

		/// <summary>
		/// Creates a new title
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateTitileAsync(OccupationJS title)
		{
			return await HttpClient.PostAsJsonAsync<OccupationJS>("api/v1/rh/titles/createTitle", title);
		}

		/// <summary>
		/// Creates a new title
		/// </summary>
		public virtual UpdateResultWithId CreateTitile(OccupationJS title)
		{
			var result = Task.Run(() => CreateTitileAsyncMsg(title)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Updates a title
		/// </summary>
		/// <param name="titleId"></param>
		/// <param name="title"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTitleAsyncMsg(Int32 titleId,OccupationJS title)
		{
			return await HttpClient.PutAsJsonAsync<OccupationJS>("api/v1/rh/titles/updateTitile/" + titleId, title);
		}

		/// <summary>
		/// Updates a title
		/// </summary>
		/// <param name="titleId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTitleAsync(Int32 titleId,OccupationJS title)
		{
			return await HttpClient.PutAsJsonAsync<OccupationJS>("api/v1/rh/titles/updateTitile/" + titleId, title);
		}

		/// <summary>
		/// Updates a title
		/// </summary>
		/// <param name="titleId"></param>
		public virtual UpdateResult UpdateTitle(Int32 titleId,OccupationJS title)
		{
			var result = Task.Run(() => UpdateTitleAsyncMsg(titleId, title)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deletes one title
		/// </summary>
		/// <param name="titleId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTitileAsyncMsg(Int32 titleId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/titles/deleteTitile/" + titleId);
		}

		/// <summary>
		/// Deletes one title
		/// </summary>
		/// <param name="titleId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTitileAsync(Int32 titleId)
		{
			return await HttpClient.DeleteAsync("api/v1/rh/titles/deleteTitile/" + titleId);
		}

		/// <summary>
		/// Deletes one title
		/// </summary>
		/// <param name="titleId"></param>
		public virtual UpdateResult DeleteTitile(Int32 titleId)
		{
			var result = Task.Run(() => DeleteTitileAsyncMsg(titleId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="data">All fields are optional except UserId</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CheckUpdateEmployeeAsyncMsg(Int32 ressourceId,RessourceUpdate data)
		{
			return await HttpClient.PutAsJsonAsync<RessourceUpdate>("api/v1/ressources/checkUpdateEmployee/" + ressourceId, data);
		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CheckUpdateEmployeeAsync(Int32 ressourceId,RessourceUpdate data)
		{
			return await HttpClient.PutAsJsonAsync<RessourceUpdate>("api/v1/ressources/checkUpdateEmployee/" + ressourceId, data);
		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResult CheckUpdateEmployee(Int32 ressourceId,RessourceUpdate data)
		{
			var result = Task.Run(() => CheckUpdateEmployeeAsyncMsg(ressourceId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="data">All fields are optional except UserId</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateEmployeeAsyncMsg(Int32 ressourceId,RessourceUpdate data)
		{
			return await HttpClient.PutAsJsonAsync<RessourceUpdate>("api/v1/ressources/updateEmployee/" + ressourceId, data);
		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateEmployeeAsync(Int32 ressourceId,RessourceUpdate data)
		{
			return await HttpClient.PutAsJsonAsync<RessourceUpdate>("api/v1/ressources/updateEmployee/" + ressourceId, data);
		}

		/// <summary>
		/// Updates an employee.
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResultWithId UpdateEmployee(Int32 ressourceId,RessourceUpdate data)
		{
			var result = Task.Run(() => UpdateEmployeeAsyncMsg(ressourceId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/HumanRessources");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/HumanRessources");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller alowss to configure and execute integrations
	/// </summary>
	public partial class IntegrationsClient : ClientBase, Interfaces.IIntegrationsClient
	{		

		/// <summary>
		/// This controller alowss to configure and execute integrations
		/// </summary>
		public IntegrationsClient() : base()
		{
		}

		/// <summary>
		/// This controller alowss to configure and execute integrations
		/// </summary>
		public IntegrationsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cfId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateGtGpCustomFieldAsyncMsg(Int32 cfId)
		{
			return await HttpClient.GetAsync("api/v1/connect/UpdateProjectIdField/" + cfId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cfId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateGtGpCustomFieldAsync(Int32 cfId)
		{
			return await HttpClient.GetAsync("api/v1/connect/UpdateProjectIdField/" + cfId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cfId"></param>
		public virtual UpdateResult UpdateGtGpCustomField(Int32 cfId)
		{
			var result = Task.Run(() => UpdateGtGpCustomFieldAsyncMsg(cfId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a project from airtable record
		/// For internal use
		/// If project already exists (match by name) custom fields are updated
		/// </summary>
		/// <param name="compId"></param>
		/// <param name="record"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateProjectFromAirTableAsyncMsg(Int32 compId,AirtableRecord record)
		{
			return await HttpClient.PostAsJsonAsync<AirtableRecord>("api/v1/connect/CreateProjectFromAirTable/" + compId, record);
		}

		/// <summary>
		/// Creates a project from airtable record
		/// For internal use
		/// If project already exists (match by name) custom fields are updated
		/// </summary>
		/// <param name="compId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateProjectFromAirTableAsync(Int32 compId,AirtableRecord record)
		{
			return await HttpClient.PostAsJsonAsync<AirtableRecord>("api/v1/connect/CreateProjectFromAirTable/" + compId, record);
		}

		/// <summary>
		/// Creates a project from airtable record
		/// For internal use
		/// If project already exists (match by name) custom fields are updated
		/// </summary>
		/// <param name="compId"></param>
		public virtual UpdateResultWithId CreateProjectFromAirTable(Int32 compId,AirtableRecord record)
		{
			var result = Task.Run(() => CreateProjectFromAirTableAsyncMsg(compId, record)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Retuens AirTables integration configuration
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAirTablesConfigAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/connect/getAirTablesConfig");
		}

		/// <summary>
		/// Retuens AirTables integration configuration
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAirTablesConfigAsync()
		{
			return await HttpClient.GetAsync("api/v1/connect/getAirTablesConfig");
		}

		/// <summary>
		/// Retuens AirTables integration configuration
		/// </summary>
		public virtual AirTablesConfig GetAirTablesConfig()
		{
			var result = Task.Run(() => GetAirTablesConfigAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<AirTablesConfig>().Result;
			 		}

		/// <summary>
		/// Alows to test connectivity with air tables
		/// </summary>
		/// <param name="config"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> TestAirTableConnexionAsyncMsg(AirTablesConfig config)
		{
			return await HttpClient.PostAsJsonAsync<AirTablesConfig>("api/v1/connect/testAirTablesConfig", config);
		}

		/// <summary>
		/// Alows to test connectivity with air tables
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> TestAirTableConnexionAsync(AirTablesConfig config)
		{
			return await HttpClient.PostAsJsonAsync<AirTablesConfig>("api/v1/connect/testAirTablesConfig", config);
		}

		/// <summary>
		/// Alows to test connectivity with air tables
		/// </summary>
		public virtual UpdateResult TestAirTableConnexion(AirTablesConfig config)
		{
			var result = Task.Run(() => TestAirTableConnexionAsyncMsg(config)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Tries to get fields from AirTables. First 100 (or less) records are used to prepare this list
		/// </summary>
		/// <param name="config"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAirTablesFieldsAsyncMsg(AirTablesConfig config)
		{
			return await HttpClient.PostAsJsonAsync<AirTablesConfig>("api/v1/connect/getAirTablesFields", config);
		}

		/// <summary>
		/// Tries to get fields from AirTables. First 100 (or less) records are used to prepare this list
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAirTablesFieldsAsync(AirTablesConfig config)
		{
			return await HttpClient.PostAsJsonAsync<AirTablesConfig>("api/v1/connect/getAirTablesFields", config);
		}

		/// <summary>
		/// Tries to get fields from AirTables. First 100 (or less) records are used to prepare this list
		/// </summary>
		public virtual List<String> GetAirTablesFields(AirTablesConfig config)
		{
			var result = Task.Run(() => GetAirTablesFieldsAsyncMsg(config)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<String>>().Result;
			 		}

		/// <summary>
		/// Saves AirTables configuration.
		/// Performs base check for mandatory fields
		/// </summary>
		/// <param name="config"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveAirTablesConfigAsyncMsg(AirTablesConfig config)
		{
			return await HttpClient.PostAsJsonAsync<AirTablesConfig>("api/v1/connect/saveAirTablesConfig", config);
		}

		/// <summary>
		/// Saves AirTables configuration.
		/// Performs base check for mandatory fields
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveAirTablesConfigAsync(AirTablesConfig config)
		{
			return await HttpClient.PostAsJsonAsync<AirTablesConfig>("api/v1/connect/saveAirTablesConfig", config);
		}

		/// <summary>
		/// Saves AirTables configuration.
		/// Performs base check for mandatory fields
		/// </summary>
		public virtual UpdateResult SaveAirTablesConfig(AirTablesConfig config)
		{
			var result = Task.Run(() => SaveAirTablesConfigAsyncMsg(config)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get Lucca integration configuration
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLuccaConfigAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/connect/GetLuccaConfig");
		}

		/// <summary>
		/// Get Lucca integration configuration
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLuccaConfigAsync()
		{
			return await HttpClient.GetAsync("api/v1/connect/GetLuccaConfig");
		}

		/// <summary>
		/// Get Lucca integration configuration
		/// </summary>
		public virtual LuccaConfig GetLuccaConfig()
		{
			var result = Task.Run(() => GetLuccaConfigAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<LuccaConfig>().Result;
			 		}

		/// <summary>
		/// Get Lucca errors
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLuccaErrorsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/connect/GetLuccaErrors");
		}

		/// <summary>
		/// Get Lucca errors
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLuccaErrorsAsync()
		{
			return await HttpClient.GetAsync("api/v1/connect/GetLuccaErrors");
		}

		/// <summary>
		/// Get Lucca errors
		/// </summary>
		public virtual List<LuccaError> GetLuccaErrors()
		{
			var result = Task.Run(() => GetLuccaErrorsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<LuccaError>>().Result;
			 		}

		/// <summary>
		/// Save Lucca integration configuration
		/// </summary>
		/// <param name="conf"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveLuccaConfigAsyncMsg(LuccaConfig conf)
		{
			return await HttpClient.PostAsJsonAsync<LuccaConfig>("api/v1/connect/SaveLuccaConfig", conf);
		}

		/// <summary>
		/// Save Lucca integration configuration
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveLuccaConfigAsync(LuccaConfig conf)
		{
			return await HttpClient.PostAsJsonAsync<LuccaConfig>("api/v1/connect/SaveLuccaConfig", conf);
		}

		/// <summary>
		/// Save Lucca integration configuration
		/// </summary>
		public virtual UpdateResult SaveLuccaConfig(LuccaConfig conf)
		{
			var result = Task.Run(() => SaveLuccaConfigAsyncMsg(conf)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Integrations");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Integrations");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class InvoicesClient : ClientBase, Interfaces.IInvoicesClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public InvoicesClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public InvoicesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Deletes existing invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteInvoiceAsyncMsg(Int32 invoiceId)
		{
			return await HttpClient.DeleteAsync("api/v1/invoices/deleteInvoice?invoiceId=" + invoiceId);
		}

		/// <summary>
		/// Deletes existing invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteInvoiceAsync(Int32 invoiceId)
		{
			return await HttpClient.DeleteAsync("api/v1/invoices/deleteInvoice?invoiceId=" + invoiceId);
		}

		/// <summary>
		/// Deletes existing invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual UpdateResult DeleteInvoice(Int32 invoiceId)
		{
			var result = Task.Run(() => DeleteInvoiceAsyncMsg(invoiceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Gets detailled information about one invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetInvoiceDetailsAsyncMsg(Int32 invoiceId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/" + invoiceId);
		}

		/// <summary>
		/// Gets detailled information about one invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetInvoiceDetailsAsync(Int32 invoiceId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/" + invoiceId);
		}

		/// <summary>
		/// Gets detailled information about one invoice
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual Invoiced GetInvoiceDetails(Int32 invoiceId)
		{
			var result = Task.Run(() => GetInvoiceDetailsAsyncMsg(invoiceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Invoiced>().Result;
			 		}

		/// <summary>
		/// Gets all invoices for a project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllInvoicesForProjectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/getInvoicesForProject/" + projectId);
		}

		/// <summary>
		/// Gets all invoices for a project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllInvoicesForProjectAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/invoices/getInvoicesForProject/" + projectId);
		}

		/// <summary>
		/// Gets all invoices for a project
		/// </summary>
		/// <param name="projectId"></param>
		public virtual List<Invoiced> GetAllInvoicesForProject(Int32 projectId)
		{
			var result = Task.Run(() => GetAllInvoicesForProjectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Invoiced>>().Result;
			 		}

		/// <summary>
		/// Updates invoice status (paied / not paied)
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <param name="newValue"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdatePaiedStatusAsyncMsg(Int32 invoiceId,Boolean newValue)
		{
			return await HttpClient.PutAsJsonAsync<Boolean>("api/v1/invoices/updatePaiedStatus/" + invoiceId, newValue);
		}

		/// <summary>
		/// Updates invoice status (paied / not paied)
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdatePaiedStatusAsync(Int32 invoiceId,Boolean newValue)
		{
			return await HttpClient.PutAsJsonAsync<Boolean>("api/v1/invoices/updatePaiedStatus/" + invoiceId, newValue);
		}

		/// <summary>
		/// Updates invoice status (paied / not paied)
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual UpdateResult UpdatePaiedStatus(Int32 invoiceId,Boolean newValue)
		{
			var result = Task.Run(() => UpdatePaiedStatusAsyncMsg(invoiceId, newValue)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a new invoice if id is 0 or negatif.
		/// Udates existing invoice if id > 0
		/// </summary>
		/// <param name="invoice"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateOrUpdateInvoiceAsyncMsg(Invoiced invoice)
		{
			return await HttpClient.PostAsJsonAsync<Invoiced>("api/v1/invoices/createOrUpdateInvoice", invoice);
		}

		/// <summary>
		/// Creates a new invoice if id is 0 or negatif.
		/// Udates existing invoice if id > 0
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateOrUpdateInvoiceAsync(Invoiced invoice)
		{
			return await HttpClient.PostAsJsonAsync<Invoiced>("api/v1/invoices/createOrUpdateInvoice", invoice);
		}

		/// <summary>
		/// Creates a new invoice if id is 0 or negatif.
		/// Udates existing invoice if id > 0
		/// </summary>
		public virtual UpdateResultWithId CreateOrUpdateInvoice(Invoiced invoice)
		{
			var result = Task.Run(() => CreateOrUpdateInvoiceAsyncMsg(invoice)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Invoices");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Invoices");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Dashboard and KPI data
	/// </summary>
	public partial class KpiClient : ClientBase, Interfaces.IKpiClient
	{		

		/// <summary>
		/// Dashboard and KPI data
		/// </summary>
		public KpiClient() : base()
		{
		}

		/// <summary>
		/// Dashboard and KPI data
		/// </summary>
		public KpiClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Return data grouped by title
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCapacityGraphByPosteAsyncMsg(DatesRangeFilteredRequest<GraphCapacityByOccupation> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<GraphCapacityByOccupation>>("api/v1/kpi/GetCapacityGraphByPoste", request);
		}

		/// <summary>
		/// Return data grouped by title
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCapacityGraphByPosteAsync(DatesRangeFilteredRequest<GraphCapacityByOccupation> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<GraphCapacityByOccupation>>("api/v1/kpi/GetCapacityGraphByPoste", request);
		}

		/// <summary>
		/// Return data grouped by title
		/// </summary>
		public virtual GraphCapacityByOccupationValue GetCapacityGraphByPoste(DatesRangeFilteredRequest<GraphCapacityByOccupation> request)
		{
			var result = Task.Run(() => GetCapacityGraphByPosteAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<GraphCapacityByOccupationValue>().Result;
			 		}

		/// <summary>
		/// Returns capacity data based on request data
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCapacityGraphAsyncMsg(DatesRangeFilteredRequest<CapacityGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<CapacityGraphComponent>>("api/v1/kpi/GetCapacityGraph", request);
		}

		/// <summary>
		/// Returns capacity data based on request data
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCapacityGraphAsync(DatesRangeFilteredRequest<CapacityGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<CapacityGraphComponent>>("api/v1/kpi/GetCapacityGraph", request);
		}

		/// <summary>
		/// Returns capacity data based on request data
		/// </summary>
		public virtual CapacityGraphComponentResults GetCapacityGraph(DatesRangeFilteredRequest<CapacityGraphComponent> request)
		{
			var result = Task.Run(() => GetCapacityGraphAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<CapacityGraphComponentResults>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRatioGraphAsyncMsg(DatesRangeFilteredRequest<RatioGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RatioGraphComponent>>("api/v1/kpi/GetRatioGraph", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRatioGraphAsync(DatesRangeFilteredRequest<RatioGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RatioGraphComponent>>("api/v1/kpi/GetRatioGraph", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual TimeByCustomFieldReturnType GetRatioGraph(DatesRangeFilteredRequest<RatioGraphComponent> request)
		{
			var result = Task.Run(() => GetRatioGraphAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeByCustomFieldReturnType>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetComparisonGraphAsyncMsg(DatesRangeFilteredRequest<ComparisonGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ComparisonGraphComponent>>("api/v1/kpi/GetComparisonGraph", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetComparisonGraphAsync(DatesRangeFilteredRequest<ComparisonGraphComponent> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<ComparisonGraphComponent>>("api/v1/kpi/GetComparisonGraph", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ComparisonGraphReturnType> GetComparisonGraph(DatesRangeFilteredRequest<ComparisonGraphComponent> request)
		{
			var result = Task.Run(() => GetComparisonGraphAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ComparisonGraphReturnType>>().Result;
			 		}

		/// <summary>
		/// A helper method
		/// </summary>
		/// <param name="startDate"></param>
		/// <param name="endDate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimeByCustomFieldGraphInternalAsyncMsg(DateTime startDate,DateTime endDate)
		{
			return await HttpClient.GetAsync("api/Kpi?startDate=" + startDate.ToString("o") + "&endDate=" + endDate.ToString("o"));
		}

		/// <summary>
		/// A helper method
		/// </summary>
		/// <param name="startDate"></param>
		/// <param name="endDate"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimeByCustomFieldGraphInternalAsync(DateTime startDate,DateTime endDate)
		{
			return await HttpClient.GetAsync("api/Kpi?startDate=" + startDate.ToString("o") + "&endDate=" + endDate.ToString("o"));
		}

		/// <summary>
		/// A helper method
		/// </summary>
		/// <param name="startDate"></param>
		/// <param name="endDate"></param>
		public virtual TimeByCustomFieldReturnType GetTimeByCustomFieldGraphInternal(DateTime startDate,DateTime endDate)
		{
			var result = Task.Run(() => GetTimeByCustomFieldGraphInternalAsyncMsg(startDate, endDate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeByCustomFieldReturnType>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Kpi");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Kpi");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class LoginClient : ClientBase, Interfaces.ILoginClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public LoginClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public LoginClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="apiKey"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ApiLoginAsyncMsg(String apiKey)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/auth/apiLogin?apiKey=" + apiKey, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="apiKey"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ApiLoginAsync(String apiKey)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/auth/apiLogin?apiKey=" + apiKey, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="apiKey"></param>
		public virtual UpdateResultWithId ApiLogin(String apiKey)
		{
			var result = Task.Run(() => ApiLoginAsyncMsg(apiKey)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="credentials"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UserLoginAsyncMsg(LoginParams credentials)
		{
			return await HttpClient.PostAsJsonAsync<LoginParams>("api/v1/auth/userLogin", credentials);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UserLoginAsync(LoginParams credentials)
		{
			return await HttpClient.PostAsJsonAsync<LoginParams>("api/v1/auth/userLogin", credentials);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId UserLogin(LoginParams credentials)
		{
			var result = Task.Run(() => UserLoginAsyncMsg(credentials)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> IsLoggedAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/auth/isLoged");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> IsLoggedAsync()
		{
			return await HttpClient.GetAsync("api/v1/auth/isLoged");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId IsLogged()
		{
			var result = Task.Run(() => IsLoggedAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> LogOutAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/auth/logOut");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LogOutAsync()
		{
			return await HttpClient.GetAsync("api/v1/auth/logOut");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean LogOut()
		{
			var result = Task.Run(() => LogOutAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ResetPasswordAsyncMsg(String email)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/auth/resetPassword", email);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ResetPasswordAsync(String email)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/auth/resetPassword", email);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult ResetPassword(String email)
		{
			var result = Task.Run(() => ResetPasswordAsyncMsg(email)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Login");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Login");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIs for getting and saving planning by project
	/// </summary>
	public partial class PlanningClient : ClientBase, Interfaces.IPlanningClient
	{		

		/// <summary>
		/// APIs for getting and saving planning by project
		/// </summary>
		public PlanningClient() : base()
		{
		}

		/// <summary>
		/// APIs for getting and saving planning by project
		/// </summary>
		public PlanningClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Get projects or ressources planning.
		/// </summary>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlanningAsyncMsg(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning", search);
		}

		/// <summary>
		/// Get projects or ressources planning.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlanningAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning", search);
		}

		/// <summary>
		/// Get projects or ressources planning.
		/// </summary>
		public virtual PlanningResult GetPlanning(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetPlanningAsyncMsg(search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PlanningResult>().Result;
			 		}

		/// <summary>
		/// Get sum planif.
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllPlanifRealAsyncMsg(Int32 companyId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/planning/api/v1/planning/GetAllPlanifReal?companyId=" + companyId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Get sum planif.
		/// </summary>
		/// <param name="companyId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllPlanifRealAsync(Int32 companyId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/planning/api/v1/planning/GetAllPlanifReal?companyId=" + companyId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Get sum planif.
		/// </summary>
		/// <param name="companyId"></param>
		public virtual List<Double> GetAllPlanifReal(Int32 companyId)
		{
			var result = Task.Run(() => GetAllPlanifRealAsyncMsg(companyId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Double>>().Result;
			 		}

		/// <summary>
		/// Get projects or ressources planning for graph.
		/// </summary>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlanifGraphAsyncMsg(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetPlanifGraph", search);
		}

		/// <summary>
		/// Get projects or ressources planning for graph.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlanifGraphAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetPlanifGraph", search);
		}

		/// <summary>
		/// Get projects or ressources planning for graph.
		/// </summary>
		public virtual List<Double> GetPlanifGraph(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetPlanifGraphAsyncMsg(search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<Double>>().Result;
			 		}

		/// <summary>
		/// Get if their is planning for a RESSOURCE
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetIfRessHavePlanifAsyncMsg(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetIfRessHavePlanif?ressourceId=" + ressourceId, search);
		}

		/// <summary>
		/// Get if their is planning for a RESSOURCE
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetIfRessHavePlanifAsync(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetIfRessHavePlanif?ressourceId=" + ressourceId, search);
		}

		/// <summary>
		/// Get if their is planning for a RESSOURCE
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual Boolean GetIfRessHavePlanif(Int32 ressourceId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetIfRessHavePlanifAsyncMsg(ressourceId, search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="userId">Id of project or ressource</param>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlanningByIdAsyncMsg(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/" + userId, search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="userId">Id of project or ressource</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlanningByIdAsync(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/" + userId, search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="userId">Id of project or ressource</param>
		public virtual PlanningResult GetPlanningById(Int32 userId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetPlanningByIdAsyncMsg(userId, search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PlanningResult>().Result;
			 		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdatePlanningDatesAsyncMsg(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<GetPlanningParams>>("api/v1/planning/api/v1/planning/UpdatePlanningDates?rId=" + rId + "&UsePercantages=" + UsePercantages, data);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdatePlanningDatesAsync(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<GetPlanningParams>>("api/v1/planning/api/v1/planning/UpdatePlanningDates?rId=" + rId + "&UsePercantages=" + UsePercantages, data);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="rId"></param>
		/// <param name="UsePercantages"></param>
		public virtual UpdateResult UpdatePlanningDates(Int32 rId,Boolean UsePercantages,DatesRangeRequest<GetPlanningParams> data)
		{
			var result = Task.Run(() => UpdatePlanningDatesAsyncMsg(rId, UsePercantages, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="UserId"></param>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleProjectsListProjectNotCloseAsyncMsg(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetAvalibleProjectsListProjectNotClose?UserId=" + UserId, search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="UserId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleProjectsListProjectNotCloseAsync(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetAvalibleProjectsListProjectNotClose?UserId=" + UserId, search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="UserId"></param>
		public virtual List<ProjectJS> GetAvalibleProjectsListProjectNotClose(Int32 UserId,DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetAvalibleProjectsListProjectNotCloseAsyncMsg(UserId, search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <param name="search"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleProjectsListAsyncMsg(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetAvalibleProjectsList", search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleProjectsListAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/api/v1/planning/GetAvalibleProjectsList", search);
		}

		/// <summary>
		/// Get the planning for a RESSOURCE
		/// </summary>
		public virtual List<ProjectJS> GetAvalibleProjectsList(DatesRangeFilteredRequestPagination<GetPlanningParams> search)
		{
			var result = Task.Run(() => GetAvalibleProjectsListAsyncMsg(search)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// Deletes ALL planification for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ClearProjectPlanningAsyncMsg(Int32 projectId,Boolean clearTasks)
		{
			return await HttpClient.DeleteAsync("api/v1/planning/" + projectId + "/" + clearTasks);
		}

		/// <summary>
		/// Deletes ALL planification for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ClearProjectPlanningAsync(Int32 projectId,Boolean clearTasks)
		{
			return await HttpClient.DeleteAsync("api/v1/planning/" + projectId + "/" + clearTasks);
		}

		/// <summary>
		/// Deletes ALL planification for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="clearTasks">Delete also tasks planning</param>
		public virtual UpdateResult ClearProjectPlanning(Int32 projectId,Boolean clearTasks)
		{
			var result = Task.Run(() => ClearProjectPlanningAsyncMsg(projectId, clearTasks)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Returns combiend (Project and tasks) planning
		/// Pagination is by top level item (Project or ressource)
		/// </summary>
		/// <param name="requestData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCombienedPlanningAsyncMsg(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/GetCombienedPlanning", requestData);
		}

		/// <summary>
		/// Returns combiend (Project and tasks) planning
		/// Pagination is by top level item (Project or ressource)
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCombienedPlanningAsync(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequestPagination<GetPlanningParams>>("api/v1/planning/GetCombienedPlanning", requestData);
		}

		/// <summary>
		/// Returns combiend (Project and tasks) planning
		/// Pagination is by top level item (Project or ressource)
		/// </summary>
		public virtual PlanningResponse GetCombienedPlanning(DatesRangeFilteredRequestPagination<GetPlanningParams> requestData)
		{
			var result = Task.Run(() => GetCombienedPlanningAsyncMsg(requestData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PlanningResponse>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="requestData"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvailabilityAsyncMsg(GetPlanningLineRequest requestData)
		{
			return await HttpClient.PostAsJsonAsync<GetPlanningLineRequest>("api/v1/planning/GetAvailability", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvailabilityAsync(GetPlanningLineRequest requestData)
		{
			return await HttpClient.PostAsJsonAsync<GetPlanningLineRequest>("api/v1/planning/GetAvailability", requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual PlanningResponse GetAvailability(GetPlanningLineRequest requestData)
		{
			var result = Task.Run(() => GetAvailabilityAsyncMsg(requestData)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PlanningResponse>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Planning");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Planning");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class PlanningByTasksClient : ClientBase, Interfaces.IPlanningByTasksClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public PlanningByTasksClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public PlanningByTasksClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Creates recurrent planning for a selcted project, task and list of resources
		/// </summary>
		/// <param name="Params"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveRecurenceAsyncMsg(DatesRangeRequest<RecurentPlanParams> Params)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RecurentPlanParams>>("api/v1/task-planning/SaveRecurence", Params);
		}

		/// <summary>
		/// Creates recurrent planning for a selcted project, task and list of resources
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveRecurenceAsync(DatesRangeRequest<RecurentPlanParams> Params)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RecurentPlanParams>>("api/v1/task-planning/SaveRecurence", Params);
		}

		/// <summary>
		/// Creates recurrent planning for a selcted project, task and list of resources
		/// </summary>
		public virtual UpdateResult SaveRecurence(DatesRangeRequest<RecurentPlanParams> Params)
		{
			var result = Task.Run(() => SaveRecurenceAsyncMsg(Params)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		/// <param name="requestObject"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetPlanningsAsyncMsg(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestPlanningTasks>>("api/v1/task-planning/GetPlannings", requestObject);
		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPlanningsAsync(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestPlanningTasks>>("api/v1/task-planning/GetPlannings", requestObject);
		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		public virtual TaskPlanningResult GetPlannings(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			var result = Task.Run(() => GetPlanningsAsyncMsg(requestObject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TaskPlanningResult>().Result;
			 		}

		/// <summary>
		/// Updates the current "view by" mode for planning
		/// </summary>
		/// <param name="viewBy"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveViewByAsyncMsg(Int32 viewBy)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/SaveViewBy?viewBy=" + viewBy);
		}

		/// <summary>
		/// Updates the current "view by" mode for planning
		/// </summary>
		/// <param name="viewBy"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveViewByAsync(Int32 viewBy)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/SaveViewBy?viewBy=" + viewBy);
		}

		/// <summary>
		/// Updates the current "view by" mode for planning
		/// </summary>
		/// <param name="viewBy"></param>
		public virtual void SaveViewBy(Int32 viewBy)
		{
			var result = Task.Run(() => SaveViewByAsyncMsg(viewBy)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <param name="requestObject"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsForDatesAsyncMsg(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestPlanningTasks>>("api/v1/task-planning/GetProjectsForDates", requestObject);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsForDatesAsync(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestPlanningTasks>>("api/v1/task-planning/GetProjectsForDates", requestObject);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		public virtual List<ProjectContainer> GetProjectsForDates(DatesRangeFilteredRequest<RequestPlanningTasks> requestObject)
		{
			var result = Task.Run(() => GetProjectsForDatesAsyncMsg(requestObject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectContainer>>().Result;
			 		}

		/// <summary>
		/// Get basic project info for planning
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectForPlanningAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetProjectForPlanning/" + projectId);
		}

		/// <summary>
		/// Get basic project info for planning
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectForPlanningAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetProjectForPlanning/" + projectId);
		}

		/// <summary>
		/// Get basic project info for planning
		/// </summary>
		/// <param name="projectId"></param>
		public virtual ProjectContainer GetProjectForPlanning(Int32 projectId)
		{
			var result = Task.Run(() => GetProjectForPlanningAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectContainer>().Result;
			 		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRealHoursForTaskAsyncMsg(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetRealHoursForTask/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRealHoursForTaskAsync(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetRealHoursForTask/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Get the real hours for a task period
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="resourceId"></param>
		public virtual Double GetRealHoursForTask(Int32 taskId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetRealHoursForTaskAsyncMsg(taskId, resourceId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Double>().Result;
			 		}

		/// <summary>
		/// Get the available hours for a project, excluding task hours for this project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvailableHoursForTaskAsyncMsg(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetAvailableHoursForTask/" + projectId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Get the available hours for a project, excluding task hours for this project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvailableHoursForTaskAsync(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetAvailableHoursForTask/" + projectId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Get the available hours for a project, excluding task hours for this project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="resourceId"></param>
		public virtual Double GetAvailableHoursForTask(Int32 projectId,Int32 resourceId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetAvailableHoursForTaskAsyncMsg(projectId, resourceId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Double>().Result;
			 		}

		/// <summary>
		/// Save multiple task plannings, handles deletions and changes
		/// </summary>
		/// <param name="plannings"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveChangesToPlanningsAsyncMsg(TaskPlanningsToSave plannings)
		{
			return await HttpClient.PostAsJsonAsync<TaskPlanningsToSave>("api/v1/task-planning/SaveChangesToPlannings", plannings);
		}

		/// <summary>
		/// Save multiple task plannings, handles deletions and changes
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveChangesToPlanningsAsync(TaskPlanningsToSave plannings)
		{
			return await HttpClient.PostAsJsonAsync<TaskPlanningsToSave>("api/v1/task-planning/SaveChangesToPlannings", plannings);
		}

		/// <summary>
		/// Save multiple task plannings, handles deletions and changes
		/// </summary>
		public virtual UpdateResult SaveChangesToPlannings(TaskPlanningsToSave plannings)
		{
			var result = Task.Run(() => SaveChangesToPlanningsAsyncMsg(plannings)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Declares one day of planning done as not done and remove hour in the timesheet. The StartDate should be used for the day of planning.
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ReversePlanningAsDoneAsyncMsg(DatesRangeRequest<RequestDeclareDone> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestDeclareDone>>("api/v1/task-planning/ReversePlanningAsDone", dates);
		}

		/// <summary>
		/// Declares one day of planning done as not done and remove hour in the timesheet. The StartDate should be used for the day of planning.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ReversePlanningAsDoneAsync(DatesRangeRequest<RequestDeclareDone> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestDeclareDone>>("api/v1/task-planning/ReversePlanningAsDone", dates);
		}

		/// <summary>
		/// Declares one day of planning done as not done and remove hour in the timesheet. The StartDate should be used for the day of planning.
		/// </summary>
		public virtual UpdateResult ReversePlanningAsDone(DatesRangeRequest<RequestDeclareDone> dates)
		{
			var result = Task.Run(() => ReversePlanningAsDoneAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deleting one task planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeletePlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/DeletePlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Deleting one task planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeletePlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/DeletePlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Deleting one task planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual UpdateResult DeletePlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => DeletePlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Set up default workspaces: Home, Office, Client
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SetupDefaultWorkSpacesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/task-planning/SetupDefaultWorkSpaces");
		}

		/// <summary>
		/// Set up default workspaces: Home, Office, Client
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SetupDefaultWorkSpacesAsync()
		{
			return await HttpClient.GetAsync("api/v1/task-planning/SetupDefaultWorkSpaces");
		}

		/// <summary>
		/// Set up default workspaces: Home, Office, Client
		/// </summary>
		public virtual UpdateResult SetupDefaultWorkSpaces()
		{
			var result = Task.Run(() => SetupDefaultWorkSpacesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get the default work place
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDefaultAllWorkSpaceAsyncMsg(Int32 taskId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetDefaultAllWorkSpace/" + taskId);
		}

		/// <summary>
		/// Get the default work place
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDefaultAllWorkSpaceAsync(Int32 taskId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetDefaultAllWorkSpace/" + taskId);
		}

		/// <summary>
		/// Get the default work place
		/// </summary>
		/// <param name="taskId"></param>
		public virtual Int32 GetDefaultAllWorkSpace(Int32 taskId)
		{
			var result = Task.Run(() => GetDefaultAllWorkSpaceAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Int32>().Result;
			 		}

		/// <summary>
		/// Gets a list tasks for a project
		/// </summary>
		/// <param name="param"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllTasksAsyncMsg(DatesRangeRequest<Int32> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/task-planning/GetAllTasks", param);
		}

		/// <summary>
		/// Gets a list tasks for a project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllTasksAsync(DatesRangeRequest<Int32> param)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/task-planning/GetAllTasks", param);
		}

		/// <summary>
		/// Gets a list tasks for a project
		/// </summary>
		public virtual List<ProjectTaskMinimal> GetAllTasks(DatesRangeRequest<Int32> param)
		{
			var result = Task.Run(() => GetAllTasksAsyncMsg(param)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTaskMinimal>>().Result;
			 		}

		/// <summary>
		/// Gets a list of workspaces for the company
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllWorkSpacesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetAllWorkSpaces");
		}

		/// <summary>
		/// Gets a list of workspaces for the company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllWorkSpacesAsync()
		{
			return await HttpClient.GetAsync("api/v1/task-planning/GetAllWorkSpaces");
		}

		/// <summary>
		/// Gets a list of workspaces for the company
		/// </summary>
		public virtual List<TaskPlanningWorkSpace> GetAllWorkSpaces()
		{
			var result = Task.Run(() => GetAllWorkSpacesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskPlanningWorkSpace>>().Result;
			 		}

		/// <summary>
		/// Save multiple workspaces
		/// </summary>
		/// <param name="workSpaces"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveAllWorkSpacesAsyncMsg(List<TaskPlanningWorkSpace> workSpaces)
		{
			return await HttpClient.PostAsJsonAsync<List<TaskPlanningWorkSpace>>("api/v1/task-planning/SaveAllWorkSpaces", workSpaces);
		}

		/// <summary>
		/// Save multiple workspaces
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveAllWorkSpacesAsync(List<TaskPlanningWorkSpace> workSpaces)
		{
			return await HttpClient.PostAsJsonAsync<List<TaskPlanningWorkSpace>>("api/v1/task-planning/SaveAllWorkSpaces", workSpaces);
		}

		/// <summary>
		/// Save multiple workspaces
		/// </summary>
		public virtual UpdateResult SaveAllWorkSpaces(List<TaskPlanningWorkSpace> workSpaces)
		{
			var result = Task.Run(() => SaveAllWorkSpacesAsyncMsg(workSpaces)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Updates the workspace for a given planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateWorkSpaceForPlanningAsyncMsg(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/UpdateWorkSpaceForPlanning/" + taskId + "/" + resourceId + "/" + workspaceId, dates);
		}

		/// <summary>
		/// Updates the workspace for a given planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateWorkSpaceForPlanningAsync(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/UpdateWorkSpaceForPlanning/" + taskId + "/" + resourceId + "/" + workspaceId, dates);
		}

		/// <summary>
		/// Updates the workspace for a given planning
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="workspaceId"></param>
		public virtual UpdateResult UpdateWorkSpaceForPlanning(Int32 resourceId,Int32 taskId,Int32 workspaceId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			var result = Task.Run(() => UpdateWorkSpaceForPlanningAsyncMsg(resourceId, taskId, workspaceId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Locks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> LockTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/LockTaskPlanning/" + taskId + "/" + resourceId + "/" + view, dates);
		}

		/// <summary>
		/// Locks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LockTaskPlanningAsync(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/LockTaskPlanning/" + taskId + "/" + resourceId + "/" + view, dates);
		}

		/// <summary>
		/// Locks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="view"></param>
		public virtual UpdateResult LockTaskPlanning(Int32 resourceId,Int32 taskId,Int32 view,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => LockTaskPlanningAsyncMsg(resourceId, taskId, view, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Unlocks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UnlockTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/UnlockTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Unlocks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UnlockTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/UnlockTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Unlocks a range of task plannings
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual UpdateResult UnlockTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => UnlockTaskPlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Gets whether a task planning is locked and by who
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLockTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetLockTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Gets whether a task planning is locked and by who
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLockTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/GetLockTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Gets whether a task planning is locked and by who
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual UpdateResult GetLockTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetLockTaskPlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Gets a list of comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCommentsForTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetCommentsForTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Gets a list of comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCommentsForTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetCommentsForTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Gets a list of comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual List<TaskPlanningComment> GetCommentsForTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeFilteredRequest<RequestConflicts> dates)
		{
			var result = Task.Run(() => GetCommentsForTaskPlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskPlanningComment>>().Result;
			 		}

		/// <summary>
		/// Adds a comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddCommentForTaskPlanningAsyncMsg(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/AddCommentForTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Adds a comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddCommentForTaskPlanningAsync(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/task-planning/AddCommentForTaskPlanning/" + taskId + "/" + resourceId, dates);
		}

		/// <summary>
		/// Adds a comments for a tasks planning period
		/// </summary>
		/// <param name="resourceId"></param>
		/// <param name="taskId"></param>
		public virtual UpdateResultWithId AddCommentForTaskPlanning(Int32 resourceId,Int32 taskId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => AddCommentForTaskPlanningAsyncMsg(resourceId, taskId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Edits a comments for a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		/// <param name="newText"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> EditCommentForTaskPlanningAsyncMsg(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/task-planning/EditCommentForTaskPlanning/" + commentId, newText);
		}

		/// <summary>
		/// Edits a comments for a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> EditCommentForTaskPlanningAsync(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/task-planning/EditCommentForTaskPlanning/" + commentId, newText);
		}

		/// <summary>
		/// Edits a comments for a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult EditCommentForTaskPlanning(Int32 commentId,String newText)
		{
			var result = Task.Run(() => EditCommentForTaskPlanningAsyncMsg(commentId, newText)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deletes a comments from a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCommentForTaskPlanningAsyncMsg(Int32 commentId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/DeleteCommentForTaskPlanning/" + commentId);
		}

		/// <summary>
		/// Deletes a comments from a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCommentForTaskPlanningAsync(Int32 commentId)
		{
			return await HttpClient.GetAsync("api/v1/task-planning/DeleteCommentForTaskPlanning/" + commentId);
		}

		/// <summary>
		/// Deletes a comments from a tasks planning period
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult DeleteCommentForTaskPlanning(Int32 commentId)
		{
			var result = Task.Run(() => DeleteCommentForTaskPlanningAsyncMsg(commentId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictsForRessourceAsyncMsg(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflictsForRessource/" + ressourceId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictsForRessourceAsync(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflictsForRessource/" + ressourceId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual ConflictsManagmentEntity GetConflictsForRessource(Int32 ressourceId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			var result = Task.Run(() => GetConflictsForRessourceAsyncMsg(ressourceId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ConflictsManagmentEntity>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictsForProjectAsyncMsg(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflictsForProject/" + projectId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictsForProjectAsync(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflictsForProject/" + projectId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual ConflictsManagmentEntity GetConflictsForProject(Int32 projectId,DatesRangeFilteredRequest<RequestConflicts> data)
		{
			var result = Task.Run(() => GetConflictsForProjectAsyncMsg(projectId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ConflictsManagmentEntity>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetBaselineAsyncMsg(Int32 ProjetId,Int32 RessourceId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/task-planning/GetBaseline?ProjetId=" + ProjetId + "&RessourceId=" + RessourceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBaselineAsync(Int32 ProjetId,Int32 RessourceId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/task-planning/GetBaseline?ProjetId=" + ProjetId + "&RessourceId=" + RessourceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ProjetId"></param>
		/// <param name="RessourceId"></param>
		public virtual Double GetBaseline(Int32 ProjetId,Int32 RessourceId)
		{
			var result = Task.Run(() => GetBaselineAsyncMsg(ProjetId, RessourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Double>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetConflictsAsyncMsg(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflicts", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetConflictsAsync(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestConflicts>>("api/v1/task-planning/GetConflicts", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<ConflictsManagmentEntity> GetConflicts(DatesRangeFilteredRequest<RequestConflicts> data)
		{
			var result = Task.Run(() => GetConflictsAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ConflictsManagmentEntity>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cardId"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateUnitPlaningAsyncMsg(Int32 cardId,ConflictsPlanning data)
		{
			return await HttpClient.PostAsJsonAsync<ConflictsPlanning>("api/v1/task-planning/updateUnitPlaning/" + cardId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cardId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateUnitPlaningAsync(Int32 cardId,ConflictsPlanning data)
		{
			return await HttpClient.PostAsJsonAsync<ConflictsPlanning>("api/v1/task-planning/updateUnitPlaning/" + cardId, data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cardId"></param>
		public virtual UpdateResultWithId UpdateUnitPlaning(Int32 cardId,ConflictsPlanning data)
		{
			var result = Task.Run(() => UpdateUnitPlaningAsyncMsg(cardId, data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Declares one day of planning as "Done" and fills time in their timesheets. The StartDate should be used for the day of planning.
		/// </summary>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeclarePlanningAsDoneAsyncMsg(DatesRangeRequest<RequestDeclareDone> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestDeclareDone>>("api/PlanningByTasks", dates);
		}

		/// <summary>
		/// Declares one day of planning as "Done" and fills time in their timesheets. The StartDate should be used for the day of planning.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeclarePlanningAsDoneAsync(DatesRangeRequest<RequestDeclareDone> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestDeclareDone>>("api/PlanningByTasks", dates);
		}

		/// <summary>
		/// Declares one day of planning as "Done" and fills time in their timesheets. The StartDate should be used for the day of planning.
		/// </summary>
		public virtual UpdateResult DeclarePlanningAsDone(DatesRangeRequest<RequestDeclareDone> dates)
		{
			var result = Task.Run(() => DeclarePlanningAsDoneAsyncMsg(dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ProfileImageClient : ClientBase, Interfaces.IProfileImageClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ProfileImageClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ProfileImageClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Update profile image for the logged-in user
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadNewImageAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile-image/UploadNewImage", default(HttpResponseMessage));
		}

		/// <summary>
		/// Update profile image for the logged-in user
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadNewImageAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile-image/UploadNewImage", default(HttpResponseMessage));
		}

		/// <summary>
		/// Update profile image for the logged-in user
		/// </summary>
		public virtual UpdateResult UploadNewImage()
		{
			var result = Task.Run(() => UploadNewImageAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteImageAsyncMsg()
		{
			return await HttpClient.DeleteAsync("api/v1/profile-image/DeleteImage");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteImageAsync()
		{
			return await HttpClient.DeleteAsync("api/v1/profile-image/DeleteImage");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult DeleteImage()
		{
			var result = Task.Run(() => DeleteImageAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/ProfileImage");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/ProfileImage");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ProjectManagementClient : ClientBase, Interfaces.IProjectManagementClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ProjectManagementClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ProjectManagementClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CopyProjectsAsyncMsg(ReplanProjectsRequest data)
		{
			return await HttpClient.PostAsJsonAsync<ReplanProjectsRequest>("api/v1/proj-management/CopyProjects", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CopyProjectsAsync(ReplanProjectsRequest data)
		{
			return await HttpClient.PostAsJsonAsync<ReplanProjectsRequest>("api/v1/proj-management/CopyProjects", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId CopyProjects(ReplanProjectsRequest data)
		{
			var result = Task.Run(() => CopyProjectsAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Add to project ressource if not in the project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddUserToProjectAsyncMsg(Int32 projectId,Int32 userId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/AddUserToProject?projectId=" + projectId + "&userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add to project ressource if not in the project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddUserToProjectAsync(Int32 projectId,Int32 userId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/proj-management/AddUserToProject?projectId=" + projectId + "&userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add to project ressource if not in the project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="userId"></param>
		public virtual UpdateResult AddUserToProject(Int32 projectId,Int32 userId)
		{
			var result = Task.Run(() => AddUserToProjectAsyncMsg(projectId, userId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a new project with custom fields values (optional)
		/// </summary>
		/// <param name="project">Project to create</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateProjectWithCustomFieldsAsyncMsg(ProjectJS project)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJS>("api/v1/proj-management/CreateProjectWithCustomFields", project);
		}

		/// <summary>
		/// Creates a new project with custom fields values (optional)
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateProjectWithCustomFieldsAsync(ProjectJS project)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJS>("api/v1/proj-management/CreateProjectWithCustomFields", project);
		}

		/// <summary>
		/// Creates a new project with custom fields values (optional)
		/// </summary>
		public virtual UpdateResultWithId CreateProjectWithCustomFields(ProjectJS project)
		{
			var result = Task.Run(() => CreateProjectWithCustomFieldsAsyncMsg(project)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		/// <param name="requestObject"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsRessourcesAsyncMsg(DatesRangeRequest<RequestProjectResources> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestProjectResources>>("api/v1/proj-management/GetProjectsRessources", requestObject);
		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsRessourcesAsync(DatesRangeRequest<RequestProjectResources> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<RequestProjectResources>>("api/v1/proj-management/GetProjectsRessources", requestObject);
		}

		/// <summary>
		/// Get the task plannings for a project
		/// </summary>
		public virtual ProjectJS GetProjectsRessources(DatesRangeRequest<RequestProjectResources> requestObject)
		{
			var result = Task.Run(() => GetProjectsRessourcesAsyncMsg(requestObject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectJS>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTasksForProjectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetTasksForProject/" + projectId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTasksForProjectAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/proj-management/GetTasksForProject/" + projectId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual List<ProjectTaskMinimal> GetTasksForProject(Int32 projectId)
		{
			var result = Task.Run(() => GetTasksForProjectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectTaskMinimal>>().Result;
			 		}

		/// <summary>
		/// Gets all actions done on a project
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetLastActivityForProjectAsyncMsg(DatesRangeRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("GetLastActivityForProject", data);
		}

		/// <summary>
		/// Gets all actions done on a project
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLastActivityForProjectAsync(DatesRangeRequest<Int32> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("GetLastActivityForProject", data);
		}

		/// <summary>
		/// Gets all actions done on a project
		/// </summary>
		public virtual List<ActivityLine> GetLastActivityForProject(DatesRangeRequest<Int32> data)
		{
			var result = Task.Run(() => GetLastActivityForProjectAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ActivityLine>>().Result;
			 		}

		/// <summary>
		/// Return list of all projects in the compagnie and values of custom fields
		/// </summary>
		/// <param name="requestObject">Dates range. The parametre indicates if custom fields should be included</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllProjectsWithCustomFieldsAsyncMsg(DatesRangeFilteredRequest<Boolean> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/proj-management/GetAllProjectsWithCustomFields", requestObject);
		}

		/// <summary>
		/// Return list of all projects in the compagnie and values of custom fields
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllProjectsWithCustomFieldsAsync(DatesRangeFilteredRequest<Boolean> requestObject)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<Boolean>>("api/v1/proj-management/GetAllProjectsWithCustomFields", requestObject);
		}

		/// <summary>
		/// Return list of all projects in the compagnie and values of custom fields
		/// </summary>
		public virtual List<ProjectJS> GetAllProjectsWithCustomFields(DatesRangeFilteredRequest<Boolean> requestObject)
		{
			var result = Task.Run(() => GetAllProjectsWithCustomFieldsAsyncMsg(requestObject)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectJS>>().Result;
			 		}

		/// <summary>
		/// Updates project dates and name (If name is not empty. Only updates names if startdate and enddate are the sames as projects
		/// </summary>
		/// <param name="data">Only StartDate, EndDate and Name are used for this update</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectDatesAndNameAsyncMsg(ProjectJSMainStats data)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJSMainStats>("api/v1/proj-management/UpdateProjectDatesAndName", data);
		}

		/// <summary>
		/// Updates project dates and name (If name is not empty. Only updates names if startdate and enddate are the sames as projects
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectDatesAndNameAsync(ProjectJSMainStats data)
		{
			return await HttpClient.PostAsJsonAsync<ProjectJSMainStats>("api/v1/proj-management/UpdateProjectDatesAndName", data);
		}

		/// <summary>
		/// Updates project dates and name (If name is not empty. Only updates names if startdate and enddate are the sames as projects
		/// </summary>
		public virtual UpdateResult UpdateProjectDatesAndName(ProjectJSMainStats data)
		{
			var result = Task.Run(() => UpdateProjectDatesAndNameAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> OpenProjectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.PutAsJsonAsync("api/v1/proj-management/OpenProject/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> OpenProjectAsync(Int32 projectId)
		{
			return await HttpClient.PutAsJsonAsync("api/v1/proj-management/OpenProject/" + projectId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResult OpenProject(Int32 projectId)
		{
			var result = Task.Run(() => OpenProjectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeDefaultWorkPlaceAsyncMsg(Int32 projectId,Int32 workPlaceId)
		{
			return await HttpClient.PutAsJsonAsync("api/v1/proj-management/ChangeDefaultWorkPlace/" + projectId + "/" + workPlaceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeDefaultWorkPlaceAsync(Int32 projectId,Int32 workPlaceId)
		{
			return await HttpClient.PutAsJsonAsync("api/v1/proj-management/ChangeDefaultWorkPlace/" + projectId + "/" + workPlaceId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Opends project
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="workPlaceId"></param>
		public virtual UpdateResult ChangeDefaultWorkPlace(Int32 projectId,Int32 workPlaceId)
		{
			var result = Task.Run(() => ChangeDefaultWorkPlaceAsyncMsg(projectId, workPlaceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Closes OPENED project. 
		/// Ignores closed projects
		/// TODO : change name
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="deleteSurvey"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CloseProjectAsyncMsg(Int32 projectId,Boolean deleteSurvey)
		{
			return await HttpClient.PutAsJsonAsync<Boolean>("api/v1/proj-management/CloseProject/" + projectId, deleteSurvey);
		}

		/// <summary>
		/// Closes OPENED project. 
		/// Ignores closed projects
		/// TODO : change name
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CloseProjectAsync(Int32 projectId,Boolean deleteSurvey)
		{
			return await HttpClient.PutAsJsonAsync<Boolean>("api/v1/proj-management/CloseProject/" + projectId, deleteSurvey);
		}

		/// <summary>
		/// Closes OPENED project. 
		/// Ignores closed projects
		/// TODO : change name
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResult CloseProject(Int32 projectId,Boolean deleteSurvey)
		{
			var result = Task.Run(() => CloseProjectAsyncMsg(projectId, deleteSurvey)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="rs"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateProjectRessourcesAsyncMsg(Int32 projectId,List<RessourceStats> rs)
		{
			return await HttpClient.PostAsJsonAsync<List<RessourceStats>>("api/v1/proj-management/UpdateProjectRessources/" + projectId, rs);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateProjectRessourcesAsync(Int32 projectId,List<RessourceStats> rs)
		{
			return await HttpClient.PostAsJsonAsync<List<RessourceStats>>("api/v1/proj-management/UpdateProjectRessources/" + projectId, rs);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		public virtual UpdateResult UpdateProjectRessources(Int32 projectId,List<RessourceStats> rs)
		{
			var result = Task.Run(() => UpdateProjectRessourcesAsyncMsg(projectId, rs)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/ProjectManagement");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/ProjectManagement");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIs for managing project states
	/// </summary>
	public partial class ProjectStatesClient : ClientBase, Interfaces.IProjectStatesClient
	{		

		/// <summary>
		/// APIs for managing project states
		/// </summary>
		public ProjectStatesClient() : base()
		{
		}

		/// <summary>
		/// APIs for managing project states
		/// </summary>
		public ProjectStatesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// The list of all avalible states with asociated colors
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllStatesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/projectStates/getAllStates");
		}

		/// <summary>
		/// The list of all avalible states with asociated colors
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllStatesAsync()
		{
			return await HttpClient.GetAsync("api/v1/projectStates/getAllStates");
		}

		/// <summary>
		/// The list of all avalible states with asociated colors
		/// </summary>
		public virtual List<ProjectState> GetAllStates()
		{
			var result = Task.Run(() => GetAllStatesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectState>>().Result;
			 		}

		/// <summary>
		/// Change a comment for already existing project state
		/// </summary>
		/// <param name="assignedStateId">Id of project state</param>
		/// <param name="comment">New comment</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateStateAsyncMsg(Int32 assignedStateId,String comment)
		{
			return await HttpClient.PutAsJsonAsync<String>("api/v1/projectStates/update/" + assignedStateId, comment);
		}

		/// <summary>
		/// Change a comment for already existing project state
		/// </summary>
		/// <param name="assignedStateId">Id of project state</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateStateAsync(Int32 assignedStateId,String comment)
		{
			return await HttpClient.PutAsJsonAsync<String>("api/v1/projectStates/update/" + assignedStateId, comment);
		}

		/// <summary>
		/// Change a comment for already existing project state
		/// </summary>
		/// <param name="assignedStateId">Id of project state</param>
		public virtual UpdateResult UpdateState(Int32 assignedStateId,String comment)
		{
			var result = Task.Run(() => UpdateStateAsyncMsg(assignedStateId, comment)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Add new project state to a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>
		/// <param name="comment">Coment. Can be empty</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddStateAsyncMsg(Int32 projectId,Int32 stateId,String comment)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/projectStates/update/" + projectId + "/" + stateId, comment);
		}

		/// <summary>
		/// Add new project state to a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddStateAsync(Int32 projectId,Int32 stateId,String comment)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/projectStates/update/" + projectId + "/" + stateId, comment);
		}

		/// <summary>
		/// Add new project state to a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <param name="stateId">Id of state. Must be on of values returned by</param>
		public virtual UpdateResultWithId AddState(Int32 projectId,Int32 stateId,String comment)
		{
			var result = Task.Run(() => AddStateAsyncMsg(projectId, stateId, comment)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Get the list of all states for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetStatesForProjectAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/projectStates/" + projectId);
		}

		/// <summary>
		/// Get the list of all states for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetStatesForProjectAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/v1/projectStates/" + projectId);
		}

		/// <summary>
		/// Get the list of all states for a project
		/// </summary>
		/// <param name="projectId">Id of project</param>
		public virtual List<ProjectState> GetStatesForProject(Int32 projectId)
		{
			var result = Task.Run(() => GetStatesForProjectAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectState>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/ProjectStates");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/ProjectStates");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class RapportsClient : ClientBase, Interfaces.IRapportsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public RapportsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public RapportsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// This API is lighter version of reports. Calculated fields are not included and filters are disabled, besides base filters
		/// Supported groupping : All projects
		/// </summary>
		/// <param name="searchOptions">Base filter options : columns, dates, views</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectsNoFiltersAsyncMsg(SearchCriteriaRapports searchOptions)
		{
			return await HttpClient.PostAsJsonAsync<SearchCriteriaRapports>("api/v1/reports/GetprojectsNoFilters", searchOptions);
		}

		/// <summary>
		/// This API is lighter version of reports. Calculated fields are not included and filters are disabled, besides base filters
		/// Supported groupping : All projects
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectsNoFiltersAsync(SearchCriteriaRapports searchOptions)
		{
			return await HttpClient.PostAsJsonAsync<SearchCriteriaRapports>("api/v1/reports/GetprojectsNoFilters", searchOptions);
		}

		/// <summary>
		/// This API is lighter version of reports. Calculated fields are not included and filters are disabled, besides base filters
		/// Supported groupping : All projects
		/// </summary>
		public virtual ProjectTypeStats GetProjectsNoFilters(SearchCriteriaRapports searchOptions)
		{
			var result = Task.Run(() => GetProjectsNoFiltersAsyncMsg(searchOptions)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectTypeStats>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Rapports");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Rapports");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIS for managing delivrables (Aka Tasks)
	/// </summary>
	public partial class RessourceClient : ClientBase, Interfaces.IRessourceClient
	{		

		/// <summary>
		/// APIS for managing delivrables (Aka Tasks)
		/// </summary>
		public RessourceClient() : base()
		{
		}

		/// <summary>
		/// APIS for managing delivrables (Aka Tasks)
		/// </summary>
		public RessourceClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Get User Info
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="includeData"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsergeneralInfoAsyncMsg(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/ressource?userId=" + userId + "&includeData=" + includeData, dates);
		}

		/// <summary>
		/// Get User Info
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="includeData"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsergeneralInfoAsync(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/ressource?userId=" + userId + "&includeData=" + includeData, dates);
		}

		/// <summary>
		/// Get User Info
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="includeData"></param>
		public virtual RessourceGeneralInformations GetUsergeneralInfo(Int32 userId,Boolean includeData,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetUsergeneralInfoAsyncMsg(userId, includeData, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<RessourceGeneralInformations>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Ressource");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Ressource");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class RolesManagementClient : ClientBase, Interfaces.IRolesManagementClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public RolesManagementClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public RolesManagementClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRessourcesAsyncMsg(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/roles/GetRessources/" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRessourcesAsync(Int32 id)
		{
			return await HttpClient.GetAsync("api/v1/roles/GetRessources/" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual List<RessourceStats> GetRessources(Int32 id)
		{
			var result = Task.Run(() => GetRessourcesAsyncMsg(id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<RessourceStats>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetRolesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/roles/GetRoles");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRolesAsync()
		{
			return await HttpClient.GetAsync("api/v1/roles/GetRoles");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<RoleJS> GetRoles()
		{
			var result = Task.Run(() => GetRolesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<RoleJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newRole"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateRoleAsyncMsg(RoleJS newRole)
		{
			return await HttpClient.PostAsJsonAsync<RoleJS>("api/v1/roles/UpdateRole", newRole);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateRoleAsync(RoleJS newRole)
		{
			return await HttpClient.PostAsJsonAsync<RoleJS>("api/v1/roles/UpdateRole", newRole);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult UpdateRole(RoleJS newRole)
		{
			var result = Task.Run(() => UpdateRoleAsyncMsg(newRole)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="item"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddRoleAsyncMsg(RoleJS item)
		{
			return await HttpClient.PostAsJsonAsync<RoleJS>("api/v1/roles/AddRole", item);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddRoleAsync(RoleJS item)
		{
			return await HttpClient.PostAsJsonAsync<RoleJS>("api/v1/roles/AddRole", item);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResultWithId AddRole(RoleJS item)
		{
			var result = Task.Run(() => AddRoleAsyncMsg(item)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newRoles"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveRolesAsyncMsg(List<RoleJS> newRoles)
		{
			return await HttpClient.PostAsJsonAsync<List<RoleJS>>("api/v1/roles/SaveRoles", newRoles);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveRolesAsync(List<RoleJS> newRoles)
		{
			return await HttpClient.PostAsJsonAsync<List<RoleJS>>("api/v1/roles/SaveRoles", newRoles);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult SaveRoles(List<RoleJS> newRoles)
		{
			var result = Task.Run(() => SaveRolesAsyncMsg(newRoles)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsPermissionsAsyncMsg(Int32 roleId)
		{
			return await HttpClient.GetAsync("api/v1/roles/GetCustomFieldsPermissions?roleId=" + roleId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsPermissionsAsync(Int32 roleId)
		{
			return await HttpClient.GetAsync("api/v1/roles/GetCustomFieldsPermissions?roleId=" + roleId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		public virtual List<CustomFieldPermissionJS> GetCustomFieldsPermissions(Int32 roleId)
		{
			var result = Task.Run(() => GetCustomFieldsPermissionsAsyncMsg(roleId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldPermissionJS>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <param name="customFieldPermissions"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveCustomFieldsPermissionsAsyncMsg(Int32 roleId,List<CustomFieldPermissionJS> customFieldPermissions)
		{
			return await HttpClient.PostAsJsonAsync<List<CustomFieldPermissionJS>>("api/v1/roles/SaveCustomFieldsPermissions/" + roleId, customFieldPermissions);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveCustomFieldsPermissionsAsync(Int32 roleId,List<CustomFieldPermissionJS> customFieldPermissions)
		{
			return await HttpClient.PostAsJsonAsync<List<CustomFieldPermissionJS>>("api/v1/roles/SaveCustomFieldsPermissions/" + roleId, customFieldPermissions);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="roleId"></param>
		public virtual Boolean SaveCustomFieldsPermissions(Int32 roleId,List<CustomFieldPermissionJS> customFieldPermissions)
		{
			var result = Task.Run(() => SaveCustomFieldsPermissionsAsyncMsg(roleId, customFieldPermissions)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/RolesManagement");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/RolesManagement");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// This controller alows projects and ressources search
	/// </summary>
	public partial class SearchClient : ClientBase, Interfaces.ISearchClient
	{		

		/// <summary>
		/// This controller alows projects and ressources search
		/// </summary>
		public SearchClient() : base()
		{
		}

		/// <summary>
		/// This controller alows projects and ressources search
		/// </summary>
		public SearchClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Search list of projects for current user.
		/// Searching in project name and project description
		/// </summary>
		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchProjectsAsyncMsg(String searchStr,ViewSelect viewSelector)
		{
			return await HttpClient.GetAsync("api/v1/search/searchProjects?searchStr=" + searchStr + "&viewSelector=" + viewSelector);
		}

		/// <summary>
		/// Search list of projects for current user.
		/// Searching in project name and project description
		/// </summary>
		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchProjectsAsync(String searchStr,ViewSelect viewSelector)
		{
			return await HttpClient.GetAsync("api/v1/search/searchProjects?searchStr=" + searchStr + "&viewSelector=" + viewSelector);
		}

		/// <summary>
		/// Search list of projects for current user.
		/// Searching in project name and project description
		/// </summary>
		/// <param name="searchStr">Text to find</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		public virtual List<ProjectSearchResult> SearchProjects(String searchStr,ViewSelect viewSelector)
		{
			var result = Task.Run(() => SearchProjectsAsyncMsg(searchStr, viewSelector)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectSearchResult>>().Result;
			 		}

		/// <summary>
		/// Search for ressources.
		/// Searching based on user name
		/// </summary>
		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchRessourcesAsyncMsg(String searchStr,ViewSelect viewSelector)
		{
			return await HttpClient.GetAsync("api/v1/search/searchRessources?searchStr=" + searchStr + "&viewSelector=" + viewSelector);
		}

		/// <summary>
		/// Search for ressources.
		/// Searching based on user name
		/// </summary>
		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchRessourcesAsync(String searchStr,ViewSelect viewSelector)
		{
			return await HttpClient.GetAsync("api/v1/search/searchRessources?searchStr=" + searchStr + "&viewSelector=" + viewSelector);
		}

		/// <summary>
		/// Search for ressources.
		/// Searching based on user name
		/// </summary>
		/// <param name="searchStr">Text to search</param>
		/// <param name="viewSelector">View selector (me, team, company)</param>
		public virtual List<EmployeJS__> SearchRessources(String searchStr,ViewSelect viewSelector)
		{
			var result = Task.Run(() => SearchRessourcesAsyncMsg(searchStr, viewSelector)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS__>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Search");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Search");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// APIS for managing delivrables (Aka Tasks)
	/// </summary>
	public partial class TasksClient : ClientBase, Interfaces.ITasksClient
	{		

		/// <summary>
		/// APIS for managing delivrables (Aka Tasks)
		/// </summary>
		public TasksClient() : base()
		{
		}

		/// <summary>
		/// APIS for managing delivrables (Aka Tasks)
		/// </summary>
		public TasksClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Import, in a project, task from template
		/// </summary>
		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ImportFromTemplateAsyncMsg(String templateId,Int32 projectId,Boolean addTemplateResp)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks?templateId=" + templateId + "&projectId=" + projectId + "&addTemplateResp=" + addTemplateResp, default(HttpResponseMessage));
		}

		/// <summary>
		/// Import, in a project, task from template
		/// </summary>
		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ImportFromTemplateAsync(String templateId,Int32 projectId,Boolean addTemplateResp)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks?templateId=" + templateId + "&projectId=" + projectId + "&addTemplateResp=" + addTemplateResp, default(HttpResponseMessage));
		}

		/// <summary>
		/// Import, in a project, task from template
		/// </summary>
		/// <param name="templateId"></param>
		/// <param name="projectId"></param>
		/// <param name="addTemplateResp"></param>
		public virtual UpdateResult ImportFromTemplate(String templateId,Int32 projectId,Boolean addTemplateResp)
		{
			var result = Task.Run(() => ImportFromTemplateAsyncMsg(templateId, projectId, addTemplateResp)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Create a new task for a project and assign an employe
		/// </summary>
		/// <param name="toCreate"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateTaskAsyncMsg(ProjectTaskMinimal toCreate)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTaskMinimal>("api/v1/tasks", toCreate);
		}

		/// <summary>
		/// Create a new task for a project and assign an employe
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateTaskAsync(ProjectTaskMinimal toCreate)
		{
			return await HttpClient.PostAsJsonAsync<ProjectTaskMinimal>("api/v1/tasks", toCreate);
		}

		/// <summary>
		/// Create a new task for a project and assign an employe
		/// </summary>
		public virtual UpdateResultWithId CreateTask(ProjectTaskMinimal toCreate)
		{
			var result = Task.Run(() => CreateTaskAsyncMsg(toCreate)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <param name="taskId">Id of the task to delete</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTaskAsyncMsg(Int32 taskId)
		{
			return await HttpClient.DeleteAsync("api/v1/tasks/" + taskId);
		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <param name="taskId">Id of the task to delete</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTaskAsync(Int32 taskId)
		{
			return await HttpClient.DeleteAsync("api/v1/tasks/" + taskId);
		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <param name="taskId">Id of the task to delete</param>
		public virtual UpdateResult DeleteTask(Int32 taskId)
		{
			var result = Task.Run(() => DeleteTaskAsyncMsg(taskId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <param name="tasksId">Id of the task to delete</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteTasksAsyncMsg(Int32[] tasksId)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/tasks/api/v1/tasks/DeleteTasks", tasksId);
		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteTasksAsync(Int32[] tasksId)
		{
			return await HttpClient.PostAsJsonAsync<Int32[]>("api/v1/tasks/api/v1/tasks/DeleteTasks", tasksId);
		}

		/// <summary>
		/// Deletes specified task
		/// </summary>
		public virtual UpdateResult DeleteTasks(Int32[] tasksId)
		{
			var result = Task.Run(() => DeleteTasksAsyncMsg(tasksId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="parentId"></param>
		/// <param name="requestTask"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateTaskAsyncMsg(Int32 taskId,Int32 parentId,RequesTasks requestTask)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/UpdateTask?taskId=" + taskId + "&parentId=" + parentId, requestTask);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="parentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateTaskAsync(Int32 taskId,Int32 parentId,RequesTasks requestTask)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/UpdateTask?taskId=" + taskId + "&parentId=" + parentId, requestTask);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="parentId"></param>
		public virtual UpdateResult UpdateTask(Int32 taskId,Int32 parentId,RequesTasks requestTask)
		{
			var result = Task.Run(() => UpdateTaskAsyncMsg(taskId, parentId, requestTask)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCustomFieldsForTaskAsyncMsg(Int32 taskId,Int32 projectId,Boolean noUnique)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetCustomFieldsForTask?taskId=" + taskId + "&projectId=" + projectId + "&noUnique=" + noUnique, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCustomFieldsForTaskAsync(Int32 taskId,Int32 projectId,Boolean noUnique)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetCustomFieldsForTask?taskId=" + taskId + "&projectId=" + projectId + "&noUnique=" + noUnique, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="projectId"></param>
		/// <param name="noUnique"></param>
		public virtual List<CustomFieldJs> GetCustomFieldsForTask(Int32 taskId,Int32 projectId,Boolean noUnique)
		{
			var result = Task.Run(() => GetCustomFieldsForTaskAsyncMsg(taskId, projectId, noUnique)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<CustomFieldJs>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <param name="requestTask"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetIfTaskHavePlanifAsyncMsg(Int32 taskId,RequesTasks requestTask)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/GetIfTaskHavePlanif?taskId=" + taskId, requestTask);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetIfTaskHavePlanifAsync(Int32 taskId,RequesTasks requestTask)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/GetIfTaskHavePlanif?taskId=" + taskId, requestTask);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="taskId"></param>
		public virtual Boolean GetIfTaskHavePlanif(Int32 taskId,RequesTasks requestTask)
		{
			var result = Task.Run(() => GetIfTaskHavePlanifAsyncMsg(taskId, requestTask)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetIfTasksHavePlanifAsyncMsg(RequestSelectedTasks data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedTasks>("api/v1/tasks/api/v1/tasks/GetIfTasksHavePlanif", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetIfTasksHavePlanifAsync(RequestSelectedTasks data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedTasks>("api/v1/tasks/api/v1/tasks/GetIfTasksHavePlanif", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean GetIfTasksHavePlanif(RequestSelectedTasks data)
		{
			var result = Task.Run(() => GetIfTasksHavePlanifAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateSelectedTasksInfoAsyncMsg(RequestSelectedTasks data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedTasks>("api/v1/tasks/api/v1/tasks/UpdateSelectedTasksInfo", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateSelectedTasksInfoAsync(RequestSelectedTasks data)
		{
			return await HttpClient.PostAsJsonAsync<RequestSelectedTasks>("api/v1/tasks/api/v1/tasks/UpdateSelectedTasksInfo", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult UpdateSelectedTasksInfo(RequestSelectedTasks data)
		{
			var result = Task.Run(() => UpdateSelectedTasksInfoAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// get ressource for task
		/// </summary>
		/// <param name="projectId">Id of the project to delete</param>
		/// <param name="dates">dates param</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllProjectRessourcesAsyncMsg(Int32 projectId,RequesTasks dates)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/GetAllProjectRessources?projectId=" + projectId, dates);
		}

		/// <summary>
		/// get ressource for task
		/// </summary>
		/// <param name="projectId">Id of the project to delete</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllProjectRessourcesAsync(Int32 projectId,RequesTasks dates)
		{
			return await HttpClient.PostAsJsonAsync<RequesTasks>("api/v1/tasks/api/v1/tasks/GetAllProjectRessources?projectId=" + projectId, dates);
		}

		/// <summary>
		/// get ressource for task
		/// </summary>
		/// <param name="projectId">Id of the project to delete</param>
		public virtual List<EmployeJS> GetAllProjectRessources(Int32 projectId,RequesTasks dates)
		{
			var result = Task.Run(() => GetAllProjectRessourcesAsyncMsg(projectId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<EmployeJS>>().Result;
			 		}

		/// <summary>
		/// state task.
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllStatesAsyncMsg()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetAllStates", default(HttpResponseMessage));
		}

		/// <summary>
		/// state task.
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllStatesAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/v1/tasks/api/v1/tasks/GetAllStates", default(HttpResponseMessage));
		}

		/// <summary>
		/// state task.
		/// </summary>
		public virtual List<TaskState> GetAllStates()
		{
			var result = Task.Run(() => GetAllStatesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TaskState>>().Result;
			 		}

		/// <summary>
		/// get project for ressource.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="dates"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTasksNoManaDireCheckAsyncMsg(Int32 ressourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/tasks/api/v1/tasks/GetTasksNoManaDireCheck?ressourceId=" + ressourceId, dates);
		}

		/// <summary>
		/// get project for ressource.
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTasksNoManaDireCheckAsync(Int32 ressourceId,DatesRangeRequest<Object> dates)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Object>>("api/v1/tasks/api/v1/tasks/GetTasksNoManaDireCheck?ressourceId=" + ressourceId, dates);
		}

		/// <summary>
		/// get project for ressource.
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual List<ProjectWithTasks> GetTasksNoManaDireCheck(Int32 ressourceId,DatesRangeRequest<Object> dates)
		{
			var result = Task.Run(() => GetTasksNoManaDireCheckAsyncMsg(ressourceId, dates)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ProjectWithTasks>>().Result;
			 		}

		/// <summary>
		/// Returns data for a task. Planning and real times included between provided dates
		/// </summary>
		/// <param name="criteria">RequestObject : TaskId</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTaskByIdAsyncMsg(DatesRangeRequest<Int32> criteria)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/tasks/api/v1/tasks/GetTask", criteria);
		}

		/// <summary>
		/// Returns data for a task. Planning and real times included between provided dates
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTaskByIdAsync(DatesRangeRequest<Int32> criteria)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeRequest<Int32>>("api/v1/tasks/api/v1/tasks/GetTask", criteria);
		}

		/// <summary>
		/// Returns data for a task. Planning and real times included between provided dates
		/// </summary>
		public virtual ProjectTask GetTaskById(DatesRangeRequest<Int32> criteria)
		{
			var result = Task.Run(() => GetTaskByIdAsyncMsg(criteria)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<ProjectTask>().Result;
			 		}

		/// <summary>
		/// get project work place
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetProjectWorkPlaceAsyncMsg(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/Tasks?projectId=" + projectId);
		}

		/// <summary>
		/// get project work place
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetProjectWorkPlaceAsync(Int32 projectId)
		{
			return await HttpClient.GetAsync("api/Tasks?projectId=" + projectId);
		}

		/// <summary>
		/// get project work place
		/// </summary>
		/// <param name="projectId">Id of the project</param>
		public virtual Nullable<Int32> GetProjectWorkPlace(Int32 projectId)
		{
			var result = Task.Run(() => GetProjectWorkPlaceAsyncMsg(projectId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Nullable<Int32>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Tasks");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Tasks");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class TimesheetsClient : ClientBase, Interfaces.ITimesheetsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public TimesheetsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TimesheetsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="args"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimesheetAsyncMsg(GetTimesheetRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetRequest>("api/v1/timesheets/getTimesheet", args);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimesheetAsync(GetTimesheetRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetRequest>("api/v1/timesheets/getTimesheet", args);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual TimeSheetReduced GetTimesheet(GetTimesheetRequest args)
		{
			var result = Task.Run(() => GetTimesheetAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeSheetReduced>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="args"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimesheetFromProjectAsyncMsg(GetTimesheetFromProjectRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetFromProjectRequest>("api/v1/timesheets/getTimesheetFromProject", args);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimesheetFromProjectAsync(GetTimesheetFromProjectRequest args)
		{
			return await HttpClient.PostAsJsonAsync<GetTimesheetFromProjectRequest>("api/v1/timesheets/getTimesheetFromProject", args);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual TimeSheetReduced GetTimesheetFromProject(GetTimesheetFromProjectRequest args)
		{
			var result = Task.Run(() => GetTimesheetFromProjectAsyncMsg(args)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<TimeSheetReduced>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsersAsyncMsg(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getUsersForValidation", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsersAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getUsersForValidation", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<MinimalEmployeeData> GetUsers(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			var result = Task.Run(() => GetUsersAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<MinimalEmployeeData>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetUsersNotSubmittedTimesheetsAsyncMsg(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getUsersNotSubmittedTimesheets", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUsersNotSubmittedTimesheetsAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getUsersNotSubmittedTimesheets", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual NotSubmitedTimesheetsResponse GetUsersNotSubmittedTimesheets(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			var result = Task.Run(() => GetUsersNotSubmittedTimesheetsAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<NotSubmitedTimesheetsResponse>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSubmitDetailByDateAsyncMsg(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getSubmitDetailByDate", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSubmitDetailByDateAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/getSubmitDetailByDate", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<TimeSheetRessourceDetail> GetSubmitDetailByDate(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			var result = Task.Run(() => GetSubmitDetailByDateAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TimeSheetRessourceDetail>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="data"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SendNotifToUserNotSubmitAsyncMsg(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/sendNotifToUserNotSubmit", data);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SendNotifToUserNotSubmitAsync(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<TimesheetsValidationUsersRequest>>("api/v1/timesheets/sendNotifToUserNotSubmit", data);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult SendNotifToUserNotSubmit(DatesRangeFilteredRequest<TimesheetsValidationUsersRequest> data)
		{
			var result = Task.Run(() => SendNotifToUserNotSubmitAsyncMsg(data)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Get the sumaries of timesheets for users
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetSummariesAsyncMsg(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestTimesheetsSummaries>>("api/v1/timesheets/GetSummaries", request);
		}

		/// <summary>
		/// Get the sumaries of timesheets for users
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSummariesAsync(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request)
		{
			return await HttpClient.PostAsJsonAsync<DatesRangeFilteredRequest<RequestTimesheetsSummaries>>("api/v1/timesheets/GetSummaries", request);
		}

		/// <summary>
		/// Get the sumaries of timesheets for users
		/// </summary>
		public virtual List<TimeSheetReduced> GetSummaries(DatesRangeFilteredRequest<RequestTimesheetsSummaries> request)
		{
			var result = Task.Run(() => GetSummariesAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TimeSheetReduced>>().Result;
			 		}

		/// <summary>
		/// Saves timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="time"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveTimesheetAsyncMsg(Int32 ressourceId,TimeSheetReduced time)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/SaveTimesheet/" + ressourceId, time);
		}

		/// <summary>
		/// Saves timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveTimesheetAsync(Int32 ressourceId,TimeSheetReduced time)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/SaveTimesheet/" + ressourceId, time);
		}

		/// <summary>
		/// Saves timesheet
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResultWithId SaveTimesheet(Int32 ressourceId,TimeSheetReduced time)
		{
			var result = Task.Run(() => SaveTimesheetAsyncMsg(ressourceId, time)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Gets a list of general comments for a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetGeneralCommentsTimesheetAsyncMsg(Int32 timesheetId)
		{
			return await HttpClient.GetAsync("api/v1/timesheets/api/v1/timesheets/GetGeneralCommentsTimesheet/" + timesheetId);
		}

		/// <summary>
		/// Gets a list of general comments for a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetGeneralCommentsTimesheetAsync(Int32 timesheetId)
		{
			return await HttpClient.GetAsync("api/v1/timesheets/api/v1/timesheets/GetGeneralCommentsTimesheet/" + timesheetId);
		}

		/// <summary>
		/// Gets a list of general comments for a timesheet
		/// </summary>
		/// <param name="timesheetId"></param>
		public virtual List<TimesheetGeneralComment> GetGeneralCommentsTimesheet(Int32 timesheetId)
		{
			var result = Task.Run(() => GetGeneralCommentsTimesheetAsyncMsg(timesheetId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TimesheetGeneralComment>>().Result;
			 		}

		/// <summary>
		/// Edits a general comments for a timesheet
		/// </summary>
		/// <param name="commentId"></param>
		/// <param name="newText"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> EditGeneralCommentAsyncMsg(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/timesheets/api/v1/timesheets/EditGeneralComment/" + commentId, newText);
		}

		/// <summary>
		/// Edits a general comments for a timesheet
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> EditGeneralCommentAsync(Int32 commentId,String newText)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/timesheets/api/v1/timesheets/EditGeneralComment/" + commentId, newText);
		}

		/// <summary>
		/// Edits a general comments for a timesheet
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult EditGeneralComment(Int32 commentId,String newText)
		{
			var result = Task.Run(() => EditGeneralCommentAsyncMsg(commentId, newText)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Delete timesheet general comments
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteGeneralCommentAsyncMsg(Int32 commentId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/api/v1/timesheets/DeleteGeneralComment/" + commentId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete timesheet general comments
		/// </summary>
		/// <param name="commentId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteGeneralCommentAsync(Int32 commentId)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/api/v1/timesheets/DeleteGeneralComment/" + commentId, default(HttpResponseMessage));
		}

		/// <summary>
		/// Delete timesheet general comments
		/// </summary>
		/// <param name="commentId"></param>
		public virtual UpdateResult DeleteGeneralComment(Int32 commentId)
		{
			var result = Task.Run(() => DeleteGeneralCommentAsyncMsg(commentId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Add timesheet general comments
		/// </summary>
		/// <param name="timesheetId">id of the timesheet</param>
		/// <param name="comment">text of the comment</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddGeneralTimesheetCommentsAsyncMsg(Int32 timesheetId,String comment)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/api/v1/timesheets/AddGeneralTimesheetComments?timesheetId=" + timesheetId + "&comment=" + comment, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add timesheet general comments
		/// </summary>
		/// <param name="timesheetId">id of the timesheet</param>
		/// <param name="comment">text of the comment</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddGeneralTimesheetCommentsAsync(Int32 timesheetId,String comment)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/timesheets/api/v1/timesheets/AddGeneralTimesheetComments?timesheetId=" + timesheetId + "&comment=" + comment, default(HttpResponseMessage));
		}

		/// <summary>
		/// Add timesheet general comments
		/// </summary>
		/// <param name="timesheetId">id of the timesheet</param>
		/// <param name="comment">text of the comment</param>
		public virtual UpdateResultWithId AddGeneralTimesheetComments(Int32 timesheetId,String comment)
		{
			var result = Task.Run(() => AddGeneralTimesheetCommentsAsyncMsg(timesheetId, comment)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// Saves timesheet comments only
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <param name="time"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SaveTimesheetCommentsAsyncMsg(Int32 ressourceId,TimeSheetReduced time)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/SaveTimesheetComments/" + ressourceId, time);
		}

		/// <summary>
		/// Saves timesheet comments only
		/// </summary>
		/// <param name="ressourceId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveTimesheetCommentsAsync(Int32 ressourceId,TimeSheetReduced time)
		{
			return await HttpClient.PostAsJsonAsync<TimeSheetReduced>("api/v1/timesheets/SaveTimesheetComments/" + ressourceId, time);
		}

		/// <summary>
		/// Saves timesheet comments only
		/// </summary>
		/// <param name="ressourceId"></param>
		public virtual UpdateResultWithId SaveTimesheetComments(Int32 ressourceId,TimeSheetReduced time)
		{
			var result = Task.Run(() => SaveTimesheetCommentsAsyncMsg(ressourceId, time)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResultWithId>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Timesheets");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Timesheets");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class TranslationsClient : ClientBase, Interfaces.ITranslationsClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public TranslationsClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TranslationsClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="pageName"></param>
		/// <param name="isControl"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTranslationsAsyncMsg(String pageName,Boolean isControl)
		{
			return await HttpClient.GetAsync("api/v1/langs/GetTranslations?pageName=" + pageName + "&isControl=" + isControl);
		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="pageName"></param>
		/// <param name="isControl"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTranslationsAsync(String pageName,Boolean isControl)
		{
			return await HttpClient.GetAsync("api/v1/langs/GetTranslations?pageName=" + pageName + "&isControl=" + isControl);
		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="pageName"></param>
		/// <param name="isControl"></param>
		public virtual List<TranslationText> GetTranslations(String pageName,Boolean isControl)
		{
			var result = Task.Run(() => GetTranslationsAsyncMsg(pageName, isControl)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TranslationText>>().Result;
			 		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="isControl"></param>
		/// <param name="pagesNames"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllTranslationsAsyncMsg(Boolean isControl,List<String> pagesNames)
		{
			return await HttpClient.PostAsJsonAsync<List<String>>("api/v1/langs/GetAllTranslations?isControl=" + isControl, pagesNames);
		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="isControl"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllTranslationsAsync(Boolean isControl,List<String> pagesNames)
		{
			return await HttpClient.PostAsJsonAsync<List<String>>("api/v1/langs/GetAllTranslations?isControl=" + isControl, pagesNames);
		}

		/// <summary>
		/// returns translations to use in TypeScript for a page or right pane
		/// </summary>
		/// <param name="isControl"></param>
		public virtual List<TranslationGroupText> GetAllTranslations(Boolean isControl,List<String> pagesNames)
		{
			var result = Task.Run(() => GetAllTranslationsAsyncMsg(isControl, pagesNames)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TranslationGroupText>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAllLangsAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/langs/GetAllLangs");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllLangsAsync()
		{
			return await HttpClient.GetAsync("api/v1/langs/GetAllLangs");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<LangDefinition> GetAllLangs()
		{
			var result = Task.Run(() => GetAllLangsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<LangDefinition>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ChangeLanguageAsyncMsg(String newCulture,Boolean origUser)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/langs/ChangeLanguage?newCulture=" + newCulture + "&origUser=" + origUser, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ChangeLanguageAsync(String newCulture,Boolean origUser)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/langs/ChangeLanguage?newCulture=" + newCulture + "&origUser=" + origUser, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="newCulture"></param>
		/// <param name="origUser"></param>
		public virtual UpdateResult ChangeLanguage(String newCulture,Boolean origUser)
		{
			var result = Task.Run(() => ChangeLanguageAsyncMsg(newCulture, origUser)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Translations");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/Translations");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// Allows managment of user settings
	/// </summary>
	public partial class UserProfileClient : ClientBase, Interfaces.IUserProfileClient
	{		

		/// <summary>
		/// Allows managment of user settings
		/// </summary>
		public UserProfileClient() : base()
		{
		}

		/// <summary>
		/// Allows managment of user settings
		/// </summary>
		public UserProfileClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="password"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> Enable2FAAsyncMsg(String password)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile/enable2FA?password=" + password, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="password"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> Enable2FAAsync(String password)
		{
			return await HttpClient.PostAsJsonAsync("api/v1/profile/enable2FA?password=" + password, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="password"></param>
		public virtual Enable2FAResult Enable2FA(String password)
		{
			var result = Task.Run(() => Enable2FAAsyncMsg(password)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<Enable2FAResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="request"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> Activate2FAAsyncMsg(Activate2FARequest request)
		{
			return await HttpClient.PostAsJsonAsync<Activate2FARequest>("api/v1/profile/activate2FA", request);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> Activate2FAAsync(Activate2FARequest request)
		{
			return await HttpClient.PostAsJsonAsync<Activate2FARequest>("api/v1/profile/activate2FA", request);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UpdateResult Activate2FA(Activate2FARequest request)
		{
			var result = Task.Run(() => Activate2FAAsyncMsg(request)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimesheetRemindersAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/profile/getTimesheetsReminders");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimesheetRemindersAsync()
		{
			return await HttpClient.GetAsync("api/v1/profile/getTimesheetsReminders");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<TriggerWraper> GetTimesheetReminders()
		{
			var result = Task.Run(() => GetTimesheetRemindersAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TriggerWraper>>().Result;
			 		}

		/// <summary>
		/// Gets the list of custom notifications for a user
		/// </summary>
		/// <param name="ressourceId">Optional</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetDefinedTriggertsAsyncMsg(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/profile/getNotificationsTriggers/" + ressourceId);
		}

		/// <summary>
		/// Gets the list of custom notifications for a user
		/// </summary>
		/// <param name="ressourceId">Optional</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetDefinedTriggertsAsync(Int32 ressourceId)
		{
			return await HttpClient.GetAsync("api/v1/profile/getNotificationsTriggers/" + ressourceId);
		}

		/// <summary>
		/// Gets the list of custom notifications for a user
		/// </summary>
		/// <param name="ressourceId">Optional</param>
		public virtual List<TriggerWraper> GetDefinedTriggerts(Int32 ressourceId)
		{
			var result = Task.Run(() => GetDefinedTriggertsAsyncMsg(ressourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<TriggerWraper>>().Result;
			 		}

		/// <summary>
		/// Deletes custom notification trigger for a user
		/// </summary>
		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteCustomTriggerAsyncMsg(Guid nuid,Int32 ressourceId)
		{
			return await HttpClient.DeleteAsync("api/v1/profile/deleteTrigger/" + nuid + "/" + ressourceId);
		}

		/// <summary>
		/// Deletes custom notification trigger for a user
		/// </summary>
		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteCustomTriggerAsync(Guid nuid,Int32 ressourceId)
		{
			return await HttpClient.DeleteAsync("api/v1/profile/deleteTrigger/" + nuid + "/" + ressourceId);
		}

		/// <summary>
		/// Deletes custom notification trigger for a user
		/// </summary>
		/// <param name="nuid">GUID of the trigger</param>
		/// <param name="ressourceId">optional ressource id</param>
		public virtual UpdateResult DeleteCustomTrigger(Guid nuid,Int32 ressourceId)
		{
			var result = Task.Run(() => DeleteCustomTriggerAsyncMsg(nuid, ressourceId)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Creates a list of notifications
		/// </summary>
		/// <param name="ressourceId">USer to add notification to. (Optional)</param>
		/// <param name="triggers">List of notifications</param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddCustomNotificationAsyncMsg(Int32 ressourceId,List<BaseBeeyeTrigger> triggers)
		{
			return await HttpClient.PostAsJsonAsync<List<BaseBeeyeTrigger>>("api/v1/profile/addNotification/" + ressourceId, triggers);
		}

		/// <summary>
		/// Creates a list of notifications
		/// </summary>
		/// <param name="ressourceId">USer to add notification to. (Optional)</param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddCustomNotificationAsync(Int32 ressourceId,List<BaseBeeyeTrigger> triggers)
		{
			return await HttpClient.PostAsJsonAsync<List<BaseBeeyeTrigger>>("api/v1/profile/addNotification/" + ressourceId, triggers);
		}

		/// <summary>
		/// Creates a list of notifications
		/// </summary>
		/// <param name="ressourceId">USer to add notification to. (Optional)</param>
		public virtual UpdateResult AddCustomNotification(Int32 ressourceId,List<BaseBeeyeTrigger> triggers)
		{
			var result = Task.Run(() => AddCustomNotificationAsyncMsg(ressourceId, triggers)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// Returns list of countries
		/// Needed for timezine selection
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCountriesAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/profile/GetCountries");
		}

		/// <summary>
		/// Returns list of countries
		/// Needed for timezine selection
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCountriesAsync()
		{
			return await HttpClient.GetAsync("api/v1/profile/GetCountries");
		}

		/// <summary>
		/// Returns list of countries
		/// Needed for timezine selection
		/// </summary>
		public virtual IDictionary<String, String> GetCountries()
		{
			var result = Task.Run(() => GetCountriesAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<IDictionary<String, String>>().Result;
			 		}

		/// <summary>
		/// Returns a list of TimeZones for specified country code
		/// </summary>
		/// <param name="country"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTimeZonesAsyncMsg(String country)
		{
			return await HttpClient.GetAsync("api/v1/profile/GetTimeZones?country=" + country);
		}

		/// <summary>
		/// Returns a list of TimeZones for specified country code
		/// </summary>
		/// <param name="country"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTimeZonesAsync(String country)
		{
			return await HttpClient.GetAsync("api/v1/profile/GetTimeZones?country=" + country);
		}

		/// <summary>
		/// Returns a list of TimeZones for specified country code
		/// </summary>
		/// <param name="country"></param>
		public virtual IDictionary<String, String> GetTimeZones(String country)
		{
			var result = Task.Run(() => GetTimeZonesAsyncMsg(country)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<IDictionary<String, String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="timeZone"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCountryFromTimeZoneAsyncMsg(String timeZone)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/profile/GetCountryFromTimeZone", timeZone);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCountryFromTimeZoneAsync(String timeZone)
		{
			return await HttpClient.PostAsJsonAsync<String>("api/v1/profile/GetCountryFromTimeZone", timeZone);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetCountryFromTimeZone(String timeZone)
		{
			var result = Task.Run(() => GetCountryFromTimeZoneAsyncMsg(timeZone)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/UserProfile");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/UserProfile");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class WebHooksClient : ClientBase, Interfaces.IWebHooksClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public WebHooksClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public WebHooksClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// Gets the list of all avalible web hooks in Beeye
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAvalibleWebHooksAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/hooks/GetAvalibleWebHooks");
		}

		/// <summary>
		/// Gets the list of all avalible web hooks in Beeye
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAvalibleWebHooksAsync()
		{
			return await HttpClient.GetAsync("api/v1/hooks/GetAvalibleWebHooks");
		}

		/// <summary>
		/// Gets the list of all avalible web hooks in Beeye
		/// </summary>
		public virtual List<BeeyeWebHook> GetAvalibleWebHooks()
		{
			var result = Task.Run(() => GetAvalibleWebHooksAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<BeeyeWebHook>>().Result;
			 		}

		/// <summary>
		/// Gets the list of active web hook for company
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetActiveWebHooksAsyncMsg()
		{
			return await HttpClient.GetAsync("api/v1/hooks/GetActiveWebHooks");
		}

		/// <summary>
		/// Gets the list of active web hook for company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetActiveWebHooksAsync()
		{
			return await HttpClient.GetAsync("api/v1/hooks/GetActiveWebHooks");
		}

		/// <summary>
		/// Gets the list of active web hook for company
		/// </summary>
		public virtual List<ActiveBeeyeWebHook> GetActiveWebHooks()
		{
			var result = Task.Run(() => GetActiveWebHooksAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<ActiveBeeyeWebHook>>().Result;
			 		}

		/// <summary>
		/// Updates the list of active web hook for company
		/// </summary>
		/// <param name="activeHooks"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UpdateWebHooksAsyncMsg(List<ActiveBeeyeWebHook> activeHooks)
		{
			return await HttpClient.PostAsJsonAsync<List<ActiveBeeyeWebHook>>("api/v1/hooks/GetActiveWebHooks", activeHooks);
		}

		/// <summary>
		/// Updates the list of active web hook for company
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateWebHooksAsync(List<ActiveBeeyeWebHook> activeHooks)
		{
			return await HttpClient.PostAsJsonAsync<List<ActiveBeeyeWebHook>>("api/v1/hooks/GetActiveWebHooks", activeHooks);
		}

		/// <summary>
		/// Updates the list of active web hook for company
		/// </summary>
		public virtual UpdateResult UpdateWebHooks(List<ActiveBeeyeWebHook> activeHooks)
		{
			var result = Task.Run(() => UpdateWebHooksAsyncMsg(activeHooks)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<UpdateResult>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetTextAsyncMsg(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/WebHooks");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTextAsync(TranslationLine line)
		{
			return await HttpClient.GetAsync("api/WebHooks");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GetText(TranslationLine line)
		{
			var result = Task.Run(() => GetTextAsyncMsg(line)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<String>().Result;
			 		}

		#endregion
	}
}
#endregion

